include "TriggerLibs/natives"

//--------------------------------------------------------------------------------------------------
// Library: WarCraft Trigger
//--------------------------------------------------------------------------------------------------
// Constants
const string libGAWT_gv_c_stringPrefix = "TRIGSTR_";

// Variable Declarations
int libGAWT_gv_jassStateTable;
sound libGAWT_gv_thematicMusic;

// Function Declarations
string libGAWT_gf_ConvertAssetToId (string lp_path);
fixed j_GetDestructableX (unit lp_d);
fixed j_GetDestructableY (unit lp_d);
void j_SetDestructableLife (unit lp_d, fixed lp_life);
fixed j_GetDestructableLife (unit lp_d);
point j_Location (fixed lp_x, fixed lp_y);
void j_SetUnitPosition (unit lp_whichUnit, fixed lp_newX, fixed lp_newY);
void j_SetUnitPositionLoc (unit lp_whichUnit, point lp_whichLocation);
void j_SetUnitX (unit lp_whichUnit, fixed lp_newX);
void j_SetUnitY (unit lp_whichUnit, fixed lp_newY);
void j_SetUnitFacing (unit lp_whichUnit, fixed lp_facingAngle);
void j_SetUnitFacingTimed (unit lp_whichUnit, fixed lp_facingAngle, fixed lp_duration);
fixed j_GetUnitX (unit lp_whichUnit);
fixed j_GetUnitY (unit lp_whichUnit);
point j_GetUnitLoc (unit lp_whichUnit);
bool j_IsUnitPaused (unit lp_whichHero);
void j_SetUnitPathing (unit lp_whichUnit, bool lp_flag);
void j_StartSound (sound lp_soundHandle);
void j_StopSound (sound lp_soundHandle, bool lp_killWhenDone, bool lp_fadeOut);
void j_KillSoundWhenDone (sound lp_soundHandle);
void j_SetMapMusic (string lp_musicName, bool lp_random, int lp_index);
void j_ClearMapMusic ();
void j_PlayMusic (string lp_musicName);
void j_PlayMusicEx (string lp_musicName, int lp_frommsecs, int lp_fadeinmsecs);
void j_StopMusic (bool lp_fadeOut);
void j_ResumeMusic ();
void j_PlayThematicMusic (string lp_musicFileName);
void j_PlayThematicMusicEx (string lp_musicFileName, int lp_frommsecs);
void j_EndThematicMusic ();
void j_SetMusicVolume (int lp_volume);
void j_SetMusicPlayPosition (int lp_millisecs);
void j_SetThematicMusicPlayPosition (int lp_millisecs);
void j_SetSoundDuration (sound lp_soundHandle, int lp_duration);
int j_GetSoundDuration (sound lp_soundHandle);
int j_GetSoundFileDuration (string lp_musicFileName);
void j_VolumeGroupSetVolume (int lp_vgroup, fixed lp_scale);
void j_VolumeGroupReset ();
bool j_GetSoundIsPlaying (sound lp_soundHandle);
bool j_GetSoundIsLoading (sound lp_soundHandle);
void j_RegisterStackedSound (sound lp_soundHandle, bool lp_byPosition, fixed lp_rectwidth, fixed lp_rectheight);
void j_UnregisterStackedSound (sound lp_soundHandle, bool lp_byPosition, fixed lp_rectwidth, fixed lp_rectheight);
int j_GetRandomInt (int lp_lowBound, int lp_highBound);
fixed j_GetRandomReal (fixed lp_lowBound, fixed lp_highBound);
int j_GetLocalPlayer ();
string j_Pow2 (int lp_x);
string j_GetLocalizedString (string lp_source);
int j_GetLocalizedHotkey (string lp_source);
int j_GetDefaultDifficulty ();
void j_SetDefaultDifficulty (int lp_g);
void j_SetGameDifficulty (int lp_whichdifficulty);
bool j_IssuePointOrder (unit lp_whichUnit, string lp_order, fixed lp_x, fixed lp_y);
bool j_IssuePointOrderLoc (unit lp_whichUnit, string lp_order, point lp_whichLocation);
bool j_IssuePointOrderById (unit lp_whichUnit, int lp_order, fixed lp_x, fixed lp_y);
bool j_IssuePointOrderByIdLoc (unit lp_whichUnit, int lp_order, point lp_whichLocation);
bool j_IssueTargetOrder (unit lp_whichUnit, string lp_order, unit lp_targetWidget);
bool j_IssueTargetOrderById (unit lp_whichUnit, int lp_order, unit lp_targetWidget);
bool j_IssueInstantPointOrder (unit lp_whichUnit, string lp_order, fixed lp_x, fixed lp_y, unit lp_instantTargetWidget);
bool j_IssueInstantPointOrderById (unit lp_whichUnit, int lp_order, fixed lp_x, fixed lp_y, unit lp_instantTargetWidget);
bool j_IssueInstantTargetOrder (unit lp_whichUnit, string lp_order, unit lp_targetWidget, unit lp_instantTargetWidget);
bool j_IssueInstantTargetOrderById (unit lp_whichUnit, int lp_order, unit lp_targetWidget, unit lp_instantTargetWidget);
trigger j_CreateTrigger ();
void j_DestroyTrigger (trigger lp_whichTrigger);
void j_ResetTrigger (trigger lp_whichTrigger);
void j_EnableTrigger (trigger lp_whichTrigger);
void j_DisableTrigger (trigger lp_whichTrigger);
bool j_IsTriggerEnabled (trigger lp_whichTrigger);
void j_TriggerWaitOnSleeps (trigger lp_whichTrigger, bool lp_flag);
int j_ConvertRace (int lp_i);
int j_ConvertAllianceType (int lp_i);
int j_ConvertRacePref (int lp_i);
int j_ConvertIGameState (int lp_i);
int j_ConvertFGameState (int lp_i);
int j_ConvertPlayerState (int lp_i);
int j_ConvertPlayerScore (int lp_i);
int j_ConvertPlayerGameResult (int lp_i);
int j_ConvertUnitState (int lp_i);
int j_ConvertAIDifficulty (int lp_i);
int j_ConvertGameEvent (int lp_i);
int j_ConvertPlayerEvent (int lp_i);
int j_ConvertPlayerUnitEvent (int lp_i);
int j_ConvertWidgetEvent (int lp_i);
int j_ConvertDialogEvent (int lp_i);
int j_ConvertUnitEvent (int lp_i);
int j_ConvertLimitOp (int lp_i);
int j_ConvertUnitType (int lp_i);
int j_ConvertGameSpeed (int lp_i);
int j_ConvertPlacement (int lp_i);
int j_ConvertStartLocPrio (int lp_i);
int j_ConvertGameDifficulty (int lp_i);
int j_ConvertGameType (int lp_i);
int j_ConvertMapFlag (int lp_i);
int j_ConvertMapVisibility (int lp_i);
int j_ConvertMapSetting (int lp_i);
int j_ConvertMapDensity (int lp_i);
int j_ConvertMapControl (int lp_i);
int j_ConvertPlayerColor (int lp_i);
int j_ConvertPlayerSlotState (int lp_i);
int j_ConvertVolumeGroup (int lp_i);
int j_ConvertCameraField (int lp_i);
int j_ConvertBlendMode (int lp_i);
int j_ConvertRarityControl (int lp_i);
int j_ConvertTexMapFlags (int lp_i);
int j_ConvertFogState (int lp_i);
int j_ConvertEffectType (int lp_i);
int j_ConvertVersion (int lp_i);
int j_ConvertItemType (int lp_i);
int j_ConvertAttackType (int lp_i);
int j_ConvertDamageType (int lp_i);
int j_ConvertWeaponType (int lp_i);
int j_ConvertSoundType (int lp_i);
int j_ConvertPathingType (int lp_i);
int j_OrderId (string lp_mfmmwfckwlfjbcrl);
int j_UnitId (string lp_yjwnarvstylxmabj);
int j_AbilityId (string lp_kqciowffxabekbma);
string j_GetObjectName (int lp_objectId);
fixed j_Sin (fixed lp_radians);
fixed j_Cos (fixed lp_radians);
fixed j_Tan (fixed lp_radians);
fixed j_Asin (fixed lp_y);
fixed j_Acos (fixed lp_x);
fixed j_Atan (fixed lp_x);
fixed j_SquareRoot (fixed lp_x);
fixed j_Pow (fixed lp_x, fixed lp_power);
int j_GetHandleId (int lp_h);
string j_SubString (string lp_source, int lp_start, int lp_end);
int j_StringLength (string lp_s);
string j_StringCase (string lp_source, bool lp_upper);
int j_StringHash (string lp_s);
void j_SetMapName (string lp_name);
void j_SetMapDescription (string lp_description);
void j_SetTeams (int lp_teamcount);
void j_SetPlayers (int lp_playercount);
void j_DefineStartLocation (int lp_whichStartLoc, fixed lp_x, fixed lp_y);
void j_DefineStartLocationLoc (int lp_whichStartLoc, point lp_whichLocation);
void j_SetStartLocPrioCount (int lp_whichStartLoc, int lp_prioSlotCount);
void j_SetStartLocPrio (int lp_whichStartLoc, int lp_prioSlotIndex, int lp_otherStartLocIndex, int lp_priority);
int j_GetStartLocPrioSlot (int lp_whichStartLoc, int lp_prioSlotIndex);
int j_GetStartLocPrio (int lp_whichStartLoc, int lp_prioSlotIndex);
void j_SetGameTypeSupported (int lp_whichGameType, bool lp_value);
void j_SetMapFlag (int lp_whichMapFlag, bool lp_value);
void j_SetGamePlacement (int lp_whichPlacementType);
void j_SetGameSpeed (int lp_whichspeed);
void j_SetResourceDensity (int lp_whichdensity);
void j_SetCreatureDensity (int lp_whichdensity);
int j_GetTeams ();
int j_GetPlayers ();
bool j_IsGameTypeSupported (int lp_whichGameType);
int j_GetGameTypeSelected ();
bool j_IsMapFlagSet (int lp_whichMapFlag);
int j_GetGamePlacement ();
int j_GetGameSpeed ();
int j_GetGameDifficulty ();
int j_GetResourceDensity ();
int j_GetCreatureDensity ();
fixed j_GetStartLocationX (int lp_whichStartLocation);
fixed j_GetStartLocationY (int lp_whichStartLocation);
point j_GetStartLocationLoc (int lp_whichStartLocation);
void j_SetPlayerTeam (int lp_whichPlayer, int lp_whichTeam);
void j_SetPlayerStartLocation (int lp_whichPlayer, int lp_startLocIndex);
void j_ForcePlayerStartLocation (int lp_whichPlayer, int lp_startLocIndex);
void j_SetPlayerColor (int lp_whichPlayer, int lp_color);
void j_SetPlayerAlliance (int lp_sourcePlayer, int lp_otherPlayer, int lp_whichAllianceSetting, bool lp_value);
void j_SetPlayerTaxRate (int lp_sourcePlayer, int lp_otherPlayer, int lp_whichResource, int lp_rate);
void j_SetPlayerRacePreference (int lp_whichPlayer, int lp_whichRacePreference);
void j_SetPlayerRaceSelectable (int lp_whichPlayer, bool lp_value);
void j_SetPlayerController (int lp_whichPlayer, int lp_controlType);
void j_SetPlayerName (int lp_whichPlayer, string lp_name);
void j_SetPlayerOnScoreScreen (int lp_whichPlayer, bool lp_flag);
int j_GetPlayerTeam (int lp_whichPlayer);
int j_GetPlayerStartLocation (int lp_whichPlayer);
int j_GetPlayerColor (int lp_whichPlayer);
bool j_GetPlayerSelectable (int lp_whichPlayer);
int j_GetPlayerController (int lp_whichPlayer);
int j_GetPlayerSlotState (int lp_whichPlayer);
int j_GetPlayerTaxRate (int lp_sourcePlayer, int lp_otherPlayer, int lp_whichResource);
bool j_IsPlayerRacePrefSet (int lp_whichPlayer, int lp_pref);
string j_GetPlayerName (int lp_whichPlayer);
timer j_CreateTimer ();
void j_DestroyTimer (timer lp_whichTimer);
void j_TimerStart (timer lp_whichTimer, fixed lp_timeout, bool lp_periodic, string lp_handlerFunc);
fixed j_TimerGetElapsed (timer lp_whichTimer);
fixed j_TimerGetRemaining (timer lp_whichTimer);
fixed j_TimerGetTimeout (timer lp_whichTimer);
void j_PauseTimer (timer lp_whichTimer);
void j_ResumeTimer (timer lp_whichTimer);
timer j_GetExpiredTimer ();
unitgroup j_CreateGroup ();
void j_DestroyGroup (unitgroup lp_whichGroup);
void j_GroupAddUnit (unitgroup lp_whichGroup, unit lp_whichUnit);
void j_GroupRemoveUnit (unitgroup lp_whichGroup, unit lp_whichUnit);
void j_GroupClear (unitgroup lp_whichGroup);
void j_GroupEnumUnitsOfType (unitgroup lp_whichGroup, string lp_unitname, string lp_filter);
void j_GroupEnumUnitsOfPlayer (unitgroup lp_whichGroup, int lp_whichPlayer, string lp_filter);
void j_GroupEnumUnitsOfTypeCounted (unitgroup lp_whichGroup, string lp_unitname, string lp_filter, int lp_countLimit);
void j_GroupEnumUnitsInRect (unitgroup lp_whichGroup, region lp_r, string lp_filter);
void j_GroupEnumUnitsInRectCounted (unitgroup lp_whichGroup, region lp_r, string lp_filter, int lp_countLimit);
void j_GroupEnumUnitsInRange (unitgroup lp_whichGroup, fixed lp_x, fixed lp_y, fixed lp_radius, string lp_filter);
void j_GroupEnumUnitsInRangeOfLoc (unitgroup lp_whichGroup, point lp_whichLocation, fixed lp_radius, string lp_filter);
void j_GroupEnumUnitsInRangeCounted (unitgroup lp_whichGroup, fixed lp_x, fixed lp_y, fixed lp_radius, string lp_filter, int lp_countLimit);
void j_GroupEnumUnitsInRangeOfLocCounted (unitgroup lp_whichGroup, point lp_whichLocation, fixed lp_radius, string lp_filter, int lp_countLimit);
void j_GroupEnumUnitsSelected (unitgroup lp_whichGroup, int lp_whichPlayer, string lp_filter);
bool j_GroupImmediateOrder (unitgroup lp_whichGroup, string lp_order);
bool j_GroupImmediateOrderById (unitgroup lp_whichGroup, int lp_order);
bool j_GroupPointOrder (unitgroup lp_whichGroup, string lp_order, fixed lp_x, fixed lp_y);
bool j_GroupPointOrderLoc (unitgroup lp_whichGroup, string lp_order, point lp_whichLocation);
bool j_GroupPointOrderById (unitgroup lp_whichGroup, int lp_order, fixed lp_x, fixed lp_y);
bool j_GroupPointOrderByIdLoc (unitgroup lp_whichGroup, int lp_order, point lp_whichLocation);
bool j_GroupTargetOrder (unitgroup lp_whichGroup, string lp_order, unit lp_targetWidget);
bool j_GroupTargetOrderById (unitgroup lp_whichGroup, int lp_order, unit lp_targetWidget);
void j_ForGroup (unitgroup lp_whichGroup, string lp_callback);
unit j_FirstOfGroup (unitgroup lp_whichGroup);
playergroup j_CreateForce ();
void j_DestroyForce (playergroup lp_whichForce);
void j_ForceAddPlayer (playergroup lp_whichForce, int lp_whichPlayer);
void j_ForceRemovePlayer (playergroup lp_whichForce, int lp_whichPlayer);
void j_ForceClear (playergroup lp_whichForce);
void j_ForceEnumPlayers (playergroup lp_whichForce, string lp_filter);
void j_ForceEnumPlayersCounted (playergroup lp_whichForce, string lp_filter, int lp_countLimit);
void j_ForceEnumAllies (playergroup lp_whichForce, int lp_whichPlayer, string lp_filter);
void j_ForceEnumEnemies (playergroup lp_whichForce, int lp_whichPlayer, string lp_filter);
void j_ForForce (playergroup lp_whichForce, string lp_callback);
region j_Rect (fixed lp_minx, fixed lp_miny, fixed lp_maxx, fixed lp_maxy);
region j_RectFromLoc (point lp_min, point lp_max);
void j_RemoveRect (region lp_whichRect);
void j_SetRect (region lp_whichRect, fixed lp_minx, fixed lp_miny, fixed lp_maxx, fixed lp_maxy);
void j_SetRectFromLoc (region lp_whichRect, point lp_min, point lp_max);
void j_MoveRectTo (region lp_whichRect, fixed lp_newCenterX, fixed lp_newCenterY);
void j_MoveRectToLoc (region lp_whichRect, point lp_newCenterLoc);
fixed j_GetRectCenterX (region lp_whichRect);
fixed j_GetRectCenterY (region lp_whichRect);
fixed j_GetRectMinX (region lp_whichRect);
fixed j_GetRectMinY (region lp_whichRect);
fixed j_GetRectMaxX (region lp_whichRect);
fixed j_GetRectMaxY (region lp_whichRect);
region j_CreateRegion ();
void j_RemoveRegion (region lp_whichRegion);
void j_RegionAddRect (region lp_whichRegion, region lp_r);
void j_RegionClearRect (region lp_whichRegion, region lp_r);
void j_RegionAddCell (region lp_whichRegion, fixed lp_x, fixed lp_y);
void j_RegionAddCellAtLoc (region lp_whichRegion, point lp_whichLocation);
void j_RegionClearCell (region lp_whichRegion, fixed lp_x, fixed lp_y);
void j_RegionClearCellAtLoc (region lp_whichRegion, point lp_whichLocation);
void j_RemoveLocation (point lp_whichLocation);
void j_MoveLocation (point lp_whichLocation, fixed lp_newX, fixed lp_newY);
fixed j_GetLocationX (point lp_whichLocation);
fixed j_GetLocationY (point lp_whichLocation);
fixed j_GetLocationZ (point lp_whichLocation);
bool j_IsUnitInRegion (region lp_whichRegion, unit lp_whichUnit);
bool j_IsPointInRegion (region lp_whichRegion, fixed lp_x, fixed lp_y);
bool j_IsLocationInRegion (region lp_whichRegion, point lp_whichLocation);
region j_GetWorldBounds ();
unit j_GetFilterUnit ();
unit j_GetEnumUnit ();
unit j_GetFilterDestructable ();
unit j_GetEnumDestructable ();
unit j_GetFilterItem ();
unit j_GetEnumItem ();
int j_GetFilterPlayer ();
int j_GetEnumPlayer ();
trigger j_GetTriggeringTrigger ();
int j_GetTriggerEventId ();
int j_GetTriggerEvalCount (trigger lp_whichTrigger);
int j_GetTriggerExecCount (trigger lp_whichTrigger);
void j_ExecuteFunc (string lp_funcName);
string j_And (string lp_operandA, string lp_operandB);
string j_Or (string lp_operandA, string lp_operandB);
string j_Not (string lp_operand);
string j_Condition (string lp_func);
void j_DestroyCondition (string lp_c);
string j_Filter (string lp_func);
void j_DestroyFilter (string lp_f);
void j_DestroyBoolExpr (string lp_e);
void j_TriggerRegisterVariableEvent (trigger t, trigger lp_whichTrigger, string lp_varName, int lp_opcode, fixed lp_limitval);
void j_TriggerRegisterTimerEvent (trigger t, trigger lp_whichTrigger, fixed lp_timeout, bool lp_periodic);
void j_TriggerRegisterTimerExpireEvent (trigger t, trigger lp_whichTrigger, timer lp_t);
void j_TriggerRegisterGameStateEvent (trigger t, trigger lp_whichTrigger, int lp_whichState, int lp_opcode, fixed lp_limitval);
void j_TriggerRegisterDialogEvent (trigger t, trigger lp_whichTrigger, int lp_whichDialog);
void j_TriggerRegisterDialogButtonEvent (trigger t, trigger lp_whichTrigger, int lp_whichButton);
int j_GetEventGameState ();
void j_TriggerRegisterGameEvent (trigger t, trigger lp_whichTrigger, int lp_whichGameEvent);
int j_GetWinningPlayer ();
void j_TriggerRegisterEnterRegion (trigger t, trigger lp_whichTrigger, region lp_whichRegion, string lp_filter);
region j_GetTriggeringRegion ();
unit j_GetEnteringUnit ();
void j_TriggerRegisterLeaveRegion (trigger t, trigger lp_whichTrigger, region lp_whichRegion, string lp_filter);
unit j_GetLeavingUnit ();
void j_TriggerRegisterTrackableHitEvent (trigger t, trigger lp_whichTrigger, unit lp_t);
void j_TriggerRegisterTrackableTrackEvent (trigger t, trigger lp_whichTrigger, unit lp_t);
unit j_GetTriggeringTrackable ();
int j_GetClickedButton ();
int j_GetClickedDialog ();
fixed j_GetTournamentFinishSoonTimeRemaining ();
int j_GetTournamentFinishNowRule ();
int j_GetTournamentFinishNowPlayer ();
int j_GetTournamentScore (int lp_whichPlayer);
string j_GetSaveBasicFilename ();
void j_TriggerRegisterPlayerEvent (trigger t, trigger lp_whichTrigger, int lp_bayyxqgmdiwhlxdd, int lp_whichPlayerEvent);
int j_GetTriggerPlayer ();
void j_TriggerRegisterPlayerUnitEvent (trigger t, trigger lp_whichTrigger, int lp_whichPlayer, int lp_whichPlayerUnitEvent, string lp_filter);
unit j_GetLevelingUnit ();
unit j_GetLearningUnit ();
int j_GetLearnedSkill ();
int j_GetLearnedSkillLevel ();
unit j_GetRevivableUnit ();
unit j_GetRevivingUnit ();
unit j_GetAttacker ();
unit j_GetRescuer ();
unit j_GetDyingUnit ();
unit j_GetKillingUnit ();
unit j_GetDecayingUnit ();
unit j_GetConstructingStructure ();
unit j_GetCancelledStructure ();
unit j_GetConstructedStructure ();
unit j_GetResearchingUnit ();
int j_GetResearched ();
int j_GetTrainedUnitType ();
unit j_GetTrainedUnit ();
unit j_GetDetectedUnit ();
unit j_GetSummoningUnit ();
unit j_GetSummonedUnit ();
unit j_GetTransportUnit ();
unit j_GetLoadedUnit ();
unit j_GetSellingUnit ();
unit j_GetSoldUnit ();
unit j_GetBuyingUnit ();
unit j_GetSoldItem ();
unit j_GetChangingUnit ();
int j_GetChangingUnitPrevOwner ();
unit j_GetManipulatingUnit ();
unit j_GetManipulatedItem ();
unit j_GetOrderedUnit ();
int j_GetIssuedOrderId ();
fixed j_GetOrderPointX ();
fixed j_GetOrderPointY ();
point j_GetOrderPointLoc ();
unit j_GetOrderTarget ();
unit j_GetOrderTargetDestructable ();
unit j_GetOrderTargetItem ();
unit j_GetOrderTargetUnit ();
unit j_GetSpellAbilityUnit ();
int j_GetSpellAbilityId ();
string j_GetSpellAbility ();
point j_GetSpellTargetLoc ();
fixed j_GetSpellTargetX ();
fixed j_GetSpellTargetY ();
unit j_GetSpellTargetDestructable ();
unit j_GetSpellTargetItem ();
unit j_GetSpellTargetUnit ();
void j_TriggerRegisterPlayerAllianceChange (trigger t, trigger lp_whichTrigger, int lp_whichPlayer, int lp_whichAlliance);
void j_TriggerRegisterPlayerStateEvent (trigger t, trigger lp_whichTrigger, int lp_whichPlayer, int lp_whichState, int lp_opcode, fixed lp_limitval);
int j_GetEventPlayerState ();
void j_TriggerRegisterPlayerChatEvent (trigger t, trigger lp_whichTrigger, int lp_whichPlayer, string lp_chatMessageToDetect, bool lp_exactMatchOnly);
string j_GetEventPlayerChatString ();
string j_GetEventPlayerChatStringMatched ();
void j_TriggerRegisterDeathEvent (trigger t, trigger lp_whichTrigger, unit lp_whichWidget);
unit j_GetTriggerUnit ();
void j_TriggerRegisterUnitStateEvent (trigger t, trigger lp_whichTrigger, unit lp_whichUnit, int lp_whichState, int lp_opcode, fixed lp_limitval);
int j_GetEventUnitState ();
void j_TriggerRegisterUnitEvent (trigger t, trigger lp_whichTrigger, unit lp_whichUnit, int lp_whichEvent);
fixed j_GetEventDamage ();
unit j_GetEventDamageSource ();
int j_GetEventDetectingPlayer ();
void j_TriggerRegisterFilterUnitEvent (trigger t, trigger lp_whichTrigger, unit lp_whichUnit, int lp_whichEvent, string lp_filter);
unit j_GetEventTargetUnit ();
void j_TriggerRegisterUnitInRange (trigger t, trigger lp_whichTrigger, unit lp_whichUnit, fixed lp_range, string lp_filter);
string j_TriggerAddCondition (trigger lp_whichTrigger, string lp_condition);
void j_TriggerRemoveCondition (trigger lp_whichTrigger, string lp_whichCondition);
void j_TriggerClearConditions (trigger lp_whichTrigger);
string j_TriggerAddAction (trigger lp_whichTrigger, string lp_actionFunc);
void j_TriggerRemoveAction (trigger lp_whichTrigger, string lp_whichAction);
void j_TriggerClearActions (trigger lp_whichTrigger);
void j_TriggerSleepAction (fixed lp_timeout);
void j_TriggerWaitForSound (sound lp_s, fixed lp_offset);
bool j_TriggerEvaluate (trigger lp_whichTrigger);
void j_TriggerExecute (trigger lp_whichTrigger);
void j_TriggerExecuteWait (trigger lp_whichTrigger);
void j_TriggerSyncStart ();
void j_TriggerSyncReady ();
fixed j_GetWidgetLife (unit lp_whichWidget);
void j_SetWidgetLife (unit lp_whichWidget, fixed lp_newLife);
fixed j_GetWidgetX (unit lp_whichWidget);
fixed j_GetWidgetY (unit lp_whichWidget);
unit j_GetTriggerWidget ();
unit j_CreateDestructable (int lp_objectid, fixed lp_x, fixed lp_y, fixed lp_face, fixed lp_scale, int lp_variation);
unit j_CreateDestructableZ (int lp_objectid, fixed lp_x, fixed lp_y, fixed lp_z, fixed lp_face, fixed lp_scale, int lp_variation);
unit j_CreateDeadDestructable (int lp_objectid, fixed lp_x, fixed lp_y, fixed lp_face, fixed lp_scale, int lp_variation);
unit j_CreateDeadDestructableZ (int lp_objectid, fixed lp_x, fixed lp_y, fixed lp_z, fixed lp_face, fixed lp_scale, int lp_variation);
void j_RemoveDestructable (unit lp_d);
void j_KillDestructable (unit lp_d);
void j_SetDestructableInvulnerable (unit lp_d, bool lp_flag);
bool j_IsDestructableInvulnerable (unit lp_d);
void j_EnumDestructablesInRect (region lp_r, string lp_filter, string lp_actionFunc);
int j_GetDestructableTypeId (unit lp_d);
void j_SetDestructableMaxLife (unit lp_d, fixed lp_max);
fixed j_GetDestructableMaxLife (unit lp_d);
void j_DestructableRestoreLife (unit lp_d, fixed lp_life, bool lp_birth);
void j_QueueDestructableAnimation (unit lp_d, string lp_whichAnimation);
void j_SetDestructableAnimation (unit lp_d, string lp_whichAnimation);
void j_SetDestructableAnimationSpeed (unit lp_d, fixed lp_speedFactor);
void j_ShowDestructable (unit lp_d, bool lp_flag);
fixed j_GetDestructableOccluderHeight (unit lp_d);
void j_SetDestructableOccluderHeight (unit lp_d, fixed lp_height);
string j_GetDestructableName (unit lp_d);
unit j_GetTriggerDestructable ();
unit j_CreateItem (int lp_itemid, fixed lp_x, fixed lp_y);
void j_RemoveItem (unit lp_whichItem);
int j_GetItemPlayer (unit lp_whichItem);
int j_GetItemTypeId (unit lp_i);
fixed j_GetItemX (unit lp_i);
fixed j_GetItemY (unit lp_i);
void j_SetItemPosition (unit lp_i, fixed lp_x, fixed lp_y);
void j_SetItemDropOnDeath (unit lp_whichItem, bool lp_flag);
void j_SetItemDroppable (unit lp_i, bool lp_flag);
void j_SetItemPawnable (unit lp_i, bool lp_flag);
void j_SetItemPlayer (unit lp_whichItem, int lp_whichPlayer, bool lp_changeColor);
void j_SetItemInvulnerable (unit lp_whichItem, bool lp_flag);
bool j_IsItemInvulnerable (unit lp_whichItem);
void j_SetItemVisible (unit lp_whichItem, bool lp_show);
bool j_IsItemVisible (unit lp_whichItem);
bool j_IsItemOwned (unit lp_whichItem);
bool j_IsItemPowerup (unit lp_whichItem);
bool j_IsItemSellable (unit lp_whichItem);
bool j_IsItemPawnable (unit lp_whichItem);
bool j_IsItemIdPowerup (int lp_itemId);
bool j_IsItemIdSellable (int lp_itemId);
bool j_IsItemIdPawnable (int lp_itemId);
void j_EnumItemsInRect (region lp_r, string lp_filter, string lp_actionFunc);
int j_GetItemLevel (unit lp_whichItem);
int j_GetItemType (unit lp_whichItem);
void j_SetItemDropID (unit lp_whichItem, int lp_unitId);
string j_GetItemName (unit lp_whichItem);
int j_GetItemCharges (unit lp_whichItem);
void j_SetItemCharges (unit lp_whichItem, int lp_charges);
int j_GetItemUserData (unit lp_whichItem);
void j_SetItemUserData (unit lp_whichItem, int lp_data);
unit j_CreateUnit (int lp_id, int lp_unitid, fixed lp_x, fixed lp_y, fixed lp_face);
unit j_CreateUnitByName (int lp_whichPlayer, string lp_unitname, fixed lp_x, fixed lp_y, fixed lp_face);
unit j_CreateUnitAtLoc (int lp_id, int lp_unitid, point lp_whichLocation, fixed lp_face);
unit j_CreateUnitAtLocByName (int lp_id, string lp_unitname, point lp_whichLocation, fixed lp_face);
unit j_CreateCorpse (int lp_whichPlayer, int lp_unitid, fixed lp_x, fixed lp_y, fixed lp_face);
void j_KillUnit (unit lp_whichUnit);
void j_RemoveUnit (unit lp_whichUnit);
void j_ShowUnit (unit lp_whichUnit, bool lp_show);
void j_SetUnitState (unit lp_whichUnit, int lp_whichUnitState, fixed lp_newVal);
void j_SetUnitMoveSpeed (unit lp_whichUnit, fixed lp_newSpeed);
void j_SetUnitFlyHeight (unit lp_whichUnit, fixed lp_newHeight, fixed lp_rate);
void j_SetUnitTurnSpeed (unit lp_whichUnit, fixed lp_newTurnSpeed);
void j_SetUnitPropWindow (unit lp_whichUnit, fixed lp_newPropWindowAngle);
void j_SetUnitAcquireRange (unit lp_whichUnit, fixed lp_newAcquireRange);
void j_SetUnitCreepGuard (unit lp_whichUnit, bool lp_creepGuard);
fixed j_GetUnitAcquireRange (unit lp_whichUnit);
fixed j_GetUnitTurnSpeed (unit lp_whichUnit);
fixed j_GetUnitPropWindow (unit lp_whichUnit);
fixed j_GetUnitFlyHeight (unit lp_whichUnit);
fixed j_GetUnitDefaultAcquireRange (unit lp_whichUnit);
fixed j_GetUnitDefaultTurnSpeed (unit lp_whichUnit);
fixed j_GetUnitDefaultPropWindow (unit lp_whichUnit);
fixed j_GetUnitDefaultFlyHeight (unit lp_whichUnit);
void j_SetUnitOwner (unit lp_whichUnit, int lp_whichPlayer, bool lp_changeColor);
void j_SetUnitColor (unit lp_whichUnit, int lp_whichColor);
void j_SetUnitScale (unit lp_whichUnit, fixed lp_scaleX, fixed lp_scaleY, fixed lp_scaleZ);
void j_SetUnitTimeScale (unit lp_whichUnit, fixed lp_timeScale);
void j_SetUnitBlendTime (unit lp_whichUnit, fixed lp_blendTime);
void j_SetUnitVertexColor (unit lp_whichUnit, int lp_red, int lp_green, int lp_blue, int lp_alpha);
void j_QueueUnitAnimation (unit lp_whichUnit, string lp_whichAnimation);
void j_SetUnitAnimation (unit lp_whichUnit, string lp_whichAnimation);
void j_SetUnitAnimationByIndex (unit lp_whichUnit, int lp_whichAnimation);
void j_SetUnitAnimationWithRarity (unit lp_whichUnit, string lp_whichAnimation, int lp_rarity);
void j_AddUnitAnimationProperties (unit lp_whichUnit, string lp_animProperties, bool lp_add);
void j_SetUnitLookAt (unit lp_whichUnit, string lp_whichBone, unit lp_lookAtTarget, fixed lp_offsetX, fixed lp_offsetY, fixed lp_offsetZ);
void j_ResetUnitLookAt (unit lp_whichUnit);
void j_SetUnitRescuable (unit lp_whichUnit, int lp_byWhichPlayer, bool lp_flag);
void j_SetUnitRescueRange (unit lp_whichUnit, fixed lp_range);
void j_SetHeroStr (unit lp_whichHero, int lp_newStr, bool lp_permanent);
void j_SetHeroAgi (unit lp_whichHero, int lp_newAgi, bool lp_permanent);
void j_SetHeroInt (unit lp_whichHero, int lp_newInt, bool lp_permanent);
int j_GetHeroStr (unit lp_whichHero, bool lp_includeBonuses);
int j_GetHeroAgi (unit lp_whichHero, bool lp_includeBonuses);
int j_GetHeroInt (unit lp_whichHero, bool lp_includeBonuses);
bool j_UnitStripHeroLevel (unit lp_whichHero, int lp_howManyLevels);
int j_GetHeroXP (unit lp_whichHero);
void j_SetHeroXP (unit lp_whichHero, int lp_newXpVal, bool lp_showEyeCandy);
int j_GetHeroSkillPoints (unit lp_whichHero);
bool j_UnitModifySkillPoints (unit lp_whichHero, int lp_skillPointDelta);
void j_AddHeroXP (unit lp_whichHero, int lp_xpToAdd, bool lp_showEyeCandy);
void j_SetHeroLevel (unit lp_whichHero, int lp_level, bool lp_showEyeCandy);
int j_GetHeroLevel (unit lp_whichHero);
int j_GetUnitLevel (unit lp_whichUnit);
string j_GetHeroProperName (unit lp_whichHero);
void j_SuspendHeroXP (unit lp_whichHero, bool lp_flag);
bool j_IsSuspendedXP (unit lp_whichHero);
void j_SelectHeroSkill (unit lp_whichHero, int lp_abilcode);
int j_GetUnitAbilityLevel (unit lp_whichUnit, int lp_abilcode);
int j_DecUnitAbilityLevel (unit lp_whichUnit, int lp_abilcode);
int j_IncUnitAbilityLevel (unit lp_whichUnit, int lp_abilcode);
int j_SetUnitAbilityLevel (unit lp_whichUnit, int lp_abilcode, int lp_level);
bool j_ReviveHero (unit lp_whichHero, fixed lp_x, fixed lp_y, bool lp_doEyecandy);
bool j_ReviveHeroLoc (unit lp_whichHero, point lp_loc, bool lp_doEyecandy);
void j_SetUnitExploded (unit lp_whichUnit, bool lp_exploded);
void j_SetUnitInvulnerable (unit lp_whichUnit, bool lp_flag);
void j_PauseUnit (unit lp_whichUnit, bool lp_flag);
void j_ClearSelection ();
void j_SelectUnit (unit lp_whichUnit, bool lp_flag);
int j_GetUnitPointValue (unit lp_whichUnit);
int j_GetUnitPointValueByType (int lp_unitType);
bool j_UnitAddItem (unit lp_whichUnit, unit lp_whichItem);
unit j_UnitAddItemById (unit lp_whichUnit, int lp_itemId);
bool j_UnitAddItemToSlotById (unit lp_whichUnit, int lp_itemId, int lp_itemSlot);
void j_UnitRemoveItem (unit lp_whichUnit, unit lp_whichItem);
unit j_UnitRemoveItemFromSlot (unit lp_whichUnit, int lp_itemSlot);
bool j_UnitHasItem (unit lp_whichUnit, unit lp_whichItem);
unit j_UnitItemInSlot (unit lp_whichUnit, int lp_itemSlot);
int j_UnitInventorySize (unit lp_whichUnit);
bool j_UnitDropItemPoint (unit lp_whichUnit, unit lp_whichItem, fixed lp_x, fixed lp_y);
bool j_UnitDropItemSlot (unit lp_whichUnit, unit lp_whichItem, int lp_slot);
bool j_UnitDropItemTarget (unit lp_whichUnit, unit lp_whichItem, unit lp_target);
bool j_UnitUseItem (unit lp_whichUnit, unit lp_whichItem);
bool j_UnitUseItemPoint (unit lp_whichUnit, unit lp_whichItem, fixed lp_x, fixed lp_y);
bool j_UnitUseItemTarget (unit lp_whichUnit, unit lp_whichItem, unit lp_target);
fixed j_GetUnitFacing (unit lp_whichUnit);
fixed j_GetUnitMoveSpeed (unit lp_whichUnit);
fixed j_GetUnitDefaultMoveSpeed (unit lp_whichUnit);
fixed j_GetUnitState (unit lp_whichUnit, int lp_whichUnitState);
int j_GetOwningPlayer (unit lp_whichUnit);
int j_GetUnitTypeId (unit lp_whichUnit);
int j_GetUnitRace (unit lp_whichUnit);
string j_GetUnitName (unit lp_whichUnit);
int j_GetUnitFoodUsed (unit lp_whichUnit);
int j_GetUnitFoodMade (unit lp_whichUnit);
int j_GetFoodMade (int lp_unitId);
int j_GetFoodUsed (int lp_unitId);
void j_SetUnitUseFood (unit lp_whichUnit, bool lp_useFood);
point j_GetUnitRallyPoint (unit lp_whichUnit);
unit j_GetUnitRallyUnit (unit lp_whichUnit);
unit j_GetUnitRallyDestructable (unit lp_whichUnit);
bool j_IsUnitInGroup (unit lp_whichUnit, unitgroup lp_whichGroup);
bool j_IsUnitInForce (unit lp_whichUnit, playergroup lp_whichForce);
bool j_IsUnitOwnedByPlayer (unit lp_whichUnit, int lp_whichPlayer);
bool j_IsUnitAlly (unit lp_whichUnit, int lp_whichPlayer);
bool j_IsUnitEnemy (unit lp_whichUnit, int lp_whichPlayer);
bool j_IsUnitVisible (unit lp_whichUnit, int lp_whichPlayer);
bool j_IsUnitDetected (unit lp_whichUnit, int lp_whichPlayer);
bool j_IsUnitInvisible (unit lp_whichUnit, int lp_whichPlayer);
bool j_IsUnitFogged (unit lp_whichUnit, int lp_whichPlayer);
bool j_IsUnitMasked (unit lp_whichUnit, int lp_whichPlayer);
bool j_IsUnitSelected (unit lp_whichUnit, int lp_whichPlayer);
bool j_IsUnitRace (unit lp_whichUnit, int lp_whichRace);
bool j_IsUnitType (unit lp_whichUnit, int lp_whichUnitType);
bool j_IsUnit (unit lp_whichUnit, unit lp_whichSpecifiedUnit);
bool j_IsUnitInRange (unit lp_whichUnit, unit lp_otherUnit, fixed lp_distance);
bool j_IsUnitInRangeXY (unit lp_whichUnit, fixed lp_x, fixed lp_y, fixed lp_distance);
bool j_IsUnitInRangeLoc (unit lp_whichUnit, point lp_whichLocation, fixed lp_distance);
bool j_IsUnitHidden (unit lp_whichUnit);
bool j_IsUnitIllusion (unit lp_whichUnit);
bool j_IsUnitInTransport (unit lp_whichUnit, unit lp_whichTransport);
bool j_IsUnitLoaded (unit lp_whichUnit);
bool j_IsHeroUnitId (int lp_unitId);
bool j_IsUnitIdType (int lp_unitId, int lp_whichUnitType);
void j_UnitShareVision (unit lp_whichUnit, int lp_whichPlayer, bool lp_share);
void j_UnitSuspendDecay (unit lp_whichUnit, bool lp_suspend);
bool j_UnitAddType (unit lp_whichUnit, int lp_whichUnitType);
bool j_UnitRemoveType (unit lp_whichUnit, int lp_whichUnitType);
bool j_UnitAddAbility (unit lp_whichUnit, int lp_abilityId);
bool j_UnitRemoveAbility (unit lp_whichUnit, int lp_abilityId);
bool j_UnitMakeAbilityPermanent (unit lp_whichUnit, bool lp_permanent, int lp_abilityId);
void j_UnitRemoveBuffs (unit lp_whichUnit, bool lp_removePositive, bool lp_removeNegative);
void j_UnitRemoveBuffsEx (unit lp_whichUnit, bool lp_removePositive, bool lp_removeNegative, bool lp_magic, bool lp_physical, bool lp_timedLife, bool lp_aura, bool lp_autoDispel);
bool j_UnitHasBuffsEx (unit lp_whichUnit, bool lp_removePositive, bool lp_removeNegative, bool lp_magic, bool lp_physical, bool lp_timedLife, bool lp_aura, bool lp_autoDispel);
int j_UnitCountBuffsEx (unit lp_whichUnit, bool lp_removePositive, bool lp_removeNegative, bool lp_magic, bool lp_physical, bool lp_timedLife, bool lp_aura, bool lp_autoDispel);
void j_UnitAddSleep (unit lp_whichUnit, bool lp_add);
bool j_UnitCanSleep (unit lp_whichUnit);
void j_UnitAddSleepPerm (unit lp_whichUnit, bool lp_add);
bool j_UnitCanSleepPerm (unit lp_whichUnit);
bool j_UnitIsSleeping (unit lp_whichUnit);
void j_UnitWakeUp (unit lp_whichUnit);
void j_UnitApplyTimedLife (unit lp_whichUnit, int lp_buffId, fixed lp_duration);
bool j_UnitIgnoreAlarm (unit lp_whichUnit, bool lp_flag);
bool j_UnitIgnoreAlarmToggled (unit lp_whichUnit);
void j_UnitResetCooldown (unit lp_whichUnit);
void j_UnitSetConstructionProgress (unit lp_whichUnit, int lp_constructionPercentage);
void j_UnitSetUpgradeProgress (unit lp_whichUnit, int lp_upgradePercentage);
void j_UnitPauseTimedLife (unit lp_whichUnit, bool lp_flag);
void j_UnitSetUsesAltIcon (unit lp_whichUnit, bool lp_flag);
bool j_UnitDamagePoint (unit lp_whichUnit, fixed lp_delay, fixed lp_radius, fixed lp_x, fixed lp_y, fixed lp_amount, bool lp_attack, bool lp_ranged, int lp_attackType, int lp_damageType, int lp_weaponType);
bool j_UnitDamageTarget (unit lp_whichUnit, unit lp_target, fixed lp_amount, bool lp_attack, bool lp_ranged, int lp_attackType, int lp_damageType, int lp_weaponType);
bool j_IssueImmediateOrder (unit lp_whichUnit, string lp_order);
bool j_IssueImmediateOrderById (unit lp_whichUnit, int lp_order);
bool j_IssueBuildOrder (unit lp_whichPeon, string lp_unitToBuild, fixed lp_x, fixed lp_y);
bool j_IssueBuildOrderById (unit lp_whichPeon, int lp_unitId, fixed lp_x, fixed lp_y);
bool j_IssueNeutralImmediateOrder (int lp_forWhichPlayer, unit lp_neutralStructure, string lp_unitToBuild);
bool j_IssueNeutralImmediateOrderById (int lp_forWhichPlayer, unit lp_neutralStructure, int lp_unitId);
bool j_IssueNeutralPointOrder (int lp_forWhichPlayer, unit lp_neutralStructure, string lp_unitToBuild, fixed lp_x, fixed lp_y);
bool j_IssueNeutralPointOrderById (int lp_forWhichPlayer, unit lp_neutralStructure, int lp_unitId, fixed lp_x, fixed lp_y);
bool j_IssueNeutralTargetOrder (int lp_forWhichPlayer, unit lp_neutralStructure, string lp_unitToBuild, unit lp_target);
bool j_IssueNeutralTargetOrderById (int lp_forWhichPlayer, unit lp_neutralStructure, int lp_unitId, unit lp_target);
int j_GetUnitCurrentOrder (unit lp_whichUnit);
void j_SetResourceAmount (unit lp_whichUnit, int lp_amount);
void j_AddResourceAmount (unit lp_whichUnit, int lp_amount);
int j_GetResourceAmount (unit lp_whichUnit);
fixed j_WaygateGetDestinationX (unit lp_waygate);
fixed j_WaygateGetDestinationY (unit lp_waygate);
void j_WaygateSetDestination (unit lp_waygate, fixed lp_x, fixed lp_y);
void j_WaygateActivate (unit lp_waygate, bool lp_activate);
bool j_WaygateIsActive (unit lp_waygate);
void j_AddItemToAllStock (int lp_itemId, int lp_currentStock, int lp_stockMax);
void j_AddItemToStock (unit lp_whichUnit, int lp_itemId, int lp_currentStock, int lp_stockMax);
void j_AddUnitToAllStock (int lp_unitId, int lp_currentStock, int lp_stockMax);
void j_AddUnitToStock (unit lp_whichUnit, int lp_unitId, int lp_currentStock, int lp_stockMax);
void j_RemoveItemFromAllStock (int lp_itemId);
void j_RemoveItemFromStock (unit lp_whichUnit, int lp_itemId);
void j_RemoveUnitFromAllStock (int lp_unitId);
void j_RemoveUnitFromStock (unit lp_whichUnit, int lp_unitId);
void j_SetAllItemTypeSlots (int lp_slots);
void j_SetAllUnitTypeSlots (int lp_slots);
void j_SetItemTypeSlots (unit lp_whichUnit, int lp_slots);
void j_SetUnitTypeSlots (unit lp_whichUnit, int lp_slots);
int j_GetUnitUserData (unit lp_whichUnit);
void j_SetUnitUserData (unit lp_whichUnit, int lp_data);
int j_Player (int lp_number);
bool j_IsPlayerAlly (int lp_whichPlayer, int lp_otherPlayer);
bool j_IsPlayerEnemy (int lp_whichPlayer, int lp_otherPlayer);
bool j_IsPlayerInForce (int lp_whichPlayer, playergroup lp_whichForce);
bool j_IsPlayerObserver (int lp_whichPlayer);
bool j_IsVisibleToPlayer (fixed lp_x, fixed lp_y, int lp_whichPlayer);
bool j_IsLocationVisibleToPlayer (point lp_whichLocation, int lp_whichPlayer);
bool j_IsFoggedToPlayer (fixed lp_x, fixed lp_y, int lp_whichPlayer);
bool j_IsLocationFoggedToPlayer (point lp_whichLocation, int lp_whichPlayer);
bool j_IsMaskedToPlayer (fixed lp_x, fixed lp_y, int lp_whichPlayer);
bool j_IsLocationMaskedToPlayer (point lp_whichLocation, int lp_whichPlayer);
int j_GetPlayerRace (int lp_whichPlayer);
int j_GetPlayerId (int lp_whichPlayer);
int j_GetPlayerUnitCount (int lp_whichPlayer, bool lp_includeIncomplete);
int j_GetPlayerTypedUnitCount (int lp_whichPlayer, string lp_unitName, bool lp_includeIncomplete, bool lp_includeUpgrades);
int j_GetPlayerStructureCount (int lp_whichPlayer, bool lp_includeIncomplete);
int j_GetPlayerState (int lp_whichPlayer, int lp_whichPlayerState);
int j_GetPlayerScore (int lp_whichPlayer, int lp_whichPlayerScore);
bool j_GetPlayerAlliance (int lp_sourcePlayer, int lp_otherPlayer, int lp_whichAllianceSetting);
fixed j_GetPlayerHandicap (int lp_whichPlayer);
fixed j_GetPlayerHandicapXP (int lp_whichPlayer);
void j_SetPlayerHandicap (int lp_whichPlayer, fixed lp_handicap);
void j_SetPlayerHandicapXP (int lp_whichPlayer, fixed lp_handicap);
void j_SetPlayerTechMaxAllowed (int lp_whichPlayer, int lp_techid, int lp_maximum);
int j_GetPlayerTechMaxAllowed (int lp_whichPlayer, int lp_techid);
void j_AddPlayerTechResearched (int lp_whichPlayer, int lp_techid, int lp_levels);
void j_SetPlayerTechResearched (int lp_whichPlayer, int lp_techid, int lp_setToLevel);
bool j_GetPlayerTechResearched (int lp_whichPlayer, int lp_techid, bool lp_specificonly);
int j_GetPlayerTechCount (int lp_whichPlayer, int lp_techid, bool lp_specificonly);
void j_SetPlayerUnitsOwner (int lp_whichPlayer, int lp_newOwner);
void j_CripplePlayer (int lp_whichPlayer, playergroup lp_toWhichPlayers, bool lp_flag);
void j_SetPlayerAbilityAvailable (int lp_whichPlayer, int lp_abilid, bool lp_avail);
void j_SetPlayerState (int lp_whichPlayer, int lp_whichPlayerState, int lp_value);
void j_RemovePlayer (int lp_whichPlayer, int lp_gameResult);
void j_CachePlayerHeroData (int lp_whichPlayer);
void j_SetFogStateRect (int lp_forWhichPlayer, int lp_whichState, region lp_where, bool lp_useSharedVision);
void j_SetFogStateRadius (int lp_forWhichPlayer, int lp_whichState, fixed lp_centerx, fixed lp_centerY, fixed lp_radius, bool lp_useSharedVision);
void j_SetFogStateRadiusLoc (int lp_forWhichPlayer, int lp_whichState, point lp_center, fixed lp_radius, bool lp_useSharedVision);
void j_FogMaskEnable (bool lp_enable);
bool j_IsFogMaskEnabled ();
void j_FogEnable (bool lp_enable);
bool j_IsFogEnabled ();
revealer j_CreateFogModifierRect (int lp_forWhichPlayer, int lp_whichState, region lp_where, bool lp_useSharedVision, bool lp_afterUnits);
revealer j_CreateFogModifierRadius (int lp_forWhichPlayer, int lp_whichState, fixed lp_centerx, fixed lp_centerY, fixed lp_radius, bool lp_useSharedVision, bool lp_afterUnits);
revealer j_CreateFogModifierRadiusLoc (int lp_forWhichPlayer, int lp_whichState, point lp_center, fixed lp_radius, bool lp_useSharedVision, bool lp_afterUnits);
void j_DestroyFogModifier (revealer lp_whichFogModifier);
void j_FogModifierStart (revealer lp_whichFogModifier);
void j_FogModifierStop (revealer lp_whichFogModifier);
int j_VersionGet ();
bool j_VersionCompatible (int lp_whichVersion);
bool j_VersionSupported (int lp_whichVersion);
void j_EndGame (bool lp_doScoreScreen);
void j_ChangeLevel (string lp_newLevel, bool lp_doScoreScreen);
void j_RestartGame (bool lp_doScoreScreen);
void j_ReloadGame ();
void j_SetCampaignMenuRace (int lp_r);
void j_SetCampaignMenuRaceEx (int lp_campaignIndex);
void j_ForceCampaignSelectScreen ();
void j_LoadGame (string lp_saveFileName, bool lp_doScoreScreen);
void j_SaveGame (string lp_saveFileName);
bool j_RenameSaveDirectory (string lp_sourceDirName, string lp_destDirName);
bool j_RemoveSaveDirectory (string lp_sourceDirName);
bool j_CopySaveGame (string lp_sourceSaveName, string lp_destSaveName);
bool j_SaveGameExists (string lp_saveName);
void j_SyncSelections ();
void j_SetFloatGameState (int lp_whichFloatGameState, fixed lp_value);
fixed j_GetFloatGameState (int lp_whichFloatGameState);
void j_SetIntegerGameState (int lp_whichIntegerGameState, int lp_value);
int j_GetIntegerGameState (int lp_whichIntegerGameState);
void j_SetTutorialCleared (bool lp_cleared);
void j_SetMissionAvailable (int lp_campaignNumber, int lp_missionNumber, bool lp_available);
void j_SetCampaignAvailable (int lp_campaignNumber, bool lp_available);
void j_SetOpCinematicAvailable (int lp_campaignNumber, bool lp_available);
void j_SetEdCinematicAvailable (int lp_campaignNumber, bool lp_available);
void j_SetCustomCampaignButtonVisible (int lp_whichButton, bool lp_visible);
bool j_GetCustomCampaignButtonVisible (int lp_whichButton);
void j_DoNotSaveReplay ();
int j_DialogCreate ();
void j_DialogDestroy (int lp_whichDialog);
void j_DialogClear (int lp_whichDialog);
void j_DialogSetMessage (int lp_whichDialog, string lp_messageText);
int j_DialogAddButton (int lp_whichDialog, string lp_buttonText, int lp_hotkey);
int j_DialogAddQuitButton (int lp_whichDialog, bool lp_doScoreScreen, string lp_buttonText, int lp_hotkey);
void j_DialogDisplay (int lp_whichPlayer, int lp_whichDialog, bool lp_flag);
bool j_ReloadGameCachesFromDisk ();
bank j_InitGameCache (string lp_campaignFile);
bool j_SaveGameCache (bank lp_whichCache);
void j_StoreInteger (bank lp_cache, string lp_missionKey, string lp_key, int lp_value);
void j_StoreReal (bank lp_cache, string lp_missionKey, string lp_key, fixed lp_value);
void j_StoreBoolean (bank lp_cache, string lp_missionKey, string lp_key, bool lp_value);
bool j_StoreUnit (bank lp_cache, string lp_missionKey, string lp_key, unit lp_whichUnit);
bool j_StoreString (bank lp_cache, string lp_missionKey, string lp_key, string lp_value);
void j_SyncStoredInteger (bank lp_cache, string lp_missionKey, string lp_key);
void j_SyncStoredReal (bank lp_cache, string lp_missionKey, string lp_key);
void j_SyncStoredBoolean (bank lp_cache, string lp_missionKey, string lp_key);
void j_SyncStoredUnit (bank lp_cache, string lp_missionKey, string lp_key);
void j_SyncStoredString (bank lp_cache, string lp_missionKey, string lp_key);
bool j_HaveStoredInteger (bank lp_cache, string lp_missionKey, string lp_key);
bool j_HaveStoredReal (bank lp_cache, string lp_missionKey, string lp_key);
bool j_HaveStoredBoolean (bank lp_cache, string lp_missionKey, string lp_key);
bool j_HaveStoredUnit (bank lp_cache, string lp_missionKey, string lp_key);
bool j_HaveStoredString (bank lp_cache, string lp_missionKey, string lp_key);
void j_FlushGameCache (bank lp_cache);
void j_FlushStoredMission (bank lp_cache, string lp_missionKey);
void j_FlushStoredInteger (bank lp_cache, string lp_missionKey, string lp_key);
void j_FlushStoredReal (bank lp_cache, string lp_missionKey, string lp_key);
void j_FlushStoredBoolean (bank lp_cache, string lp_missionKey, string lp_key);
void j_FlushStoredUnit (bank lp_cache, string lp_missionKey, string lp_key);
void j_FlushStoredString (bank lp_cache, string lp_missionKey, string lp_key);
int j_GetStoredInteger (bank lp_cache, string lp_missionKey, string lp_key);
fixed j_GetStoredReal (bank lp_cache, string lp_missionKey, string lp_key);
bool j_GetStoredBoolean (bank lp_cache, string lp_missionKey, string lp_key);
string j_GetStoredString (bank lp_cache, string lp_missionKey, string lp_key);
unit j_RestoreUnit (bank lp_cache, string lp_missionKey, string lp_key, int lp_forWhichPlayer, fixed lp_x, fixed lp_y, fixed lp_facing);
int j_InitHashtable ();
void j_SaveInteger (int lp_table, int lp_parentKey, int lp_childKey, int lp_value);
void j_SaveReal (int lp_table, int lp_parentKey, int lp_childKey, fixed lp_value);
void j_SaveBoolean (int lp_table, int lp_parentKey, int lp_childKey, bool lp_value);
bool j_SaveStr (int lp_table, int lp_parentKey, int lp_childKey, string lp_value);
bool j_SavePlayerHandle (int lp_table, int lp_parentKey, int lp_childKey, int lp_whichPlayer);
bool j_SaveWidgetHandle (int lp_table, int lp_parentKey, int lp_childKey, unit lp_whichWidget);
bool j_SaveDestructableHandle (int lp_table, int lp_parentKey, int lp_childKey, unit lp_whichDestructable);
bool j_SaveItemHandle (int lp_table, int lp_parentKey, int lp_childKey, unit lp_whichItem);
bool j_SaveUnitHandle (int lp_table, int lp_parentKey, int lp_childKey, unit lp_whichUnit);
bool j_SaveAbilityHandle (int lp_table, int lp_parentKey, int lp_childKey, string lp_whichAbility);
bool j_SaveTimerHandle (int lp_table, int lp_parentKey, int lp_childKey, timer lp_whichTimer);
bool j_SaveTriggerHandle (int lp_table, int lp_parentKey, int lp_childKey, trigger lp_whichTrigger);
bool j_SaveTriggerConditionHandle (int lp_table, int lp_parentKey, int lp_childKey, string lp_whichTriggercondition);
bool j_SaveTriggerActionHandle (int lp_table, int lp_parentKey, int lp_childKey, string lp_whichTriggeraction);
bool j_SaveTriggerEventHandle (int lp_table, int lp_parentKey, int lp_childKey, int lp_whichEvent);
bool j_SaveForceHandle (int lp_table, int lp_parentKey, int lp_childKey, playergroup lp_whichForce);
bool j_SaveGroupHandle (int lp_table, int lp_parentKey, int lp_childKey, unitgroup lp_whichGroup);
bool j_SaveLocationHandle (int lp_table, int lp_parentKey, int lp_childKey, point lp_whichLocation);
bool j_SaveRectHandle (int lp_table, int lp_parentKey, int lp_childKey, region lp_whichRect);
bool j_SaveBooleanExprHandle (int lp_table, int lp_parentKey, int lp_childKey, string lp_whichBoolexpr);
bool j_SaveSoundHandle (int lp_table, int lp_parentKey, int lp_childKey, sound lp_whichSound);
bool j_SaveEffectHandle (int lp_table, int lp_parentKey, int lp_childKey, actor lp_whichEffect);
bool j_SaveUnitPoolHandle (int lp_table, int lp_parentKey, int lp_childKey, string lp_whichUnitpool);
bool j_SaveItemPoolHandle (int lp_table, int lp_parentKey, int lp_childKey, string lp_whichItempool);
bool j_SaveQuestHandle (int lp_table, int lp_parentKey, int lp_childKey, int lp_whichQuest);
bool j_SaveQuestItemHandle (int lp_table, int lp_parentKey, int lp_childKey, int lp_whichQuestitem);
bool j_SaveDefeatConditionHandle (int lp_table, int lp_parentKey, int lp_childKey, int lp_whichDefeatcondition);
bool j_SaveTimerDialogHandle (int lp_table, int lp_parentKey, int lp_childKey, int lp_whichTimerdialog);
bool j_SaveLeaderboardHandle (int lp_table, int lp_parentKey, int lp_childKey, int lp_whichLeaderboard);
bool j_SaveMultiboardHandle (int lp_table, int lp_parentKey, int lp_childKey, int lp_whichMultiboard);
bool j_SaveMultiboardItemHandle (int lp_table, int lp_parentKey, int lp_childKey, int lp_whichMultiboarditem);
bool j_SaveTrackableHandle (int lp_table, int lp_parentKey, int lp_childKey, unit lp_whichTrackable);
bool j_SaveDialogHandle (int lp_table, int lp_parentKey, int lp_childKey, int lp_whichDialog);
bool j_SaveButtonHandle (int lp_table, int lp_parentKey, int lp_childKey, int lp_whichButton);
bool j_SaveTextTagHandle (int lp_table, int lp_parentKey, int lp_childKey, int lp_whichTexttag);
bool j_SaveLightningHandle (int lp_table, int lp_parentKey, int lp_childKey, actor lp_whichLightning);
bool j_SaveImageHandle (int lp_table, int lp_parentKey, int lp_childKey, actor lp_whichImage);
bool j_SaveUbersplatHandle (int lp_table, int lp_parentKey, int lp_childKey, actor lp_whichUbersplat);
bool j_SaveRegionHandle (int lp_table, int lp_parentKey, int lp_childKey, region lp_whichRegion);
bool j_SaveFogStateHandle (int lp_table, int lp_parentKey, int lp_childKey, int lp_whichFogState);
bool j_SaveFogModifierHandle (int lp_table, int lp_parentKey, int lp_childKey, revealer lp_whichFogModifier);
bool j_SaveAgentHandle (int lp_table, int lp_parentKey, int lp_childKey, int lp_whichAgent);
bool j_SaveHashtableHandle (int lp_table, int lp_parentKey, int lp_childKey, int lp_whichHashtable);
int j_LoadInteger (int lp_table, int lp_parentKey, int lp_childKey);
fixed j_LoadReal (int lp_table, int lp_parentKey, int lp_childKey);
bool j_LoadBoolean (int lp_table, int lp_parentKey, int lp_childKey);
string j_LoadStr (int lp_table, int lp_parentKey, int lp_childKey);
int j_LoadPlayerHandle (int lp_table, int lp_parentKey, int lp_childKey);
unit j_LoadWidgetHandle (int lp_table, int lp_parentKey, int lp_childKey);
unit j_LoadDestructableHandle (int lp_table, int lp_parentKey, int lp_childKey);
unit j_LoadItemHandle (int lp_table, int lp_parentKey, int lp_childKey);
unit j_LoadUnitHandle (int lp_table, int lp_parentKey, int lp_childKey);
string j_LoadAbilityHandle (int lp_table, int lp_parentKey, int lp_childKey);
timer j_LoadTimerHandle (int lp_table, int lp_parentKey, int lp_childKey);
trigger j_LoadTriggerHandle (int lp_table, int lp_parentKey, int lp_childKey);
string j_LoadTriggerConditionHandle (int lp_table, int lp_parentKey, int lp_childKey);
string j_LoadTriggerActionHandle (int lp_table, int lp_parentKey, int lp_childKey);
void j_LoadTriggerEventHandle (trigger t, int lp_table, int lp_parentKey, int lp_childKey);
playergroup j_LoadForceHandle (int lp_table, int lp_parentKey, int lp_childKey);
unitgroup j_LoadGroupHandle (int lp_table, int lp_parentKey, int lp_childKey);
point j_LoadLocationHandle (int lp_table, int lp_parentKey, int lp_childKey);
region j_LoadRectHandle (int lp_table, int lp_parentKey, int lp_childKey);
string j_LoadBooleanExprHandle (int lp_table, int lp_parentKey, int lp_childKey);
sound j_LoadSoundHandle (int lp_table, int lp_parentKey, int lp_childKey);
actor j_LoadEffectHandle (int lp_table, int lp_parentKey, int lp_childKey);
string j_LoadUnitPoolHandle (int lp_table, int lp_parentKey, int lp_childKey);
string j_LoadItemPoolHandle (int lp_table, int lp_parentKey, int lp_childKey);
int j_LoadQuestHandle (int lp_table, int lp_parentKey, int lp_childKey);
int j_LoadQuestItemHandle (int lp_table, int lp_parentKey, int lp_childKey);
int j_LoadDefeatConditionHandle (int lp_table, int lp_parentKey, int lp_childKey);
int j_LoadTimerDialogHandle (int lp_table, int lp_parentKey, int lp_childKey);
int j_LoadLeaderboardHandle (int lp_table, int lp_parentKey, int lp_childKey);
int j_LoadMultiboardHandle (int lp_table, int lp_parentKey, int lp_childKey);
int j_LoadMultiboardItemHandle (int lp_table, int lp_parentKey, int lp_childKey);
unit j_LoadTrackableHandle (int lp_table, int lp_parentKey, int lp_childKey);
int j_LoadDialogHandle (int lp_table, int lp_parentKey, int lp_childKey);
int j_LoadButtonHandle (int lp_table, int lp_parentKey, int lp_childKey);
int j_LoadTextTagHandle (int lp_table, int lp_parentKey, int lp_childKey);
actor j_LoadLightningHandle (int lp_table, int lp_parentKey, int lp_childKey);
actor j_LoadImageHandle (int lp_table, int lp_parentKey, int lp_childKey);
actor j_LoadUbersplatHandle (int lp_table, int lp_parentKey, int lp_childKey);
region j_LoadRegionHandle (int lp_table, int lp_parentKey, int lp_childKey);
int j_LoadFogStateHandle (int lp_table, int lp_parentKey, int lp_childKey);
revealer j_LoadFogModifierHandle (int lp_table, int lp_parentKey, int lp_childKey);
int j_LoadHashtableHandle (int lp_table, int lp_parentKey, int lp_childKey);
bool j_HaveSavedInteger (int lp_table, int lp_parentKey, int lp_childKey);
bool j_HaveSavedReal (int lp_table, int lp_parentKey, int lp_childKey);
bool j_HaveSavedBoolean (int lp_table, int lp_parentKey, int lp_childKey);
bool j_HaveSavedString (int lp_table, int lp_parentKey, int lp_childKey);
bool j_HaveSavedHandle (int lp_table, int lp_parentKey, int lp_childKey);
void j_RemoveSavedInteger (int lp_table, int lp_parentKey, int lp_childKey);
void j_RemoveSavedReal (int lp_table, int lp_parentKey, int lp_childKey);
void j_RemoveSavedBoolean (int lp_table, int lp_parentKey, int lp_childKey);
void j_RemoveSavedString (int lp_table, int lp_parentKey, int lp_childKey);
void j_RemoveSavedHandle (int lp_table, int lp_parentKey, int lp_childKey);
void j_FlushParentHashtable (int lp_table);
void j_FlushChildHashtable (int lp_table, int lp_parentKey);
string j_CreateUnitPool ();
void j_DestroyUnitPool (string lp_whichPool);
void j_UnitPoolAddUnitType (string lp_whichPool, int lp_unitId, fixed lp_weight);
void j_UnitPoolRemoveUnitType (string lp_whichPool, int lp_unitId);
unit j_PlaceRandomUnit (string lp_whichPool, int lp_forWhichPlayer, fixed lp_x, fixed lp_y, fixed lp_facing);
string j_CreateItemPool ();
void j_DestroyItemPool (string lp_whichItemPool);
void j_ItemPoolAddItemType (string lp_whichItemPool, int lp_itemId, fixed lp_weight);
void j_ItemPoolRemoveItemType (string lp_whichItemPool, int lp_itemId);
unit j_PlaceRandomItem (string lp_whichItemPool, fixed lp_x, fixed lp_y);
int j_ChooseRandomCreep (int lp_level);
int j_ChooseRandomNPBuilding ();
int j_ChooseRandomItem (int lp_level);
int j_ChooseRandomItemEx (int lp_whichType, int lp_level);
void j_SetRandomSeed (int lp_seed);
void j_SetTerrainFog (fixed lp_a, fixed lp_b, fixed lp_c, fixed lp_d, fixed lp_e);
void j_ResetTerrainFog ();
void j_SetUnitFog (fixed lp_a, fixed lp_b, fixed lp_c, fixed lp_d, fixed lp_e);
void j_SetTerrainFogEx (int lp_style, fixed lp_zstart, fixed lp_zend, fixed lp_density, fixed lp_red, fixed lp_green, fixed lp_blue);
void j_DisplayTextToPlayer (int lp_toPlayer, fixed lp_x, fixed lp_y, string lp_message);
void j_DisplayTimedTextToPlayer (int lp_toPlayer, fixed lp_x, fixed lp_y, fixed lp_duration, string lp_message);
void j_DisplayTimedTextFromPlayer (int lp_toPlayer, fixed lp_x, fixed lp_y, fixed lp_duration, string lp_message);
void j_ClearTextMessages ();
void j_SetDayNightModels (string lp_terrainDNCFile, string lp_unitDNCFile);
void j_SetSkyModel (string lp_skyModelFile);
void j_EnableUserControl (bool lp_b);
void j_EnableUserUI (bool lp_b);
void j_SuspendTimeOfDay (bool lp_b);
void j_SetTimeOfDayScale (fixed lp_r);
fixed j_GetTimeOfDayScale ();
void j_ShowInterface (bool lp_flag, fixed lp_fadeDuration);
void j_PauseGame (bool lp_flag);
void j_UnitAddIndicator (unit lp_whichUnit, int lp_red, int lp_green, int lp_blue, int lp_alpha);
void j_AddIndicator (unit lp_whichWidget, int lp_red, int lp_green, int lp_blue, int lp_alpha);
void j_PingMinimap (fixed lp_x, fixed lp_y, fixed lp_duration);
void j_PingMinimapEx (fixed lp_x, fixed lp_y, fixed lp_duration, int lp_red, int lp_green, int lp_blue, bool lp_extraEffects);
void j_EnableOcclusion (bool lp_flag);
void j_SetIntroShotText (string lp_introText);
void j_SetIntroShotModel (string lp_introModelPath);
void j_EnableWorldFogBoundary (bool lp_b);
void j_PlayModelCinematic (string lp_modelName);
void j_PlayCinematic (string lp_movieName);
void j_ForceUIKey (string lp_key);
void j_ForceUICancel ();
void j_DisplayLoadDialog ();
void j_SetAltMinimapIcon (string lp_iconPath);
void j_DisableRestartMission (bool lp_flag);
int j_CreateTextTag ();
void j_DestroyTextTag (int lp_t);
void j_SetTextTagText (int lp_t, string lp_s, fixed lp_height);
void j_SetTextTagPos (int lp_t, fixed lp_x, fixed lp_y, fixed lp_heightOffset);
void j_SetTextTagPosUnit (int lp_t, unit lp_whichUnit, fixed lp_heightOffset);
void j_SetTextTagColor (int lp_t, int lp_red, int lp_green, int lp_blue, int lp_alpha);
void j_SetTextTagVelocity (int lp_t, fixed lp_xvel, fixed lp_yvel);
void j_SetTextTagVisibility (int lp_t, bool lp_flag);
void j_SetTextTagSuspended (int lp_t, bool lp_flag);
void j_SetTextTagPermanent (int lp_t, bool lp_flag);
void j_SetTextTagAge (int lp_t, fixed lp_age);
void j_SetTextTagLifespan (int lp_t, fixed lp_lifespan);
void j_SetTextTagFadepoint (int lp_t, fixed lp_fadepoint);
void j_SetReservedLocalHeroButtons (int lp_reserved);
int j_GetAllyColorFilterState ();
void j_SetAllyColorFilterState (int lp_state);
bool j_GetCreepCampFilterState ();
void j_SetCreepCampFilterState (bool lp_state);
void j_EnableMinimapFilterButtons (bool lp_enableAlly, bool lp_enableCreep);
void j_EnableDragSelect (bool lp_state, bool lp_ui);
void j_EnablePreSelect (bool lp_state, bool lp_ui);
void j_EnableSelect (bool lp_state, bool lp_ui);
unit j_CreateTrackable (string lp_trackableModelPath, fixed lp_x, fixed lp_y, fixed lp_facing);
int j_CreateQuest ();
void j_DestroyQuest (int lp_whichQuest);
void j_QuestSetTitle (int lp_whichQuest, string lp_title);
void j_QuestSetDescription (int lp_whichQuest, string lp_description);
void j_QuestSetIconPath (int lp_whichQuest, string lp_iconPath);
void j_QuestSetRequired (int lp_whichQuest, bool lp_required);
void j_QuestSetCompleted (int lp_whichQuest, bool lp_completed);
void j_QuestSetDiscovered (int lp_whichQuest, bool lp_discovered);
void j_QuestSetFailed (int lp_whichQuest, bool lp_failed);
void j_QuestSetEnabled (int lp_whichQuest, bool lp_enabled);
bool j_IsQuestRequired (int lp_whichQuest);
bool j_IsQuestCompleted (int lp_whichQuest);
bool j_IsQuestDiscovered (int lp_whichQuest);
bool j_IsQuestFailed (int lp_whichQuest);
bool j_IsQuestEnabled (int lp_whichQuest);
int j_QuestCreateItem (int lp_whichQuest);
void j_QuestItemSetDescription (int lp_whichQuestItem, string lp_description);
void j_QuestItemSetCompleted (int lp_whichQuestItem, bool lp_completed);
bool j_IsQuestItemCompleted (int lp_whichQuestItem);
int j_CreateDefeatCondition ();
void j_DestroyDefeatCondition (int lp_whichCondition);
void j_DefeatConditionSetDescription (int lp_whichCondition, string lp_description);
void j_FlashQuestDialogButton ();
void j_ForceQuestDialogUpdate ();
int j_CreateTimerDialog (timer lp_t);
void j_DestroyTimerDialog (int lp_whichDialog);
void j_TimerDialogSetTitle (int lp_whichDialog, string lp_title);
void j_TimerDialogSetTitleColor (int lp_whichDialog, int lp_red, int lp_green, int lp_blue, int lp_alpha);
void j_TimerDialogSetTimeColor (int lp_whichDialog, int lp_red, int lp_green, int lp_blue, int lp_alpha);
void j_TimerDialogSetSpeed (int lp_whichDialog, fixed lp_speedMultFactor);
void j_TimerDialogDisplay (int lp_whichDialog, bool lp_display);
bool j_IsTimerDialogDisplayed (int lp_whichDialog);
void j_TimerDialogSetRealTimeRemaining (int lp_whichDialog, fixed lp_timeRemaining);
int j_CreateLeaderboard ();
void j_DestroyLeaderboard (int lp_lb);
void j_LeaderboardDisplay (int lp_lb, bool lp_show);
bool j_IsLeaderboardDisplayed (int lp_lb);
int j_LeaderboardGetItemCount (int lp_lb);
void j_LeaderboardSetSizeByItemCount (int lp_lb, int lp_count);
void j_LeaderboardAddItem (int lp_lb, string lp_label, int lp_value, int lp_p);
void j_LeaderboardRemoveItem (int lp_lb, int lp_index);
void j_LeaderboardRemovePlayerItem (int lp_lb, int lp_p);
void j_LeaderboardClear (int lp_lb);
void j_LeaderboardSortItemsByValue (int lp_lb, bool lp_ascending);
void j_LeaderboardSortItemsByPlayer (int lp_lb, bool lp_ascending);
void j_LeaderboardSortItemsByLabel (int lp_lb, bool lp_ascending);
bool j_LeaderboardHasPlayerItem (int lp_lb, int lp_p);
int j_LeaderboardGetPlayerIndex (int lp_lb, int lp_p);
void j_LeaderboardSetLabel (int lp_lb, string lp_label);
string j_LeaderboardGetLabelText (int lp_lb);
void j_PlayerSetLeaderboard (int lp_toPlayer, int lp_lb);
int j_PlayerGetLeaderboard (int lp_toPlayer);
void j_LeaderboardSetLabelColor (int lp_lb, int lp_red, int lp_green, int lp_blue, int lp_alpha);
void j_LeaderboardSetValueColor (int lp_lb, int lp_red, int lp_green, int lp_blue, int lp_alpha);
void j_LeaderboardSetStyle (int lp_lb, bool lp_showLabel, bool lp_showNames, bool lp_showValues, bool lp_showIcons);
void j_LeaderboardSetItemValue (int lp_lb, int lp_whichItem, int lp_val);
void j_LeaderboardSetItemLabel (int lp_lb, int lp_whichItem, string lp_val);
void j_LeaderboardSetItemStyle (int lp_lb, int lp_whichItem, bool lp_showLabel, bool lp_showValue, bool lp_showIcon);
void j_LeaderboardSetItemLabelColor (int lp_lb, int lp_whichItem, int lp_red, int lp_green, int lp_blue, int lp_alpha);
void j_LeaderboardSetItemValueColor (int lp_lb, int lp_whichItem, int lp_red, int lp_green, int lp_blue, int lp_alpha);
int j_CreateMultiboard ();
void j_DestroyMultiboard (int lp_lb);
void j_MultiboardDisplay (int lp_lb, bool lp_show);
bool j_IsMultiboardDisplayed (int lp_lb);
void j_MultiboardMinimize (int lp_lb, bool lp_minimize);
bool j_IsMultiboardMinimized (int lp_lb);
void j_MultiboardClear (int lp_lb);
void j_MultiboardSetTitleText (int lp_lb, string lp_label);
string j_MultiboardGetTitleText (int lp_lb);
void j_MultiboardSetTitleTextColor (int lp_lb, int lp_red, int lp_green, int lp_blue, int lp_alpha);
int j_MultiboardGetRowCount (int lp_lb);
int j_MultiboardGetColumnCount (int lp_lb);
void j_MultiboardSetColumnCount (int lp_lb, int lp_count);
void j_MultiboardSetRowCount (int lp_lb, int lp_count);
void j_MultiboardSetItemsStyle (int lp_lb, bool lp_showValues, bool lp_showIcons);
void j_MultiboardSetItemsValue (int lp_lb, string lp_value);
void j_MultiboardSetItemsValueColor (int lp_lb, int lp_red, int lp_green, int lp_blue, int lp_alpha);
void j_MultiboardSetItemsWidth (int lp_lb, fixed lp_width);
void j_MultiboardSetItemsIcon (int lp_lb, string lp_iconPath);
int j_MultiboardGetItem (int lp_lb, int lp_row, int lp_column);
void j_MultiboardReleaseItem (int lp_mbi);
void j_MultiboardSetItemStyle (int lp_mbi, bool lp_showValue, bool lp_showIcon);
void j_MultiboardSetItemValue (int lp_mbi, string lp_val);
void j_MultiboardSetItemValueColor (int lp_mbi, int lp_red, int lp_green, int lp_blue, int lp_alpha);
void j_MultiboardSetItemWidth (int lp_mbi, fixed lp_width);
void j_MultiboardSetItemIcon (int lp_mbi, string lp_iconFileName);
void j_MultiboardSuppressDisplay (bool lp_flag);
void j_SetCameraPosition (fixed lp_x, fixed lp_y);
void j_SetCameraQuickPosition (fixed lp_x, fixed lp_y);
void j_SetCameraBounds (fixed lp_x1, fixed lp_y1, fixed lp_x2, fixed lp_y2, fixed lp_x3, fixed lp_y3, fixed lp_x4, fixed lp_y4);
void j_StopCamera ();
void j_ResetToGameCamera (fixed lp_duration);
void j_PanCameraTo (fixed lp_x, fixed lp_y);
void j_PanCameraToTimed (fixed lp_x, fixed lp_y, fixed lp_duration);
void j_PanCameraToWithZ (fixed lp_x, fixed lp_y, fixed lp_zOffsetDest);
void j_PanCameraToTimedWithZ (fixed lp_x, fixed lp_y, fixed lp_zOffsetDest, fixed lp_duration);
void j_SetCinematicCamera (string lp_cameraModelFile);
void j_SetCameraRotateMode (fixed lp_x, fixed lp_y, fixed lp_radiansToSweep, fixed lp_duration);
void j_SetCameraField (int lp_whichField, fixed lp_value, fixed lp_duration);
void j_AdjustCameraField (int lp_whichField, fixed lp_offset, fixed lp_duration);
void j_SetCameraTargetController (unit lp_whichUnit, fixed lp_xoffset, fixed lp_yoffset, bool lp_inheritOrientation);
void j_SetCameraOrientController (unit lp_whichUnit, fixed lp_xoffset, fixed lp_yoffset);
camerainfo j_CreateCameraSetup ();
void j_CameraSetupSetField (camerainfo lp_whichSetup, int lp_whichField, fixed lp_value, fixed lp_duration);
fixed j_CameraSetupGetField (camerainfo lp_whichSetup, int lp_whichField);
void j_CameraSetupSetDestPosition (camerainfo lp_whichSetup, fixed lp_x, fixed lp_y, fixed lp_duration);
point j_CameraSetupGetDestPositionLoc (camerainfo lp_whichSetup);
fixed j_CameraSetupGetDestPositionX (camerainfo lp_whichSetup);
fixed j_CameraSetupGetDestPositionY (camerainfo lp_whichSetup);
void j_CameraSetupApply (camerainfo lp_whichSetup, bool lp_doPan, bool lp_panTimed);
void j_CameraSetupApplyWithZ (camerainfo lp_whichSetup, fixed lp_zDestOffset);
void j_CameraSetupApplyForceDuration (camerainfo lp_whichSetup, bool lp_doPan, fixed lp_forceDuration);
void j_CameraSetupApplyForceDurationWithZ (camerainfo lp_whichSetup, fixed lp_zDestOffset, fixed lp_forceDuration);
void j_CameraSetTargetNoise (fixed lp_mag, fixed lp_velocity);
void j_CameraSetSourceNoise (fixed lp_mag, fixed lp_velocity);
void j_CameraSetTargetNoiseEx (fixed lp_mag, fixed lp_velocity, bool lp_vertOnly);
void j_CameraSetSourceNoiseEx (fixed lp_mag, fixed lp_velocity, bool lp_vertOnly);
void j_CameraSetSmoothingFactor (fixed lp_factor);
void j_SetCineFilterTexture (string lp_filename);
void j_SetCineFilterBlendMode (int lp_whichMode);
void j_SetCineFilterTexMapFlags (int lp_whichFlags);
void j_SetCineFilterStartUV (fixed lp_minu, fixed lp_minv, fixed lp_maxu, fixed lp_maxv);
void j_SetCineFilterEndUV (fixed lp_minu, fixed lp_minv, fixed lp_maxu, fixed lp_maxv);
void j_SetCineFilterStartColor (int lp_red, int lp_green, int lp_blue, int lp_alpha);
void j_SetCineFilterEndColor (int lp_red, int lp_green, int lp_blue, int lp_alpha);
void j_SetCineFilterDuration (fixed lp_duration);
void j_DisplayCineFilter (bool lp_flag);
bool j_IsCineFilterDisplayed ();
void j_SetCinematicScene (int lp_portraitUnitId, int lp_color, string lp_speakerTitle, string lp_text, fixed lp_sceneDuration, fixed lp_voiceoverDuration);
void j_EndCinematicScene ();
void j_ForceCinematicSubtitles (bool lp_flag);
fixed j_GetCameraMargin (int lp_whichMargin);
fixed j_GetCameraBoundMinX ();
fixed j_GetCameraBoundMinY ();
fixed j_GetCameraBoundMaxX ();
fixed j_GetCameraBoundMaxY ();
fixed j_GetCameraField (int lp_whichField);
fixed j_GetCameraTargetPositionX ();
fixed j_GetCameraTargetPositionY ();
fixed j_GetCameraTargetPositionZ ();
point j_GetCameraTargetPositionLoc ();
fixed j_GetCameraEyePositionX ();
fixed j_GetCameraEyePositionY ();
fixed j_GetCameraEyePositionZ ();
point j_GetCameraEyePositionLoc ();
void j_NewSoundEnvironment (string lp_environmentName);
sound j_CreateSound (string lp_fileName, bool lp_looping, bool lp_is3D, bool lp_stopwhenoutofrange, int lp_fadeInRate, int lp_fadeOutRate, string lp_eaxSetting);
sound j_CreateSoundFilenameWithLabel (string lp_fileName, bool lp_looping, bool lp_is3D, bool lp_stopwhenoutofrange, int lp_fadeInRate, int lp_fadeOutRate, string lp_SLKEntryName);
sound j_CreateSoundFromLabel (string lp_soundLabel, bool lp_looping, bool lp_is3D, bool lp_stopwhenoutofrange, int lp_fadeInRate, int lp_fadeOutRate);
sound j_CreateMIDISound (string lp_soundLabel, int lp_fadeInRate, int lp_fadeOutRate);
void j_SetSoundParamsFromLabel (sound lp_soundHandle, string lp_soundLabel);
void j_SetSoundDistanceCutoff (sound lp_soundHandle, fixed lp_cutoff);
void j_SetSoundChannel (sound lp_soundHandle, int lp_channel);
void j_SetSoundVolume (sound lp_soundHandle, int lp_volume);
void j_SetSoundPitch (sound lp_soundHandle, fixed lp_pitch);
void j_SetSoundPlayPosition (sound lp_soundHandle, int lp_millisecs);
void j_SetSoundDistances (sound lp_soundHandle, fixed lp_minDist, fixed lp_maxDist);
void j_SetSoundConeAngles (sound lp_soundHandle, fixed lp_inside, fixed lp_outside, int lp_outsideVolume);
void j_SetSoundConeOrientation (sound lp_soundHandle, fixed lp_x, fixed lp_y, fixed lp_z);
void j_SetSoundPosition (sound lp_soundHandle, fixed lp_x, fixed lp_y, fixed lp_z);
void j_SetSoundVelocity (sound lp_soundHandle, fixed lp_x, fixed lp_y, fixed lp_z);
void j_AttachSoundToUnit (sound lp_soundHandle, unit lp_whichUnit);
actor j_AddWeatherEffect (region lp_where, int lp_effectID);
void j_RemoveWeatherEffect (actor lp_whichEffect);
void j_EnableWeatherEffect (actor lp_whichEffect, bool lp_enable);
actor j_TerrainDeformCrater (fixed lp_x, fixed lp_y, fixed lp_radius, fixed lp_depth, int lp_duration, bool lp_permanent);
actor j_TerrainDeformRipple (fixed lp_x, fixed lp_y, fixed lp_radius, fixed lp_depth, int lp_duration, int lp_count, fixed lp_spaceWaves, fixed lp_timeWaves, fixed lp_radiusStartPct, bool lp_limitNeg);
actor j_TerrainDeformWave (fixed lp_x, fixed lp_y, fixed lp_dirX, fixed lp_dirY, fixed lp_distance, fixed lp_speed, fixed lp_radius, fixed lp_depth, int lp_trailTime, int lp_count);
actor j_TerrainDeformRandom (fixed lp_x, fixed lp_y, fixed lp_radius, fixed lp_minDelta, fixed lp_maxDelta, int lp_duration, int lp_updateInterval);
void j_TerrainDeformStop (actor lp_deformation, int lp_duration);
void j_TerrainDeformStopAll ();
actor j_AddSpecialEffect (string lp_modelName, fixed lp_x, fixed lp_y);
actor j_AddSpecialEffectLoc (string lp_modelName, point lp_where);
actor j_AddSpecialEffectTarget (string lp_modelName, unit lp_targetWidget, string lp_attachPointName);
void j_DestroyEffect (actor lp_whichEffect);
actor j_AddSpellEffect (string lp_abilityString, int lp_t, fixed lp_x, fixed lp_y);
actor j_AddSpellEffectLoc (string lp_abilityString, int lp_t, point lp_where);
actor j_AddSpellEffectById (int lp_abilityId, int lp_t, fixed lp_x, fixed lp_y);
actor j_AddSpellEffectByIdLoc (int lp_abilityId, int lp_t, point lp_where);
actor j_AddSpellEffectTarget (string lp_modelName, int lp_t, unit lp_targetWidget, string lp_attachPoint);
actor j_AddSpellEffectTargetById (int lp_abilityId, int lp_t, unit lp_targetWidget, string lp_attachPoint);
actor j_AddLightning (string lp_codeName, bool lp_checkVisibility, fixed lp_x1, fixed lp_y1, fixed lp_x2, fixed lp_y2);
actor j_AddLightningEx (string lp_codeName, bool lp_checkVisibility, fixed lp_x1, fixed lp_y1, fixed lp_z1, fixed lp_x2, fixed lp_y2, fixed lp_z2);
bool j_DestroyLightning (actor lp_whichBolt);
bool j_MoveLightning (actor lp_whichBolt, bool lp_checkVisibility, fixed lp_x1, fixed lp_y1, fixed lp_x2, fixed lp_y2);
bool j_MoveLightningEx (actor lp_whichBolt, bool lp_checkVisibility, fixed lp_x1, fixed lp_y1, fixed lp_z1, fixed lp_x2, fixed lp_y2, fixed lp_z2);
fixed j_GetLightningColorA (actor lp_whichBolt);
fixed j_GetLightningColorR (actor lp_whichBolt);
fixed j_GetLightningColorG (actor lp_whichBolt);
fixed j_GetLightningColorB (actor lp_whichBolt);
bool j_SetLightningColor (actor lp_whichBolt, fixed lp_r, fixed lp_g, fixed lp_b, fixed lp_a);
string j_GetAbilityEffect (string lp_abilityString, int lp_t, int lp_index);
string j_GetAbilityEffectById (int lp_abilityId, int lp_t, int lp_index);
string j_GetAbilitySound (string lp_abilityString, int lp_t);
string j_GetAbilitySoundById (int lp_abilityId, int lp_t);
int j_GetTerrainCliffLevel (fixed lp_x, fixed lp_y);
void j_SetWaterBaseColor (int lp_red, int lp_green, int lp_blue, int lp_alpha);
void j_SetWaterDeforms (bool lp_val);
int j_GetTerrainType (fixed lp_x, fixed lp_y);
int j_GetTerrainVariance (fixed lp_x, fixed lp_y);
void j_SetTerrainType (fixed lp_x, fixed lp_y, int lp_terrainType, int lp_variation, int lp_area, int lp_shape);
bool j_IsTerrainPathable (fixed lp_x, fixed lp_y, int lp_t);
void j_SetTerrainPathable (fixed lp_x, fixed lp_y, int lp_t, bool lp_flag);
actor j_CreateImage (string lp_file, fixed lp_sizeX, fixed lp_sizeY, fixed lp_sizeZ, fixed lp_posX, fixed lp_posY, fixed lp_posZ, fixed lp_originX, fixed lp_originY, fixed lp_originZ, int lp_imageType);
void j_DestroyImage (actor lp_whichImage);
void j_ShowImage (actor lp_whichImage, bool lp_flag);
void j_SetImageConstantHeight (actor lp_whichImage, bool lp_flag, fixed lp_height);
void j_SetImagePosition (actor lp_whichImage, fixed lp_x, fixed lp_y, fixed lp_z);
void j_SetImageColor (actor lp_whichImage, int lp_red, int lp_green, int lp_blue, int lp_alpha);
void j_SetImageRender (actor lp_whichImage, bool lp_flag);
void j_SetImageRenderAlways (actor lp_whichImage, bool lp_flag);
void j_SetImageAboveWater (actor lp_whichImage, bool lp_flag, bool lp_useWaterAlpha);
void j_SetImageType (actor lp_whichImage, int lp_imageType);
actor j_CreateUbersplat (fixed lp_x, fixed lp_y, string lp_name, int lp_red, int lp_green, int lp_blue, int lp_alpha, bool lp_forcePaused, bool lp_noBirthTime);
void j_DestroyUbersplat (actor lp_whichSplat);
void j_ResetUbersplat (actor lp_whichSplat);
void j_FinishUbersplat (actor lp_whichSplat);
void j_ShowUbersplat (actor lp_whichSplat, bool lp_flag);
void j_SetUbersplatRender (actor lp_whichSplat, bool lp_flag);
void j_SetUbersplatRenderAlways (actor lp_whichSplat, bool lp_flag);
void j_SetBlight (int lp_whichPlayer, fixed lp_x, fixed lp_y, fixed lp_radius, bool lp_addBlight);
void j_SetBlightRect (int lp_whichPlayer, region lp_r, bool lp_addBlight);
void j_SetBlightPoint (int lp_whichPlayer, fixed lp_x, fixed lp_y, bool lp_addBlight);
void j_SetBlightLoc (int lp_whichPlayer, point lp_whichLocation, fixed lp_radius, bool lp_addBlight);
unit j_CreateBlightedGoldmine (int lp_id, fixed lp_x, fixed lp_y, fixed lp_face);
bool j_IsPointBlighted (fixed lp_x, fixed lp_y);
void j_SetDoodadAnimation (fixed lp_x, fixed lp_y, fixed lp_radius, int lp_doodadID, bool lp_nearestOnly, string lp_animName, bool lp_animRandom);
void j_SetDoodadAnimationRect (region lp_r, int lp_doodadID, string lp_animName, bool lp_animRandom);
void j_StartMeleeAI (int lp_num, string lp_script);
void j_StartCampaignAI (int lp_num, string lp_script);
void j_CommandAI (int lp_num, int lp_command, int lp_data);
void j_PauseCompAI (int lp_p, bool lp_pause);
int j_GetAIDifficulty (int lp_num);
void j_RemoveGuardPosition (unit lp_hUnit);
void j_RecycleGuardPosition (unit lp_hUnit);
void j_RemoveAllGuardPositions (int lp_num);
void j_Cheat (string lp_cheatStr);
bool j_IsNoVictoryCheat ();
bool j_IsNoDefeatCheat ();
void j_Preload (string lp_filename);
void j_PreloadEnd (fixed lp_timeout);
void j_PreloadStart ();
void j_PreloadRefresh ();
void j_PreloadEndEx ();
void j_PreloadGenClear ();
void j_PreloadGenStart ();
void j_PreloadGenEnd (string lp_filename);
void j_Preloader (string lp_filename);

// Trigger Declarations
trigger libGAWT_gt__ThematicMusicFinishClearUp;
trigger libGAWT_gt_CustomInit;
trigger libGAWT_gt_UntitledTrigger003;
trigger libGAWT_gt_UntitledTrigger001;

// Library Initialization
void libGAWT_InitVariables ();

