include "TriggerLibs/NativeLib"
include "TriggerLibs/WarClassicSystem"

include "LibGAWT_h"

//--------------------------------------------------------------------------------------------------
// Library: WarCraft Trigger
//--------------------------------------------------------------------------------------------------
// External Library Initialization
void libGAWT_InitLibraries () {
    libNtve_InitVariables();
    libGAwX_InitVariables();
}

// Variable Initialization
bool libGAWT_InitVariables_completed = false;

void libGAWT_InitVariables () {
    if (libGAWT_InitVariables_completed) {
        return;
    }

    libGAWT_InitVariables_completed = true;

}

// Custom Script
//--------------------------------------------------------------------------------------------------
// Custom Script: TypeDef
//--------------------------------------------------------------------------------------------------
typedef bool boolean;
typedef point location;
typedef unitgroup group;
typedef playergroup force;
typedef revealer fogmodifier;
typedef region rect;
typedef camerainfo camerasetup;
typedef string soundhandle; //sound of wc3
typedef fixed real;
typedef unit destructable;
typedef unit item;
typedef unit widget;
typedef actor effect;
typedef actor weathereffect;
typedef actor terraindeformation;
typedef actor lightning;
typedef actor image;
typedef actor ubersplat;
typedef bank gamecache;
typedef bank hashtable;
typedef int event;
typedef int integer;
typedef int quest;
typedef int questitem;
typedef int defeatcondition;
typedef int leaderboard;
typedef int multiboard;
typedef int button;
typedef int texttag;
typedef int player;
typedef int timerdialog;
typedef int dialog;
typedef int race;
typedef int alliancetype;
typedef int racepreference;
typedef int gamestate;
typedef int igamestate;
typedef int fgamestate;
typedef int playerstate;
typedef int playerscore;
typedef int playergameresult;
typedef int unitstate;
typedef int aidifficulty;
typedef int gameevent;
typedef int playerevent;
typedef int playerunitevent;
typedef int widgetevent;
typedef int dialogevent;
typedef int unitevent;
typedef int limitop;
typedef int unittype;
typedef int gamespeed;
typedef int placement;
typedef int startlocprio;
typedef int gamedifficulty;
typedef int gametype;
typedef int mapflag;
typedef int mapvisibility;
typedef int mapsetting;
typedef int mapdensity;
typedef int mapcontrol;
typedef int playercolor;
typedef int playerslotstate;
typedef int volumegroup;
typedef int camerafield;
typedef int blendmode;
typedef int raritycontrol;
typedef int texmapflags;
typedef int fogstate;
typedef int effecttype;
typedef int version;
typedef int itemtype;
typedef int attacktype;
typedef int damagetype;
typedef int weapontype;
typedef int soundtype;
typedef int pathingtype;
void Code(){}
bool BoolExpression(){return true;}
typedef funcref<BoolExpression> boolexpr;
typedef boolexpr conditionfunc;
typedef boolexpr filterfunc;
typedef funcref<Code> code;
unitfilter GAw3_DefaultFilter = UnitFilter(0, 0, (1 << c_targetFilterMissile) | (1 << c_targetFilterDestructible) | (1 << c_targetFilterItem), 0);
unitfilter GAw3_DefaultFilterNoHidden = UnitFilter(0, 0, (1 << c_targetFilterMissile) | (1 << c_targetFilterDestructible) | (1 << c_targetFilterItem), (1 << (c_targetFilterHidden - 32)));
event GAw3_EventHandleMax=0;
fixed MiscData_QuestIndicatorTimeout=10;
void GAw3_EnumUnitSet(unit u){
    int Stack=DataTableGetInt(false,"GAw3_EnumUnitStack");
    DataTableSetUnit(false,"GAw3_EnumUnit_"+IntToString(Stack),u);
}
void GAw3_EnumUnitPush(){
    DataTableSetInt(false,"GAw3_EnumUnitStack",DataTableGetInt(false,"GAw3_EnumUnitStack")+1);
}
void GAw3_EnumUnitPop(){
    DataTableSetInt(false,"GAw3_EnumUnitStack",DataTableGetInt(false,"GAw3_EnumUnitStack")-1);
}
void GAw3_FilterUnitSet(unit u){
    int Stack=DataTableGetInt(false,"GAw3_FilterUnitStack");
    DataTableSetUnit(false,"GAw3_FilterUnit_"+IntToString(Stack),u);
}
void GAw3_FilterUnitPush(){
    DataTableSetInt(false,"GAw3_FilterUnitStack",DataTableGetInt(false,"GAw3_FilterUnitStack")+1);
}
void GAw3_FilterUnitPop(){
    DataTableSetInt(false,"GAw3_FilterUnitStack",DataTableGetInt(false,"GAw3_FilterUnitStack")-1);
}
void GAw3_EnumDestructableSet(unit u){
    int Stack=DataTableGetInt(false,"GAw3_EnumDestructableStack");
    DataTableSetUnit(false,"GAw3_EnumDestructable_"+IntToString(Stack),u);
}
void GAw3_EnumDestructablePush(){
    DataTableSetInt(false,"GAw3_EnumDestructableStack",DataTableGetInt(false,"GAw3_EnumDestructableStack")+1);
}
void GAw3_EnumDestructablePop(){
    DataTableSetInt(false,"GAw3_EnumDestructableStack",DataTableGetInt(false,"GAw3_EnumDestructableStack")-1);
}
void GAw3_FilterDestructableSet(unit u){
    int Stack=DataTableGetInt(false,"GAw3_FilterDestructableStack");
    DataTableSetUnit(false,"GAw3_FilterDestructable_"+IntToString(Stack),u);
}
void GAw3_FilterDestructablePush(){
    DataTableSetInt(false,"GAw3_FilterDestructableStack",DataTableGetInt(false,"GAw3_FilterDestructableStack")+1);
}
void GAw3_FilterDestructablePop(){
    DataTableSetInt(false,"GAw3_FilterDestructableStack",DataTableGetInt(false,"GAw3_FilterDestructableStack")-1);
}
void GAw3_EnumItemSet(unit u){
    int Stack=DataTableGetInt(false,"GAw3_EnumItemStack");
    DataTableSetUnit(false,"GAw3_EnumItem_"+IntToString(Stack),u);
}
void GAw3_EnumItemPush(){
    DataTableSetInt(false,"GAw3_EnumItemStack",DataTableGetInt(false,"GAw3_EnumItemStack")+1);
}
void GAw3_EnumItemPop(){
    DataTableSetInt(false,"GAw3_EnumItemStack",DataTableGetInt(false,"GAw3_EnumItemStack")-1);
}
void GAw3_FilterItemSet(unit u){
    int Stack=DataTableGetInt(false,"GAw3_FilterItemStack");
    DataTableSetUnit(false,"GAw3_FilterItem_"+IntToString(Stack),u);
}
void GAw3_FilterItemPush(){
    DataTableSetInt(false,"GAw3_FilterItemStack",DataTableGetInt(false,"GAw3_FilterItemStack")+1);
}
void GAw3_FilterItemPop(){
    DataTableSetInt(false,"GAw3_FilterItemStack",DataTableGetInt(false,"GAw3_FilterItemStack")-1);
}
void GAw3_EnumPlayerSet(player p){
    int Stack=DataTableGetInt(false,"GAw3_EnumPlayerStack");
    DataTableSetInt(false,"GAw3_EnumPlayer_"+IntToString(Stack),p);
}
void GAw3_EnumPlayerPush(){
    DataTableSetInt(false,"GAw3_EnumPlayerStack",DataTableGetInt(false,"GAw3_EnumPlayerStack")+1);
}
void GAw3_EnumPlayerPop(){
    DataTableSetInt(false,"GAw3_EnumPlayerStack",DataTableGetInt(false,"GAw3_EnumPlayerStack")-1);
}
void GAw3_FilterPlayerSet(player p){
    int Stack=DataTableGetInt(false,"GAw3_FilterPlayerStack");
    DataTableSetInt(false,"GAw3_FilterPlayer_"+IntToString(Stack),p);
}
void GAw3_FilterPlayerPush(){
    DataTableSetInt(false,"GAw3_FilterPlayerStack",DataTableGetInt(false,"GAw3_FilterPlayerStack")+1);
}
void GAw3_FilterPlayerPop(){
    DataTableSetInt(false,"GAw3_FilterPlayerStack",DataTableGetInt(false,"GAw3_FilterPlayerStack")-1);
}
string GAw3_IntToASCII4(int value){
    string charMap = ".................................!.#$%&'()*+,-./0123456789:;<=>.@ABCDEFGHIJKLMNOPQRSTUVWXYZ[.]^_`abcdefghijklmnopqrstuvwxyz{|}~.................................................................................................................................";
    string result = "";
    int remainingValue = value;
    int charValue;
    int byteno=0;
    if(value==0){return "";}
    for(;byteno<4;byteno+=1){
        charValue = ModI(remainingValue, 256);
        remainingValue = remainingValue / 256;
        result = StringSub(charMap, charValue+1, charValue+1) + result;
    }
    return result;
}
int GAw3_ASCII4ToInt(string value){
    string charMap = ".................................!.#$%&'()*+,-./0123456789:;<=>.@ABCDEFGHIJKLMNOPQRSTUVWXYZ[.]^_`abcdefghijklmnopqrstuvwxyz{|}~.................................................................................................................................";
    char a;
    string charStr;
    string charComp;
    int result=0;
    int remainingValue;
    int charValue;
    int byteno;
    int i;
    if(value==null){return 0;}
    for(byteno=1;byteno<=4;byteno+=1){
        charStr=StringSub(value,byteno,byteno);
        for(i=1;i<=256;i+=1){
            charComp=StringSub(charMap,i,i);
            if(charStr==charComp){
                charValue=i-1;
                break;
            }
        }
        result=result*256+charValue;
    }
    return result;
}
order GAw3_OrderStringToOrder(string OrderString){
    string Link=UserDataGetGameLink("OrderString",OrderString,"AbilLink",1);
    int index=0;
    string Op=UserDataGetString("OrderString",OrderString,"Operator",1);
    order ord=null;
    if(Op=="0"){ord=Order(AbilityCommand(Link,0));}
    if(Op=="Cancel"){
   if(CatalogEntryIsValid(c_gameCatalogAbil,Link+"Un")){
   ord=Order(AbilityCommand(Link+"Un",0));
   }else{
   ord=Order(AbilityCommand(Link,1));
   }
   
    }
    if(Op=="On"){
   ord=OrderSetAutoCast(AbilityCommand(Link,0), true);
    }
    if(Op=="Off"){
   ord=OrderSetAutoCast(AbilityCommand(Link,0), false);
    }
    return ord;
}
sound GAw3_SoundFromSoundHandle(soundhandle soundHandle){
    return DataTableGetSound(true,"GAw3_Sound_"+soundHandle);
}
string GAw3_StringCap(string str){
    return StringReplace(str,StringCase(StringSub(str,1,1),true),1,1);
}
string GAw3_ConvertAnimName(string animName){
    return GAw3_StringCap(animName);
}
string GAw3_UnitLearnGet(unit u){
    int c=UnitAbilityCount(u);
    int i;
    string abil;
    for(i=1;i<=c;i+=1){
        abil=UnitAbilityGet(u,i);
        if(AbilityClass(abil)==c_classIdCAbilLearn){break;}
    }
    return abil;
}
string GAw3_BehaviorAlignment(string buff) {
    return CatalogFieldValueGet(c_gameCatalogBehavior, buff, "Alignment", c_playerAny);
}
group GAw3_GroupEnumUnits(group whichGroup,boolexpr filter){
    unit u;
    unitgroup ug=UnitGroupEmpty();
    UnitGroupLoopBegin(whichGroup);
    for (;!UnitGroupLoopDone();UnitGroupLoopStep()) {
        u=UnitGroupLoopCurrent();
        GAw3_FilterUnitPush();
        GAw3_FilterUnitSet(u);
        if(filter()){UnitGroupAdd(ug,u);}
        GAw3_FilterUnitPop();
    }
    UnitGroupLoopEnd();
    return ug;
}
bool GAw3_UnitValidator(unit u,string type){
    return UnitValidateEffectUnit(u,type,u)==0;
}
bool GAw3_WeaponIsMelee(string w){
    return CatalogFieldValueGetAsInt(c_gameCatalogWeapon, w, "Options[Melee]", c_playerAny)==1;
}
string GAw3_UnitCodeNameToType(string name){
    return UserDataGetGameLink("UnitCodeName",name,"UnitID",1);
}
int GAw3_TODEventTimerCount;
fixed GAw3_TODToGameSec(string TOD){
    int tmin=0;
    fixed gs=0;
    string s=TOD;
    if(StringLength(s)>5){
        tmin=StringToInt(StringSub(s,1,2))*60+StringToInt(StringSub(s,4,5));
    }else{
        tmin=StringToInt(StringSub(s,1,2));
    }
    gs=tmin*(GameTimeOfDayGetLength()/1440);
    return gs;
}
fixed GAw3_TODToTODHour(string TOD){
    fixed th=0;
    string s=TOD;
    if(StringLength(s)>5){
        th=StringToFixed(StringSub(s,1,2))+StringToFixed(StringSub(s,4,5))/60;
    }else{
        th=StringToFixed(StringSub(s,1,2))/60;
    }
    return th;
}
int GAw3_HumanPlayerGet(){
    int p=0;
    for(;p<16;p+=1){
        if((PlayerType(p)==c_playerTypeUser)&&(PlayerStatus(p)==c_playerStatusActive)){
            return p;
        }
    }
    return 0;
}
int GAw3_HumanPlayer=GAw3_HumanPlayerGet();
bool GAw3_NoVictory=false;
bool GAw3_NoDefeat=false;
bool GAw3_VDCheatHandle(bool testConds, bool runActions){
    if(EventCheatUsed()==c_gameCheatNoVictory){
        GAw3_NoVictory=!GAw3_NoVictory;
    }else if(EventCheatUsed()==c_gameCheatNoDefeat){
        GAw3_NoDefeat=!GAw3_NoDefeat;
    }
    return true;
}
void PauseGame(boolean flag){
    if(flag){
        GameSetGlobalTimeScale(0);
    }else{
        GameSetGlobalTimeScale(1);
    }
}
int GAw3_QuestCountQuestItem(quest q){
    return DataTableGetInt(true, "GAw3_Quest_"+IntToString(q)+"_ItemCount");
}
questitem GAw3_QuestGetQuestItem(quest q, int i){
    return DataTableGetObjective(true, "GAw3_Quest_"+IntToString(q)+"_Item_"+IntToString(i));
}
int GAw3_QuestGetHelpItem(quest q){
    return DataTableGetInt(true, "GAw3_Quest_"+IntToString(q)+"_HelpItem");
}
string GAw3_QuestGetImage(quest q){
    return DataTableGetString(true, "GAw3_Quest_"+IntToString(q)+"_Image");
}
bool GAw3_QuestIsValid(quest q){
    return (ObjectiveGetState(q)!=c_objectiveStateUnknown);
}
text GAw3_tEmpty=StringToText("");
text GAw3_tBullet=StringToText(" - ");
text GAw3_tNewline=StringToText("<n/>");
text GAw3_tQuestCompletePrefix=StringToText("<s val=\"ObjectivePanelCompleted\">");
text GAw3_tQuestCompleteSuffix=StringToText("</s> (")+StringExternal("UI/QUESTCOMPLETED")+StringToText(")");
text GAw3_QuestItemGetFormatText(questitem qi){
    text t=GAw3_tBullet+ObjectiveGetName(qi);
    if(ObjectiveGetState(qi)==c_objectiveStateCompleted){
        t=GAw3_tQuestCompletePrefix+t+GAw3_tQuestCompleteSuffix;
    }
    return t;
}
void GAw3_UpdateQuestHelpItem(quest q, bool flash){
    int h=GAw3_QuestGetHelpItem(q);
    int c=GAw3_QuestCountQuestItem(q);
    int i=2;
    int qi;
    text title=ObjectiveGetName(q);
    text descr=ObjectiveGetDescription(q);
    text con;
    string icon=GAw3_QuestGetImage(q);
    bool hide=(ObjectiveGetState(q)==c_objectiveStateHidden);
    HelpPanelDestroyHelpItem(h);
    if(hide){return;}
    if(!GAw3_QuestIsValid(q)){return;}
    if(PlayerGroupCount(ObjectiveGetPlayerGroup(q))==0){
        title=StringExternal("UI/UNDISCOVERED_QUEST");
        con=StringExternal("UI/QUESTNOTDISCOVERED");
        icon="Assets\\Textures\\ui_hots_icon_shared_questionmark.dds";
    }else{
        if(c){
            qi=GAw3_QuestGetQuestItem(q,1);
            con=GAw3_QuestItemGetFormatText(qi);
            for(;i<=c;i+=1){
                qi=GAw3_QuestGetQuestItem(q,i);
                con+=GAw3_tNewline+GAw3_QuestItemGetFormatText(qi);
            }
        }
        con+=GAw3_tNewline+GAw3_tNewline+descr;
    }
    if(icon==""){icon="Assets\\Textures\\ui_hots_icon_shared_questionmark.dds";}
    if(ObjectiveGetPrimary(q)){
        HelpPanelAddTip (PlayerGroupAll(), title, con, title, icon);
    }else{
        HelpPanelAddTutorial(PlayerGroupAll(), title, con, icon,null,true);
    }
    h=HelpPanelLastCreatedHelpItem();
    HelpPanelSetHelpItemDarkenedWhenViewed(h,false);
    DataTableSetInt(true, "GAw3_Quest_"+IntToString(q)+"_HelpItem",h);
    //if(!flash){
        TipAlertPanelClear(PlayerGroupAll());
    //}
}
bool GAw3_CinSkipPrep_Func(bool c,bool a){
    if (!libNtve_gf_PlayerInCinematicMode(GAw3_HumanPlayer)) {
            return false;
    }
    TriggerSkippableBegin(PlayerGroupAll(), 1, TriggerGetCurrent(), true, false);
    Wait(524287.0, c_timeGame);
    return true;
}
int GAw3_QuestButton=DialogControlHookupStandard(c_triggerControlTypeButton, "UIContainer\\FullscreenUpperContainer\\MenuBar\\HelpButton");
trigger GAw3_FlashQuestButton;
trigger GAw3_QuestButtonClicked;
bool GAw3_FlashQuestButton_Func(bool c,bool a){
    fixed r;
    for (r=1;r<=MiscData_QuestIndicatorTimeout;r+=1) {
        Wait(0.5, c_timeGame);
        libNtve_gf_SetDialogItemImage(GAw3_QuestButton, ("Assets\\Textures\\ui_gamemenu_helpbutton_normaloverpressedover_zerg.dds"), PlayerGroupAll());
        Wait(0.5, c_timeGame);
        libNtve_gf_SetDialogItemImage(GAw3_QuestButton, ("Assets\\Textures\\ui_gamemenu_helpbutton_normalpressed_zerg.dds"), PlayerGroupAll());
    }
    return true;
}
bool GAw3_QuestButtonClicked_Func(bool c,bool a){
    TriggerStop(GAw3_FlashQuestButton);
    libNtve_gf_SetDialogItemImage(GAw3_QuestButton, ("Assets\\Textures\\ui_gamemenu_helpbutton_normalpressed_zerg.dds"), PlayerGroupAll());
    return true;
}
trigger GAw3_tmp_trig;
int GAw3_temp_int;
fixed GAw3_temp_fixed;
trigger GAw3_TODEvent;
string[300] GAw3_EVENT;
trigger[300] GAw3_EVENT_TRIG;
trigger GAw3_CinSkipPrep;
void GAw3_Def_Init(){
    trigger vd=TriggerCreate("GAw3_VDCheatHandle");
    TriggerAddEventCheatUsed(vd, c_playerAny, c_gameCheatNoDefeat);
    TriggerAddEventCheatUsed(vd, c_playerAny, c_gameCheatNoVictory);
    GAw3_FlashQuestButton=TriggerCreate("GAw3_FlashQuestButton_Func");
    GAw3_QuestButtonClicked=TriggerCreate("GAw3_QuestButtonClicked_Func");
    TriggerAddEventDialogControl(GAw3_QuestButtonClicked, c_playerAny, GAw3_QuestButton, c_triggerControlEventTypeClick);
    GAw3_TODEvent=TriggerCreate("GAw3_TODEvent_Func");
    GAw3_CinSkipPrep=TriggerCreate("GAw3_CinSkipPrep_Func");
    GAw3_EVENT[0]="EVENT_GAME_VICTORY";
    GAw3_EVENT[1]="EVENT_GAME_END_LEVEL";
    GAw3_EVENT[2]="EVENT_GAME_VARIABLE_LIMIT";
    GAw3_EVENT[3]="EVENT_GAME_STATE_LIMIT";   
    GAw3_EVENT[4]="EVENT_GAME_TIMER_EXPIRED";
    GAw3_EVENT[5]="EVENT_GAME_ENTER_REGION";
    GAw3_EVENT[6]="EVENT_GAME_LEAVE_REGION";
    GAw3_EVENT[7]="EVENT_GAME_TRACKABLE_HIT";
    GAw3_EVENT[8]="EVENT_GAME_TRACKABLE_TRACK";
    GAw3_EVENT[9]="EVENT_GAME_SHOW_SKILL";    
    GAw3_EVENT[10]="EVENT_GAME_BUILD_SUBMENU";
    //===================================================
    // For use with TriggerRegisterPlayerEvent
    //===================================================
    GAw3_EVENT[11]="EVENT_PLAYER_STATE_LIMIT";
    GAw3_EVENT[12]="EVENT_PLAYER_ALLIANCE_CHANGED";
    GAw3_EVENT[13]="EVENT_PLAYER_DEFEAT";
    GAw3_EVENT[14]="EVENT_PLAYER_VICTORY";
    GAw3_EVENT[15]="EVENT_PLAYER_LEAVE";
    GAw3_EVENT[16]="EVENT_PLAYER_CHAT";
    GAw3_EVENT[17]="EVENT_PLAYER_END_CINEMATIC";
    //===================================================
    // For use with TriggerRegisterPlayerUnitEvent
    //===================================================
    GAw3_EVENT[18]="EVENT_PLAYER_UNIT_ATTACKED";
    GAw3_EVENT[19]="EVENT_PLAYER_UNIT_RESCUED";
    GAw3_EVENT[20]="EVENT_PLAYER_UNIT_DEATH";
    GAw3_EVENT[21]="EVENT_PLAYER_UNIT_DECAY";
    GAw3_EVENT[22]="EVENT_PLAYER_UNIT_DETECTED";
    GAw3_EVENT[23]="EVENT_PLAYER_UNIT_HIDDEN";
    GAw3_EVENT[24]="EVENT_PLAYER_UNIT_SELECTED";
    GAw3_EVENT[25]="EVENT_PLAYER_UNIT_DESELECTED";
    GAw3_EVENT[26]="EVENT_PLAYER_UNIT_CONSTRUCT_START";
    GAw3_EVENT[27]="EVENT_PLAYER_UNIT_CONSTRUCT_CANCEL";
    GAw3_EVENT[28]="EVENT_PLAYER_UNIT_CONSTRUCT_FINISH";
    GAw3_EVENT[29]="EVENT_PLAYER_UNIT_UPGRADE_START";
    GAw3_EVENT[30]="EVENT_PLAYER_UNIT_UPGRADE_CANCEL";
    GAw3_EVENT[31]="EVENT_PLAYER_UNIT_UPGRADE_FINISH";
    GAw3_EVENT[32]="EVENT_PLAYER_UNIT_TRAIN_START";
    GAw3_EVENT[33]="EVENT_PLAYER_UNIT_TRAIN_CANCEL";
    GAw3_EVENT[34]="EVENT_PLAYER_UNIT_TRAIN_FINISH";
    GAw3_EVENT[35]="EVENT_PLAYER_UNIT_RESEARCH_START";
    GAw3_EVENT[36]="EVENT_PLAYER_UNIT_RESEARCH_CANCEL";
    GAw3_EVENT[37]="EVENT_PLAYER_UNIT_RESEARCH_FINISH";
    GAw3_EVENT[38]="EVENT_PLAYER_UNIT_ISSUED_ORDER";
    GAw3_EVENT[39]="EVENT_PLAYER_UNIT_ISSUED_POINT_ORDER";
    GAw3_EVENT[40]="EVENT_PLAYER_UNIT_ISSUED_TARGET_ORDER";
    GAw3_EVENT[40]="EVENT_PLAYER_UNIT_ISSUED_UNIT_ORDER";    // for compat
    GAw3_EVENT[41]="EVENT_PLAYER_HERO_LEVEL";
    GAw3_EVENT[42]="EVENT_PLAYER_HERO_SKILL";
    GAw3_EVENT[43]="EVENT_PLAYER_HERO_REVIVABLE";
    GAw3_EVENT[44]="EVENT_PLAYER_HERO_REVIVE_START";
    GAw3_EVENT[45]="EVENT_PLAYER_HERO_REVIVE_CANCEL";
    GAw3_EVENT[46]="EVENT_PLAYER_HERO_REVIVE_FINISH";
    GAw3_EVENT[47]="EVENT_PLAYER_UNIT_SUMMON";
    GAw3_EVENT[48]="EVENT_PLAYER_UNIT_DROP_ITEM";
    GAw3_EVENT[49]="EVENT_PLAYER_UNIT_PICKUP_ITEM";
    GAw3_EVENT[50]="EVENT_PLAYER_UNIT_USE_ITEM";
    GAw3_EVENT[51]="EVENT_PLAYER_UNIT_LOADED";
    
    //===================================================
    // For use with TriggerRegisterUnitEvent
    //===================================================
    GAw3_EVENT[52]="EVENT_UNIT_DAMAGED";
    GAw3_EVENT[53]="EVENT_UNIT_DEATH";
    GAw3_EVENT[54]="EVENT_UNIT_DECAY";
    GAw3_EVENT[55]="EVENT_UNIT_DETECTED";
    GAw3_EVENT[56]="EVENT_UNIT_HIDDEN";
    GAw3_EVENT[57]="EVENT_UNIT_SELECTED";
    GAw3_EVENT[58]="EVENT_UNIT_DESELECTED";
                                                                        
    GAw3_EVENT[59]="EVENT_UNIT_STATE_LIMIT";                                                                        
    // Events which may have a filter for the"other unit"              
    //                                                                  
    GAw3_EVENT[60]="EVENT_UNIT_ACQUIRED_TARGET";
    GAw3_EVENT[61]="EVENT_UNIT_TARGET_IN_RANGE";
    GAw3_EVENT[62]="EVENT_UNIT_ATTACKED";
    GAw3_EVENT[63]="EVENT_UNIT_RESCUED";
                                                                        
    GAw3_EVENT[64]="EVENT_UNIT_CONSTRUCT_CANCEL";
    GAw3_EVENT[65]="EVENT_UNIT_CONSTRUCT_FINISH";
                                                                        
    GAw3_EVENT[66]="EVENT_UNIT_UPGRADE_START";
    GAw3_EVENT[67]="EVENT_UNIT_UPGRADE_CANCEL";
    GAw3_EVENT[68]="EVENT_UNIT_UPGRADE_FINISH";
                                                                        
    // Events which involve the specified unit performing               
    // training of other units                                          
    //                                                                  
    GAw3_EVENT[69]="EVENT_UNIT_TRAIN_START";
    GAw3_EVENT[70]="EVENT_UNIT_TRAIN_CANCEL";
    GAw3_EVENT[71]="EVENT_UNIT_TRAIN_FINISH";
                                                                        
    GAw3_EVENT[72]="EVENT_UNIT_RESEARCH_START";
    GAw3_EVENT[73]="EVENT_UNIT_RESEARCH_CANCEL";
    GAw3_EVENT[74]="EVENT_UNIT_RESEARCH_FINISH";
                                                                        
    GAw3_EVENT[75]="EVENT_UNIT_ISSUED_ORDER";
    GAw3_EVENT[76]="EVENT_UNIT_ISSUED_POINT_ORDER";
    GAw3_EVENT[77]="EVENT_UNIT_ISSUED_TARGET_ORDER";
                                                                       
    GAw3_EVENT[78]="EVENT_UNIT_HERO_LEVEL";
    GAw3_EVENT[79]="EVENT_UNIT_HERO_SKILL";
                                                                        
    GAw3_EVENT[80]="EVENT_UNIT_HERO_REVIVABLE";
    GAw3_EVENT[81]="EVENT_UNIT_HERO_REVIVE_START";
    GAw3_EVENT[82]="EVENT_UNIT_HERO_REVIVE_CANCEL";
    GAw3_EVENT[83]="EVENT_UNIT_HERO_REVIVE_FINISH";
                                                                        
    GAw3_EVENT[84]="EVENT_UNIT_SUMMON";
                                                                        
    GAw3_EVENT[85]="EVENT_UNIT_DROP_ITEM";
    GAw3_EVENT[86]="EVENT_UNIT_PICKUP_ITEM";
    GAw3_EVENT[87]="EVENT_UNIT_USE_ITEM";
    GAw3_EVENT[88]="EVENT_UNIT_LOADED";
    GAw3_EVENT[89]="EVENT_WIDGET_DEATH";
    GAw3_EVENT[90]="EVENT_DIALOG_BUTTON_CLICK";
    GAw3_EVENT[91]="EVENT_DIALOG_CLICK";
    //===================================================
    // Frozen Throne Expansion Events
    // Need to be added here to preserve compat
    //===================================================
    //===================================================
    // For use with TriggerRegisterGameEvent    
    //===================================================    
    GAw3_EVENT[256]="EVENT_GAME_LOADED";
    GAw3_EVENT[257]="EVENT_GAME_TOURNAMENT_FINISH_SOON";
    GAw3_EVENT[258]="EVENT_GAME_TOURNAMENT_FINISH_NOW";
    GAw3_EVENT[259]="EVENT_GAME_SAVE";
    //===================================================
    // For use with TriggerRegisterPlayerEvent
    //===================================================
    GAw3_EVENT[261]="EVENT_PLAYER_ARROW_LEFT_DOWN";
    GAw3_EVENT[262]="EVENT_PLAYER_ARROW_LEFT_UP";
    GAw3_EVENT[263]="EVENT_PLAYER_ARROW_RIGHT_DOWN";
    GAw3_EVENT[264]="EVENT_PLAYER_ARROW_RIGHT_UP";
    GAw3_EVENT[265]="EVENT_PLAYER_ARROW_DOWN_DOWN";
    GAw3_EVENT[266]="EVENT_PLAYER_ARROW_DOWN_UP";
    GAw3_EVENT[267]="EVENT_PLAYER_ARROW_UP_DOWN";
    GAw3_EVENT[268]="EVENT_PLAYER_ARROW_UP_UP";
    //===================================================
    // For use with TriggerRegisterPlayerUnitEvent
    //===================================================
    GAw3_EVENT[269]="EVENT_PLAYER_UNIT_SELL";
    GAw3_EVENT[270]="EVENT_PLAYER_UNIT_CHANGE_OWNER";
    GAw3_EVENT[271]="EVENT_PLAYER_UNIT_SELL_ITEM";
    GAw3_EVENT[272]="EVENT_PLAYER_UNIT_SPELL_CHANNEL";
    GAw3_EVENT[273]="EVENT_PLAYER_UNIT_SPELL_CAST";
    GAw3_EVENT[274]="EVENT_PLAYER_UNIT_SPELL_EFFECT";
    GAw3_EVENT[275]="EVENT_PLAYER_UNIT_SPELL_FINISH";
    GAw3_EVENT[276]="EVENT_PLAYER_UNIT_SPELL_ENDCAST";
    GAw3_EVENT[277]="EVENT_PLAYER_UNIT_PAWN_ITEM";
    //===================================================
    // For use with TriggerRegisterUnitEvent
    //===================================================
    GAw3_EVENT[286]="EVENT_UNIT_SELL";
    GAw3_EVENT[287]="EVENT_UNIT_CHANGE_OWNER";
    GAw3_EVENT[288]="EVENT_UNIT_SELL_ITEM";
    GAw3_EVENT[289]="EVENT_UNIT_SPELL_CHANNEL";
    GAw3_EVENT[290]="EVENT_UNIT_SPELL_CAST";
    GAw3_EVENT[291]="EVENT_UNIT_SPELL_EFFECT";
    GAw3_EVENT[292]="EVENT_UNIT_SPELL_FINISH";
    GAw3_EVENT[293]="EVENT_UNIT_SPELL_ENDCAST";
    GAw3_EVENT[294]="EVENT_UNIT_PAWN_ITEM";
    //GAw3_EVENT_TRIG[20]=libGAw3_gt_EVENT_PLAYER_UNIT_DEATH;
    //GAw3_EVENT_TRIG[41]=libGAw3_gt_EVENT_PLAYER_HERO_LEVEL;
    //GAw3_EVENT_TRIG[42]=libGAw3_gt_EVENT_PLAYER_HERO_SKILL;
    //GAw3_EVENT_TRIG[48]=libGAw3_gt_EVENT_PLAYER_UNIT_DROP_ITEM;
    //GAw3_EVENT_TRIG[49]=libGAw3_gt_EVENT_PLAYER_UNIT_PICKUP_ITEM;
    //GAw3_EVENT_TRIG[50]=libGAw3_gt_EVENT_PLAYER_UNIT_USE_ITEM;
    //GAw3_EVENT_TRIG[269]=libGAw3_gt_EVENT_PLAYER_UNIT_SELL;
    //GAw3_EVENT_TRIG[270]=libGAw3_gt_EVENT_PLAYER_UNIT_CHANGE_OWNER;
    //GAw3_EVENT_TRIG[271]=libGAw3_gt_EVENT_PLAYER_UNIT_SELL_ITEM;
    //GAw3_EVENT_TRIG[277]=libGAw3_gt_EVENT_PLAYER_UNIT_PAWN_ITEM;
}

//--------------------------------------------------------------------------------------------------
// Custom Script: Common.j (Consts)
//--------------------------------------------------------------------------------------------------
    volumegroup        SOUND_VOLUMEGROUP_UNITMOVEMENT      = c_soundCategoryMovement;
    volumegroup        SOUND_VOLUMEGROUP_UNITSOUNDS        = c_soundCategoryVoice;
    volumegroup        SOUND_VOLUMEGROUP_COMBAT            = c_soundCategoryCombat;
    volumegroup        SOUND_VOLUMEGROUP_SPELLS            = c_soundCategorySpell;
    volumegroup        SOUND_VOLUMEGROUP_UI                = c_soundCategoryUI;
    volumegroup        SOUND_VOLUMEGROUP_MUSIC             = c_soundCategoryMusic;
    volumegroup        SOUND_VOLUMEGROUP_AMBIENTSOUNDS     = c_soundCategoryAmbient;
    volumegroup        SOUND_VOLUMEGROUP_FIRE              = c_soundCategorySAmbient;
    // current resource levels
    //
    playerstate PLAYER_STATE_RESOURCE_GOLD             = c_playerPropTerrazine;
    playerstate PLAYER_STATE_RESOURCE_LUMBER           = c_playerPropCustom;
    playerstate PLAYER_STATE_RESOURCE_HERO_TOKENS      = -1;//ConvertPlayerState(3);
    playerstate PLAYER_STATE_RESOURCE_FOOD_CAP         = c_playerPropSuppliesMade;
    playerstate PLAYER_STATE_RESOURCE_FOOD_USED        = c_playerPropSuppliesUsed;
    playerstate PLAYER_STATE_FOOD_CAP_CEILING          = c_playerPropSuppliesLimit;
    playerstate PLAYER_STATE_GIVES_BOUNTY              = 99;//ConvertPlayerState(7);
    playerstate PLAYER_STATE_ALLIED_VICTORY            = -1;//ConvertPlayerState(8);
    playerstate PLAYER_STATE_PLACED                    = -1;//ConvertPlayerState(9);
    playerstate PLAYER_STATE_OBSERVER_ON_DEATH         = -1;//ConvertPlayerState(10);
    playerstate PLAYER_STATE_OBSERVER                  = -1;//ConvertPlayerState(11);
    playerstate PLAYER_STATE_UNFOLLOWABLE              = -1;//ConvertPlayerState(12);
    // taxation rate for each resource
    //
    playerstate PLAYER_STATE_GOLD_UPKEEP_RATE          = -1;//ConvertPlayerState(13);
    playerstate PLAYER_STATE_LUMBER_UPKEEP_RATE        = -1;//ConvertPlayerState(14);
    // cumulative resources collected by the player during the mission
    //
    playerstate PLAYER_STATE_GOLD_GATHERED             = c_playerPropTerrazineCollected;
    playerstate PLAYER_STATE_LUMBER_GATHERED           = c_playerPropCustomCollected;
    playerstate PLAYER_STATE_NO_CREEP_SLEEP            = -1;//ConvertPlayerState(25);
    alliancetype       ALLIANCE_PASSIVE                = c_allianceIdPassive;
    alliancetype       ALLIANCE_HELP_REQUEST           = c_allianceIdSeekHelp;
    alliancetype       ALLIANCE_HELP_RESPONSE          = c_allianceIdGiveHelp;
    alliancetype       ALLIANCE_SHARED_XP              = -1;//ConvertAllianceType(3);
    alliancetype       ALLIANCE_SHARED_SPELLS          = -1;//ConvertAllianceType(4);
    alliancetype       ALLIANCE_SHARED_VISION          = c_allianceIdVision;
    alliancetype       ALLIANCE_SHARED_CONTROL         = c_allianceIdControl;
    alliancetype       ALLIANCE_SHARED_ADVANCED_CONTROL= -1;//ConvertAllianceType(7);
    alliancetype       ALLIANCE_RESCUABLE              = -1;//ConvertAllianceType(8);
    alliancetype       ALLIANCE_SHARED_VISION_FORCED   = -1;//ConvertAllianceType(9);
    integer            PLAYER_NEUTRAL_PASSIVE          = 15;
    integer            PLAYER_NEUTRAL_AGGRESSIVE       = 14;
    playergameresult   PLAYER_GAME_RESULT_VICTORY      = c_gameResultVictory;
    playergameresult   PLAYER_GAME_RESULT_DEFEAT       = c_gameResultDefeat;
    playergameresult   PLAYER_GAME_RESULT_TIE          = c_gameResultTie;
    playergameresult   PLAYER_GAME_RESULT_NEUTRAL      = c_gameResultUndecided;
    mapcontrol         MAP_CONTROL_USER                    = c_playerTypeUser;
    mapcontrol         MAP_CONTROL_COMPUTER                = c_playerTypeComputer;
    mapcontrol         MAP_CONTROL_RESCUABLE               = c_playerTypeNeutral;
    mapcontrol         MAP_CONTROL_NEUTRAL                 = c_playerTypeNeutral;
    mapcontrol         MAP_CONTROL_CREEP                   = c_playerTypeHostile;
    mapcontrol         MAP_CONTROL_NONE                    = c_playerTypeNone;
    playerslotstate    PLAYER_SLOT_STATE_EMPTY             = c_playerStatusUnused;
    playerslotstate    PLAYER_SLOT_STATE_PLAYING           = c_playerStatusActive;
    playerslotstate    PLAYER_SLOT_STATE_LEFT              = c_playerStatusLeft;
	race ConvertRace(integer i){return i;}
	alliancetype ConvertAllianceType(integer i){return i;}
	racepreference ConvertRacePref(integer i){return i;}
	igamestate ConvertIGameState(integer i){return i;}
	fgamestate ConvertFGameState(integer i){return i;}
	playerstate ConvertPlayerState(integer i){return i;}
	playerscore ConvertPlayerScore(integer i){return i;}
	playergameresult ConvertPlayerGameResult(integer i){return i;}
	unitstate ConvertUnitState(integer i){return i;}
	aidifficulty ConvertAIDifficulty(integer i){return i;}
	gameevent ConvertGameEvent(integer i){return i;}
	playerevent ConvertPlayerEvent(integer i){return i;}
	playerunitevent ConvertPlayerUnitEvent(integer i){return i;}
	widgetevent ConvertWidgetEvent(integer i){return i;}
	dialogevent ConvertDialogEvent(integer i){return i;}
	unitevent ConvertUnitEvent(integer i){return i;}
	limitop ConvertLimitOp(integer i){return i;}
	unittype ConvertUnitType(integer i){return i;}
	gamespeed ConvertGameSpeed(integer i){return i;}
	placement ConvertPlacement(integer i){return i;}
	startlocprio ConvertStartLocPrio(integer i){return i;}
	gamedifficulty ConvertGameDifficulty(integer i){return i;}
	gametype ConvertGameType(integer i){return i;}
	mapflag ConvertMapFlag(integer i){return i;}
	mapvisibility ConvertMapVisibility(integer i){return i;}
	mapsetting ConvertMapSetting(integer i){return i;}
	mapdensity ConvertMapDensity(integer i){return i;}
	mapcontrol ConvertMapControl(integer i){return i;}
       playercolor ConvertPlayerColor(integer number){
            if(number==PLAYER_NEUTRAL_PASSIVE){return 0;}
            return number+1;
       }
	playerslotstate ConvertPlayerSlotState(integer i){return i;}
	volumegroup ConvertVolumeGroup(integer i){return i;}
	camerafield ConvertCameraField(integer i){return i;}
	blendmode ConvertBlendMode(integer i){return i;}
	raritycontrol ConvertRarityControl(integer i){return i;}
	texmapflags ConvertTexMapFlags(integer i){return i;}
	fogstate ConvertFogState(integer i){return i;}
	effecttype ConvertEffectType(integer i){return i;}
	version ConvertVersion(integer i){return i;}
	itemtype ConvertItemType(integer i){return i;}
	attacktype ConvertAttackType(integer i){return i;}
	damagetype ConvertDamageType(integer i){return i;}
	weapontype ConvertWeaponType(integer i){return i;}
	soundtype ConvertSoundType(integer i){return i;}
	pathingtype ConvertPathingType(integer i){return i;}
//===================================================
// Unit Type Constants for use with IsUnitType()
//===================================================
    unittype UNIT_TYPE_HERO                        = ConvertUnitType(0);
    unittype UNIT_TYPE_DEAD                        = ConvertUnitType(1);
    unittype UNIT_TYPE_STRUCTURE                   = ConvertUnitType(2);
    unittype UNIT_TYPE_FLYING                      = ConvertUnitType(3);
    unittype UNIT_TYPE_GROUND                      = ConvertUnitType(4);
    unittype UNIT_TYPE_ATTACKS_FLYING              = ConvertUnitType(5);
    unittype UNIT_TYPE_ATTACKS_GROUND              = ConvertUnitType(6);
    unittype UNIT_TYPE_MELEE_ATTACKER              = ConvertUnitType(7);
    unittype UNIT_TYPE_RANGED_ATTACKER             = ConvertUnitType(8);
    unittype UNIT_TYPE_GIANT                       = ConvertUnitType(9);
    unittype UNIT_TYPE_SUMMONED                    = ConvertUnitType(10);
    unittype UNIT_TYPE_STUNNED                     = ConvertUnitType(11);
    unittype UNIT_TYPE_PLAGUED                     = ConvertUnitType(12);
    unittype UNIT_TYPE_SNARED                      = ConvertUnitType(13);
    unittype UNIT_TYPE_UNDEAD                      = ConvertUnitType(14);
    unittype UNIT_TYPE_MECHANICAL                  = ConvertUnitType(15);
    unittype UNIT_TYPE_PEON                        = ConvertUnitType(16);
    unittype UNIT_TYPE_SAPPER                      = ConvertUnitType(17);
    unittype UNIT_TYPE_TOWNHALL                    = ConvertUnitType(18)    ;
    unittype UNIT_TYPE_ANCIENT                     = ConvertUnitType(19);
    
    unittype UNIT_TYPE_TAUREN                      = ConvertUnitType(20);
    unittype UNIT_TYPE_POISONED                    = ConvertUnitType(21);
    unittype UNIT_TYPE_POLYMORPHED                 = ConvertUnitType(22);
    unittype UNIT_TYPE_SLEEPING                    = ConvertUnitType(23);
    unittype UNIT_TYPE_RESISTANT                   = ConvertUnitType(24);
    unittype UNIT_TYPE_ETHEREAL                    = ConvertUnitType(25);
    unittype UNIT_TYPE_MAGIC_IMMUNE                = ConvertUnitType(26);
//===================================================
// Game Constants    
//===================================================
    // pfff
    boolean            FALSE                           = false;
    boolean            TRUE                            = true;
    integer            JASS_MAX_ARRAY_SIZE             = 8192;
    //integer            PLAYER_NEUTRAL_PASSIVE          = 15;
    //integer            PLAYER_NEUTRAL_AGGRESSIVE       = 12;
    playercolor        PLAYER_COLOR_RED                = ConvertPlayerColor(0);
    playercolor        PLAYER_COLOR_BLUE               = ConvertPlayerColor(1);
    playercolor        PLAYER_COLOR_CYAN               = ConvertPlayerColor(2);
    playercolor        PLAYER_COLOR_PURPLE             = ConvertPlayerColor(3);
    playercolor        PLAYER_COLOR_YELLOW             = ConvertPlayerColor(4);
    playercolor        PLAYER_COLOR_ORANGE             = ConvertPlayerColor(5);
    playercolor        PLAYER_COLOR_GREEN              = ConvertPlayerColor(6);
    playercolor        PLAYER_COLOR_PINK               = ConvertPlayerColor(7);
    playercolor        PLAYER_COLOR_LIGHT_GRAY         = ConvertPlayerColor(8);
    playercolor        PLAYER_COLOR_LIGHT_BLUE         = ConvertPlayerColor(9);
    playercolor        PLAYER_COLOR_AQUA               = ConvertPlayerColor(10);
    playercolor        PLAYER_COLOR_BROWN              = ConvertPlayerColor(11);
    race               RACE_HUMAN                      = ConvertRace(1);
    race               RACE_ORC                        = ConvertRace(2);
    race               RACE_UNDEAD                     = ConvertRace(3);
    race               RACE_NIGHTELF                   = ConvertRace(4);
    race               RACE_DEMON                      = ConvertRace(5);
    race               RACE_OTHER                      = ConvertRace(7);
    version            VERSION_REIGN_OF_CHAOS          = ConvertVersion(0);
    version            VERSION_FROZEN_THRONE           = ConvertVersion(1);
    attacktype         ATTACK_TYPE_NORMAL              = ConvertAttackType(0);
    attacktype         ATTACK_TYPE_MELEE               = ConvertAttackType(1);
    attacktype         ATTACK_TYPE_PIERCE              = ConvertAttackType(2);
    attacktype         ATTACK_TYPE_SIEGE               = ConvertAttackType(3);
    attacktype         ATTACK_TYPE_MAGIC               = ConvertAttackType(4);
    attacktype         ATTACK_TYPE_CHAOS               = ConvertAttackType(5);
    attacktype         ATTACK_TYPE_HERO                = ConvertAttackType(6);
    damagetype         DAMAGE_TYPE_UNKNOWN             = ConvertDamageType(0);
    damagetype         DAMAGE_TYPE_NORMAL              = ConvertDamageType(4);
    damagetype         DAMAGE_TYPE_ENHANCED            = ConvertDamageType(5);
    damagetype         DAMAGE_TYPE_FIRE                = ConvertDamageType(8);
    damagetype         DAMAGE_TYPE_COLD                = ConvertDamageType(9);
    damagetype         DAMAGE_TYPE_LIGHTNING           = ConvertDamageType(10);
    damagetype         DAMAGE_TYPE_POISON              = ConvertDamageType(11);
    damagetype         DAMAGE_TYPE_DISEASE             = ConvertDamageType(12);
    damagetype         DAMAGE_TYPE_DIVINE              = ConvertDamageType(13);
    damagetype         DAMAGE_TYPE_MAGIC               = ConvertDamageType(14);
    damagetype         DAMAGE_TYPE_SONIC               = ConvertDamageType(15);
    damagetype         DAMAGE_TYPE_ACID                = ConvertDamageType(16);
    damagetype         DAMAGE_TYPE_FORCE               = ConvertDamageType(17);
    damagetype         DAMAGE_TYPE_DEATH               = ConvertDamageType(18);
    damagetype         DAMAGE_TYPE_MIND                = ConvertDamageType(19);
    damagetype         DAMAGE_TYPE_PLANT               = ConvertDamageType(20);
    damagetype         DAMAGE_TYPE_DEFENSIVE           = ConvertDamageType(21);
    damagetype         DAMAGE_TYPE_DEMOLITION          = ConvertDamageType(22);
    damagetype         DAMAGE_TYPE_SLOW_POISON         = ConvertDamageType(23);
    damagetype         DAMAGE_TYPE_SPIRIT_LINK         = ConvertDamageType(24);
    damagetype         DAMAGE_TYPE_SHADOW_STRIKE       = ConvertDamageType(25);
    damagetype         DAMAGE_TYPE_UNIVERSAL           = ConvertDamageType(26);
    weapontype         WEAPON_TYPE_WHOKNOWS            = ConvertWeaponType(0);
    weapontype         WEAPON_TYPE_METAL_LIGHT_CHOP    = ConvertWeaponType(1);
    weapontype         WEAPON_TYPE_METAL_MEDIUM_CHOP   = ConvertWeaponType(2);
    weapontype         WEAPON_TYPE_METAL_HEAVY_CHOP    = ConvertWeaponType(3);
    weapontype         WEAPON_TYPE_METAL_LIGHT_SLICE   = ConvertWeaponType(4);
    weapontype         WEAPON_TYPE_METAL_MEDIUM_SLICE  = ConvertWeaponType(5);
    weapontype         WEAPON_TYPE_METAL_HEAVY_SLICE   = ConvertWeaponType(6);
    weapontype         WEAPON_TYPE_METAL_MEDIUM_BASH   = ConvertWeaponType(7);
    weapontype         WEAPON_TYPE_METAL_HEAVY_BASH    = ConvertWeaponType(8);
    weapontype         WEAPON_TYPE_METAL_MEDIUM_STAB   = ConvertWeaponType(9);
    weapontype         WEAPON_TYPE_METAL_HEAVY_STAB    = ConvertWeaponType(10);
    weapontype         WEAPON_TYPE_WOOD_LIGHT_SLICE    = ConvertWeaponType(11);
    weapontype         WEAPON_TYPE_WOOD_MEDIUM_SLICE   = ConvertWeaponType(12);
    weapontype         WEAPON_TYPE_WOOD_HEAVY_SLICE    = ConvertWeaponType(13);
    weapontype         WEAPON_TYPE_WOOD_LIGHT_BASH     = ConvertWeaponType(14);
    weapontype         WEAPON_TYPE_WOOD_MEDIUM_BASH    = ConvertWeaponType(15);
    weapontype         WEAPON_TYPE_WOOD_HEAVY_BASH     = ConvertWeaponType(16);
    weapontype         WEAPON_TYPE_WOOD_LIGHT_STAB     = ConvertWeaponType(17);
    weapontype         WEAPON_TYPE_WOOD_MEDIUM_STAB    = ConvertWeaponType(18);
    weapontype         WEAPON_TYPE_CLAW_LIGHT_SLICE    = ConvertWeaponType(19);
    weapontype         WEAPON_TYPE_CLAW_MEDIUM_SLICE   = ConvertWeaponType(20);
    weapontype         WEAPON_TYPE_CLAW_HEAVY_SLICE    = ConvertWeaponType(21);
    weapontype         WEAPON_TYPE_AXE_MEDIUM_CHOP     = ConvertWeaponType(22);
    weapontype         WEAPON_TYPE_ROCK_HEAVY_BASH     = ConvertWeaponType(23);
    pathingtype        PATHING_TYPE_ANY                = ConvertPathingType(0);
    pathingtype        PATHING_TYPE_WALKABILITY        = ConvertPathingType(1);
    pathingtype        PATHING_TYPE_FLYABILITY         = ConvertPathingType(2);
    pathingtype        PATHING_TYPE_BUILDABILITY       = ConvertPathingType(3);
    pathingtype        PATHING_TYPE_PEONHARVESTPATHING = ConvertPathingType(4);
    pathingtype        PATHING_TYPE_BLIGHTPATHING      = ConvertPathingType(5);
    pathingtype        PATHING_TYPE_FLOATABILITY       = ConvertPathingType(6);
    pathingtype        PATHING_TYPE_AMPHIBIOUSPATHING  = ConvertPathingType(7);
//===================================================
// Map Setup Constants    
//===================================================
    racepreference     RACE_PREF_HUMAN                     = ConvertRacePref(1);
    racepreference     RACE_PREF_ORC                       = ConvertRacePref(2);
    racepreference     RACE_PREF_NIGHTELF                  = ConvertRacePref(4);
    racepreference     RACE_PREF_UNDEAD                    = ConvertRacePref(8);
    racepreference     RACE_PREF_DEMON                     = ConvertRacePref(16);
    racepreference     RACE_PREF_RANDOM                    = ConvertRacePref(32);
    racepreference     RACE_PREF_USER_SELECTABLE           = ConvertRacePref(64);
    gametype           GAME_TYPE_MELEE                     = ConvertGameType(1);
    gametype           GAME_TYPE_FFA                       = ConvertGameType(2);
    gametype           GAME_TYPE_USE_MAP_SETTINGS          = ConvertGameType(4);
    gametype           GAME_TYPE_BLIZ                      = ConvertGameType(8);
    gametype           GAME_TYPE_ONE_ON_ONE                = ConvertGameType(16);
    gametype           GAME_TYPE_TWO_TEAM_PLAY             = ConvertGameType(32);
    gametype           GAME_TYPE_THREE_TEAM_PLAY           = ConvertGameType(64);
    gametype           GAME_TYPE_FOUR_TEAM_PLAY            = ConvertGameType(128);
    mapflag            MAP_FOG_HIDE_TERRAIN                = ConvertMapFlag(1);
    mapflag            MAP_FOG_MAP_EXPLORED                = ConvertMapFlag(2);
    mapflag            MAP_FOG_ALWAYS_VISIBLE              = ConvertMapFlag(4);
    mapflag            MAP_USE_HANDICAPS                   = ConvertMapFlag(8);
    mapflag            MAP_OBSERVERS                       = ConvertMapFlag(16);
    mapflag            MAP_OBSERVERS_ON_DEATH              = ConvertMapFlag(32);
    mapflag            MAP_FIXED_COLORS                    = ConvertMapFlag(128);
    
    mapflag            MAP_LOCK_RESOURCE_TRADING           = ConvertMapFlag(256);
    mapflag            MAP_RESOURCE_TRADING_ALLIES_ONLY    = ConvertMapFlag(512);
    mapflag            MAP_LOCK_ALLIANCE_CHANGES           = ConvertMapFlag(1024);
    mapflag            MAP_ALLIANCE_CHANGES_HIDDEN         = ConvertMapFlag(2048);
    mapflag            MAP_CHEATS                          = ConvertMapFlag(4096);
    mapflag            MAP_CHEATS_HIDDEN                   = ConvertMapFlag(8192);
    mapflag            MAP_LOCK_SPEED                      = ConvertMapFlag(8192*2);
    mapflag            MAP_LOCK_RANDOM_SEED                = ConvertMapFlag(8192*4);
    mapflag            MAP_SHARED_ADVANCED_CONTROL         = ConvertMapFlag(8192*8);
    mapflag            MAP_RANDOM_HERO                     = ConvertMapFlag(8192*16);
    mapflag            MAP_RANDOM_RACES                    = ConvertMapFlag(8192*32);
    mapflag            MAP_RELOADED                        = ConvertMapFlag(8192*64);
    placement          MAP_PLACEMENT_RANDOM                = ConvertPlacement(0);   // random among all slots;
    placement          MAP_PLACEMENT_FIXED                 = ConvertPlacement(1);   // player 0 in start loc 0...;
    placement          MAP_PLACEMENT_USE_MAP_SETTINGS      = ConvertPlacement(2);   // whatever was specified by the script;
    placement          MAP_PLACEMENT_TEAMS_TOGETHER        = ConvertPlacement(3);   // random with allies next to each other    ;
    startlocprio       MAP_LOC_PRIO_LOW                    = ConvertStartLocPrio(0);
    startlocprio       MAP_LOC_PRIO_HIGH                   = ConvertStartLocPrio(1);
    startlocprio       MAP_LOC_PRIO_NOT                    = ConvertStartLocPrio(2);
    mapdensity         MAP_DENSITY_NONE                    = ConvertMapDensity(0);
    mapdensity         MAP_DENSITY_LIGHT                   = ConvertMapDensity(1);
    mapdensity         MAP_DENSITY_MEDIUM                  = ConvertMapDensity(2);
    mapdensity         MAP_DENSITY_HEAVY                   = ConvertMapDensity(3);
    gamedifficulty     MAP_DIFFICULTY_EASY                 = ConvertGameDifficulty(0);
    gamedifficulty     MAP_DIFFICULTY_NORMAL               = ConvertGameDifficulty(1);
    gamedifficulty     MAP_DIFFICULTY_HARD                 = ConvertGameDifficulty(2);
    gamedifficulty     MAP_DIFFICULTY_INSANE               = ConvertGameDifficulty(3);
    gamespeed          MAP_SPEED_SLOWEST                   = ConvertGameSpeed(0);
    gamespeed          MAP_SPEED_SLOW                      = ConvertGameSpeed(1);
    gamespeed          MAP_SPEED_NORMAL                    = ConvertGameSpeed(2);
    gamespeed          MAP_SPEED_FAST                      = ConvertGameSpeed(3);
    gamespeed          MAP_SPEED_FASTEST                   = ConvertGameSpeed(4);
//===================================================
// Game, Player, and Unit States
//
// For use with TriggerRegister<X>StateEvent
//
//===================================================
    igamestate GAME_STATE_DIVINE_INTERVENTION          = ConvertIGameState(0);
    igamestate GAME_STATE_DISCONNECTED                 = ConvertIGameState(1);
    fgamestate GAME_STATE_TIME_OF_DAY                  = ConvertFGameState(2);
    playerstate PLAYER_STATE_GAME_RESULT               = ConvertPlayerState(0);
    unitstate UNIT_STATE_LIFE                          = ConvertUnitState(0);
    unitstate UNIT_STATE_MAX_LIFE                      = ConvertUnitState(1);
    unitstate UNIT_STATE_MANA                          = ConvertUnitState(2);
    unitstate UNIT_STATE_MAX_MANA                      = ConvertUnitState(3);
    aidifficulty AI_DIFFICULTY_NEWBIE                  = ConvertAIDifficulty(0);
    aidifficulty AI_DIFFICULTY_NORMAL                  = ConvertAIDifficulty(1);
    aidifficulty AI_DIFFICULTY_INSANE                  = ConvertAIDifficulty(2);
    // player score values
    playerscore PLAYER_SCORE_UNITS_TRAINED             = ConvertPlayerScore(0);
    playerscore PLAYER_SCORE_UNITS_KILLED              = ConvertPlayerScore(1);
    playerscore PLAYER_SCORE_STRUCT_BUILT              = ConvertPlayerScore(2);
    playerscore PLAYER_SCORE_STRUCT_RAZED              = ConvertPlayerScore(3);
    playerscore PLAYER_SCORE_TECH_PERCENT              = ConvertPlayerScore(4);
    playerscore PLAYER_SCORE_FOOD_MAXPROD              = ConvertPlayerScore(5);
    playerscore PLAYER_SCORE_FOOD_MAXUSED              = ConvertPlayerScore(6);
    playerscore PLAYER_SCORE_HEROES_KILLED             = ConvertPlayerScore(7);
    playerscore PLAYER_SCORE_ITEMS_GAINED              = ConvertPlayerScore(8);
    playerscore PLAYER_SCORE_MERCS_HIRED               = ConvertPlayerScore(9);
    playerscore PLAYER_SCORE_GOLD_MINED_TOTAL          = ConvertPlayerScore(10);
    playerscore PLAYER_SCORE_GOLD_MINED_UPKEEP         = ConvertPlayerScore(11);
    playerscore PLAYER_SCORE_GOLD_LOST_UPKEEP          = ConvertPlayerScore(12);
    playerscore PLAYER_SCORE_GOLD_LOST_TAX             = ConvertPlayerScore(13);
    playerscore PLAYER_SCORE_GOLD_GIVEN                = ConvertPlayerScore(14);
    playerscore PLAYER_SCORE_GOLD_RECEIVED             = ConvertPlayerScore(15);
    playerscore PLAYER_SCORE_LUMBER_TOTAL              = ConvertPlayerScore(16);
    playerscore PLAYER_SCORE_LUMBER_LOST_UPKEEP        = ConvertPlayerScore(17);
    playerscore PLAYER_SCORE_LUMBER_LOST_TAX           = ConvertPlayerScore(18);
    playerscore PLAYER_SCORE_LUMBER_GIVEN              = ConvertPlayerScore(19);
    playerscore PLAYER_SCORE_LUMBER_RECEIVED           = ConvertPlayerScore(20);
    playerscore PLAYER_SCORE_UNIT_TOTAL                = ConvertPlayerScore(21);
    playerscore PLAYER_SCORE_HERO_TOTAL                = ConvertPlayerScore(22);
    playerscore PLAYER_SCORE_RESOURCE_TOTAL            = ConvertPlayerScore(23);
    playerscore PLAYER_SCORE_TOTAL                     = ConvertPlayerScore(24);
        
//===================================================
// Game, Player and Unit Events
//
//  When an event causes a trigger to fire these
//  values allow the action code to determine which
//  event was dispatched and therefore which set of
//  native functions should be used to get information
//  about the event.
//
// Do NOT change the order or value of these constants
// without insuring that the JASS_GAME_EVENTS_WAR3 enum
// is changed to match.
//
//===================================================
    //===================================================
    // For use with TriggerRegisterGameEvent    
    //===================================================    
    gameevent EVENT_GAME_VICTORY                       = ConvertGameEvent(0);
    gameevent EVENT_GAME_END_LEVEL                     = ConvertGameEvent(1);
    gameevent EVENT_GAME_VARIABLE_LIMIT                = ConvertGameEvent(2);
    gameevent EVENT_GAME_STATE_LIMIT                   = ConvertGameEvent(3)   ;
    gameevent EVENT_GAME_TIMER_EXPIRED                 = ConvertGameEvent(4);
    gameevent EVENT_GAME_ENTER_REGION                  = ConvertGameEvent(5);
    gameevent EVENT_GAME_LEAVE_REGION                  = ConvertGameEvent(6);
    gameevent EVENT_GAME_TRACKABLE_HIT                 = ConvertGameEvent(7);
    gameevent EVENT_GAME_TRACKABLE_TRACK               = ConvertGameEvent(8);
    gameevent EVENT_GAME_SHOW_SKILL                    = ConvertGameEvent(9)    ;
    gameevent EVENT_GAME_BUILD_SUBMENU                 = ConvertGameEvent(10);
    //===================================================
    // For use with TriggerRegisterPlayerEvent
    //===================================================
    playerevent EVENT_PLAYER_STATE_LIMIT               = ConvertPlayerEvent(11);
    playerevent EVENT_PLAYER_ALLIANCE_CHANGED          = ConvertPlayerEvent(12);
    playerevent EVENT_PLAYER_DEFEAT                    = ConvertPlayerEvent(13);
    playerevent EVENT_PLAYER_VICTORY                   = ConvertPlayerEvent(14);
    playerevent EVENT_PLAYER_LEAVE                     = ConvertPlayerEvent(15);
    playerevent EVENT_PLAYER_CHAT                      = ConvertPlayerEvent(16);
    playerevent EVENT_PLAYER_END_CINEMATIC             = ConvertPlayerEvent(17);
    //===================================================
    // For use with TriggerRegisterPlayerUnitEvent
    //===================================================
    playerunitevent EVENT_PLAYER_UNIT_ATTACKED                 = ConvertPlayerUnitEvent(18);
    playerunitevent EVENT_PLAYER_UNIT_RESCUED                  = ConvertPlayerUnitEvent(19);
    playerunitevent EVENT_PLAYER_UNIT_DEATH                    = ConvertPlayerUnitEvent(20);
    playerunitevent EVENT_PLAYER_UNIT_DECAY                    = ConvertPlayerUnitEvent(21);
    playerunitevent EVENT_PLAYER_UNIT_DETECTED                 = ConvertPlayerUnitEvent(22);
    playerunitevent EVENT_PLAYER_UNIT_HIDDEN                   = ConvertPlayerUnitEvent(23);
    playerunitevent EVENT_PLAYER_UNIT_SELECTED                 = ConvertPlayerUnitEvent(24);
    playerunitevent EVENT_PLAYER_UNIT_DESELECTED               = ConvertPlayerUnitEvent(25);
    playerunitevent EVENT_PLAYER_UNIT_CONSTRUCT_START          = ConvertPlayerUnitEvent(26);
    playerunitevent EVENT_PLAYER_UNIT_CONSTRUCT_CANCEL         = ConvertPlayerUnitEvent(27);
    playerunitevent EVENT_PLAYER_UNIT_CONSTRUCT_FINISH         = ConvertPlayerUnitEvent(28);
    playerunitevent EVENT_PLAYER_UNIT_UPGRADE_START            = ConvertPlayerUnitEvent(29);
    playerunitevent EVENT_PLAYER_UNIT_UPGRADE_CANCEL           = ConvertPlayerUnitEvent(30);
    playerunitevent EVENT_PLAYER_UNIT_UPGRADE_FINISH           = ConvertPlayerUnitEvent(31);
    playerunitevent EVENT_PLAYER_UNIT_TRAIN_START              = ConvertPlayerUnitEvent(32);
    playerunitevent EVENT_PLAYER_UNIT_TRAIN_CANCEL             = ConvertPlayerUnitEvent(33);
    playerunitevent EVENT_PLAYER_UNIT_TRAIN_FINISH             = ConvertPlayerUnitEvent(34);
    playerunitevent EVENT_PLAYER_UNIT_RESEARCH_START           = ConvertPlayerUnitEvent(35);
    playerunitevent EVENT_PLAYER_UNIT_RESEARCH_CANCEL          = ConvertPlayerUnitEvent(36);
    playerunitevent EVENT_PLAYER_UNIT_RESEARCH_FINISH          = ConvertPlayerUnitEvent(37);
    playerunitevent EVENT_PLAYER_UNIT_ISSUED_ORDER             = ConvertPlayerUnitEvent(38);
    playerunitevent EVENT_PLAYER_UNIT_ISSUED_POINT_ORDER       = ConvertPlayerUnitEvent(39);
    playerunitevent EVENT_PLAYER_UNIT_ISSUED_TARGET_ORDER      = ConvertPlayerUnitEvent(40);
    playerunitevent EVENT_PLAYER_UNIT_ISSUED_UNIT_ORDER        = ConvertPlayerUnitEvent(40);    // for compat;
    playerunitevent EVENT_PLAYER_HERO_LEVEL                    = ConvertPlayerUnitEvent(41);
    playerunitevent EVENT_PLAYER_HERO_SKILL                    = ConvertPlayerUnitEvent(42);
    playerunitevent EVENT_PLAYER_HERO_REVIVABLE                = ConvertPlayerUnitEvent(43);
    playerunitevent EVENT_PLAYER_HERO_REVIVE_START             = ConvertPlayerUnitEvent(44);
    playerunitevent EVENT_PLAYER_HERO_REVIVE_CANCEL            = ConvertPlayerUnitEvent(45);
    playerunitevent EVENT_PLAYER_HERO_REVIVE_FINISH            = ConvertPlayerUnitEvent(46);
    playerunitevent EVENT_PLAYER_UNIT_SUMMON                   = ConvertPlayerUnitEvent(47);
    playerunitevent EVENT_PLAYER_UNIT_DROP_ITEM                = ConvertPlayerUnitEvent(48);
    playerunitevent EVENT_PLAYER_UNIT_PICKUP_ITEM              = ConvertPlayerUnitEvent(49);
    playerunitevent EVENT_PLAYER_UNIT_USE_ITEM                 = ConvertPlayerUnitEvent(50);
    playerunitevent EVENT_PLAYER_UNIT_LOADED                   = ConvertPlayerUnitEvent(51);
    
    //===================================================
    // For use with TriggerRegisterUnitEvent
    //===================================================
    unitevent EVENT_UNIT_DAMAGED                               = ConvertUnitEvent(52);
    unitevent EVENT_UNIT_DEATH                                 = ConvertUnitEvent(53);
    unitevent EVENT_UNIT_DECAY                                 = ConvertUnitEvent(54);
    unitevent EVENT_UNIT_DETECTED                              = ConvertUnitEvent(55);
    unitevent EVENT_UNIT_HIDDEN                                = ConvertUnitEvent(56);
    unitevent EVENT_UNIT_SELECTED                              = ConvertUnitEvent(57);
    unitevent EVENT_UNIT_DESELECTED                            = ConvertUnitEvent(58);
                                                                        
    unitevent EVENT_UNIT_STATE_LIMIT                           = ConvertUnitEvent(59)                                                                        ;
    // Events which may have a filter for the "other unit"              
    //                                                                  
    unitevent EVENT_UNIT_ACQUIRED_TARGET                       = ConvertUnitEvent(60);
    unitevent EVENT_UNIT_TARGET_IN_RANGE                       = ConvertUnitEvent(61);
    unitevent EVENT_UNIT_ATTACKED                              = ConvertUnitEvent(62);
    unitevent EVENT_UNIT_RESCUED                               = ConvertUnitEvent(63);
                                                                        
    unitevent EVENT_UNIT_CONSTRUCT_CANCEL                      = ConvertUnitEvent(64);
    unitevent EVENT_UNIT_CONSTRUCT_FINISH                      = ConvertUnitEvent(65);
                                                                        
    unitevent EVENT_UNIT_UPGRADE_START                         = ConvertUnitEvent(66);
    unitevent EVENT_UNIT_UPGRADE_CANCEL                        = ConvertUnitEvent(67);
    unitevent EVENT_UNIT_UPGRADE_FINISH                        = ConvertUnitEvent(68);
                                                                        
    // Events which involve the specified unit performing               
    // training of other units                                          
    //                                                                  
    unitevent EVENT_UNIT_TRAIN_START                           = ConvertUnitEvent(69);
    unitevent EVENT_UNIT_TRAIN_CANCEL                          = ConvertUnitEvent(70);
    unitevent EVENT_UNIT_TRAIN_FINISH                          = ConvertUnitEvent(71);
                                                                        
    unitevent EVENT_UNIT_RESEARCH_START                        = ConvertUnitEvent(72);
    unitevent EVENT_UNIT_RESEARCH_CANCEL                       = ConvertUnitEvent(73);
    unitevent EVENT_UNIT_RESEARCH_FINISH                       = ConvertUnitEvent(74);
                                                                        
    unitevent EVENT_UNIT_ISSUED_ORDER                          = ConvertUnitEvent(75);
    unitevent EVENT_UNIT_ISSUED_POINT_ORDER                    = ConvertUnitEvent(76);
    unitevent EVENT_UNIT_ISSUED_TARGET_ORDER                   = ConvertUnitEvent(77);
                                                                       
    unitevent EVENT_UNIT_HERO_LEVEL                            = ConvertUnitEvent(78);
    unitevent EVENT_UNIT_HERO_SKILL                            = ConvertUnitEvent(79);
                                                                        
    unitevent EVENT_UNIT_HERO_REVIVABLE                        = ConvertUnitEvent(80);
    unitevent EVENT_UNIT_HERO_REVIVE_START                     = ConvertUnitEvent(81);
    unitevent EVENT_UNIT_HERO_REVIVE_CANCEL                    = ConvertUnitEvent(82);
    unitevent EVENT_UNIT_HERO_REVIVE_FINISH                    = ConvertUnitEvent(83);
                                                                        
    unitevent EVENT_UNIT_SUMMON                                = ConvertUnitEvent(84);
                                                                        
    unitevent EVENT_UNIT_DROP_ITEM                             = ConvertUnitEvent(85);
    unitevent EVENT_UNIT_PICKUP_ITEM                           = ConvertUnitEvent(86);
    unitevent EVENT_UNIT_USE_ITEM                              = ConvertUnitEvent(87);
    unitevent EVENT_UNIT_LOADED                                = ConvertUnitEvent(88);
    widgetevent EVENT_WIDGET_DEATH                             = ConvertWidgetEvent(89);
    dialogevent EVENT_DIALOG_BUTTON_CLICK                      = ConvertDialogEvent(90);
    dialogevent EVENT_DIALOG_CLICK                             = ConvertDialogEvent(91);
    //===================================================
    // Frozen Throne Expansion Events
    // Need to be added here to preserve compat
    //===================================================
    //===================================================
    // For use with TriggerRegisterGameEvent    
    //===================================================    
    gameevent          EVENT_GAME_LOADED                       = ConvertGameEvent(256);
    gameevent          EVENT_GAME_TOURNAMENT_FINISH_SOON       = ConvertGameEvent(257);
    gameevent          EVENT_GAME_TOURNAMENT_FINISH_NOW        = ConvertGameEvent(258);
    gameevent          EVENT_GAME_SAVE                         = ConvertGameEvent(259);
    //===================================================
    // For use with TriggerRegisterPlayerEvent
    //===================================================
    playerevent        EVENT_PLAYER_ARROW_LEFT_DOWN            = ConvertPlayerEvent(261);
    playerevent        EVENT_PLAYER_ARROW_LEFT_UP              = ConvertPlayerEvent(262);
    playerevent        EVENT_PLAYER_ARROW_RIGHT_DOWN           = ConvertPlayerEvent(263);
    playerevent        EVENT_PLAYER_ARROW_RIGHT_UP             = ConvertPlayerEvent(264);
    playerevent        EVENT_PLAYER_ARROW_DOWN_DOWN            = ConvertPlayerEvent(265);
    playerevent        EVENT_PLAYER_ARROW_DOWN_UP              = ConvertPlayerEvent(266);
    playerevent        EVENT_PLAYER_ARROW_UP_DOWN              = ConvertPlayerEvent(267);
    playerevent        EVENT_PLAYER_ARROW_UP_UP                = ConvertPlayerEvent(268);
    //===================================================
    // For use with TriggerRegisterPlayerUnitEvent
    //===================================================
    playerunitevent    EVENT_PLAYER_UNIT_SELL                  = ConvertPlayerUnitEvent(269);
    playerunitevent    EVENT_PLAYER_UNIT_CHANGE_OWNER          = ConvertPlayerUnitEvent(270);
    playerunitevent    EVENT_PLAYER_UNIT_SELL_ITEM             = ConvertPlayerUnitEvent(271);
    playerunitevent    EVENT_PLAYER_UNIT_SPELL_CHANNEL         = ConvertPlayerUnitEvent(272);
    playerunitevent    EVENT_PLAYER_UNIT_SPELL_CAST            = ConvertPlayerUnitEvent(273);
    playerunitevent    EVENT_PLAYER_UNIT_SPELL_EFFECT          = ConvertPlayerUnitEvent(274);
    playerunitevent    EVENT_PLAYER_UNIT_SPELL_FINISH          = ConvertPlayerUnitEvent(275);
    playerunitevent    EVENT_PLAYER_UNIT_SPELL_ENDCAST         = ConvertPlayerUnitEvent(276);
    playerunitevent    EVENT_PLAYER_UNIT_PAWN_ITEM             = ConvertPlayerUnitEvent(277);
    //===================================================
    // For use with TriggerRegisterUnitEvent
    //===================================================
    unitevent          EVENT_UNIT_SELL                         = ConvertUnitEvent(286);
    unitevent          EVENT_UNIT_CHANGE_OWNER                 = ConvertUnitEvent(287);
    unitevent          EVENT_UNIT_SELL_ITEM                    = ConvertUnitEvent(288);
    unitevent          EVENT_UNIT_SPELL_CHANNEL                = ConvertUnitEvent(289);
    unitevent          EVENT_UNIT_SPELL_CAST                   = ConvertUnitEvent(290);
    unitevent          EVENT_UNIT_SPELL_EFFECT                 = ConvertUnitEvent(291);
    unitevent          EVENT_UNIT_SPELL_FINISH                 = ConvertUnitEvent(292);
    unitevent          EVENT_UNIT_SPELL_ENDCAST                = ConvertUnitEvent(293);
    unitevent          EVENT_UNIT_PAWN_ITEM                    = ConvertUnitEvent(294);
    //===================================================
    // Limit Event API constants    
    // variable, player state, game state, and unit state events
    // ( do NOT change the order of these... )
    //===================================================
    limitop LESS_THAN                              = ConvertLimitOp(0);
    limitop LESS_THAN_OR_EQUAL                     = ConvertLimitOp(1);
    limitop EQUAL                                  = ConvertLimitOp(2);
    limitop GREATER_THAN_OR_EQUAL                  = ConvertLimitOp(3);
    limitop GREATER_THAN                           = ConvertLimitOp(4);
    limitop NOT_EQUAL                              = ConvertLimitOp(5);
//===================================================
// Unit Type Constants for use with ChooseRandomItemEx()
//===================================================
    itemtype ITEM_TYPE_PERMANENT                   = ConvertItemType(0);
    itemtype ITEM_TYPE_CHARGED                     = ConvertItemType(1);
    itemtype ITEM_TYPE_POWERUP                     = ConvertItemType(2);
    itemtype ITEM_TYPE_ARTIFACT                    = ConvertItemType(3);
    itemtype ITEM_TYPE_PURCHASABLE                 = ConvertItemType(4);
    itemtype ITEM_TYPE_CAMPAIGN                    = ConvertItemType(5);
    itemtype ITEM_TYPE_MISCELLANEOUS               = ConvertItemType(6);
    itemtype ITEM_TYPE_UNKNOWN                     = ConvertItemType(7);
    itemtype ITEM_TYPE_ANY                         = ConvertItemType(8);
    // Deprecated, should use ITEM_TYPE_POWERUP
    itemtype ITEM_TYPE_TOME                        = ConvertItemType(2);
//===================================================
// Animatable Camera Fields
//===================================================
    camerafield CAMERA_FIELD_TARGET_DISTANCE       = ConvertCameraField(0);
    camerafield CAMERA_FIELD_FARZ                  = ConvertCameraField(1);
    camerafield CAMERA_FIELD_ANGLE_OF_ATTACK       = ConvertCameraField(2);
    camerafield CAMERA_FIELD_FIELD_OF_VIEW         = ConvertCameraField(3);
    camerafield CAMERA_FIELD_ROLL                  = ConvertCameraField(4);
    camerafield CAMERA_FIELD_ROTATION              = ConvertCameraField(5);
    camerafield CAMERA_FIELD_ZOFFSET               = ConvertCameraField(6);
    blendmode   BLEND_MODE_NONE                    = ConvertBlendMode(0);
    blendmode   BLEND_MODE_DONT_CARE               = ConvertBlendMode(0);
    blendmode   BLEND_MODE_KEYALPHA                = ConvertBlendMode(1);
    blendmode   BLEND_MODE_BLEND                   = ConvertBlendMode(2);
    blendmode   BLEND_MODE_ADDITIVE                = ConvertBlendMode(3);
    blendmode   BLEND_MODE_MODULATE                = ConvertBlendMode(4);
    blendmode   BLEND_MODE_MODULATE_2X             = ConvertBlendMode(5);
    
    raritycontrol  RARITY_FREQUENT                 = ConvertRarityControl(0);
    raritycontrol  RARITY_RARE                     = ConvertRarityControl(1);
    texmapflags    TEXMAP_FLAG_NONE                = ConvertTexMapFlags(0);
    texmapflags    TEXMAP_FLAG_WRAP_U              = ConvertTexMapFlags(1);
    texmapflags    TEXMAP_FLAG_WRAP_V              = ConvertTexMapFlags(2);
    texmapflags    TEXMAP_FLAG_WRAP_UV             = ConvertTexMapFlags(3);
    fogstate       FOG_OF_WAR_MASKED               = ConvertFogState(1);
    fogstate       FOG_OF_WAR_FOGGED               = ConvertFogState(2);
    fogstate       FOG_OF_WAR_VISIBLE              = ConvertFogState(4);
//===================================================
// Camera Margin constants for use with GetCameraMargin
//===================================================
    integer        CAMERA_MARGIN_LEFT              = 0;
    integer        CAMERA_MARGIN_RIGHT             = 1;
    integer        CAMERA_MARGIN_TOP               = 2;
    integer        CAMERA_MARGIN_BOTTOM            = 3;
//===================================================
// Effect API constants
//===================================================
    effecttype     EFFECT_TYPE_EFFECT              = ConvertEffectType(0);
    effecttype     EFFECT_TYPE_TARGET              = ConvertEffectType(1);
    effecttype     EFFECT_TYPE_CASTER              = ConvertEffectType(2);
    effecttype     EFFECT_TYPE_SPECIAL             = ConvertEffectType(3);
    effecttype     EFFECT_TYPE_AREA_EFFECT         = ConvertEffectType(4);
    effecttype     EFFECT_TYPE_MISSILE             = ConvertEffectType(5);
    effecttype     EFFECT_TYPE_LIGHTNING           = ConvertEffectType(6);
    soundtype      SOUND_TYPE_EFFECT               = ConvertSoundType(0);
    soundtype      SOUND_TYPE_EFFECT_LOOPED        = ConvertSoundType(1);
quest CreateQuest();
void DestroyQuest(quest whichQuest);
void QuestSetTitle(quest whichQuest, string title);
void QuestSetDescription(quest whichQuest, string description);
void QuestSetIconPath(quest whichQuest, string iconPath);
void QuestSetRequired(quest whichQuest, boolean required);
void QuestSetCompleted(quest whichQuest, boolean completed);
void QuestSetDiscovered(quest whichQuest, boolean discovered);
void QuestSetFailed(quest whichQuest, boolean failed);
void QuestSetEnabled(quest whichQuest, boolean enabled);
    
boolean IsQuestRequired(quest whichQuest);
boolean IsQuestCompleted(quest whichQuest);
boolean IsQuestDiscovered(quest whichQuest);
boolean IsQuestFailed(quest whichQuest);
boolean IsQuestEnabled(quest whichQuest);
item UnitAddItemById(unit whichUnit, int itemId);
boolean UnitAddItemToSlotById(unit whichUnit, int itemId, int itemSlot);
void UnitRemoveItem(unit whichUnit, item whichItem);
item UnitRemoveItemFromSlot(unit whichUnit, int itemSlot);
boolean UnitHasItem(unit whichUnit, item whichItem);
item UnitItemInSlot(unit whichUnit, int itemSlot);
int UnitInventorySize(unit whichUnit);

//--------------------------------------------------------------------------------------------------
// Custom Script: Common.j
//--------------------------------------------------------------------------------------------------
gamedifficulty GetDefaultDifficulty();
void SetDefaultDifficulty(gamedifficulty g);
string I2S (int i) {
    return IntToString(i);
}
player GetLocalPlayer(){
    return c_playerAny;
}
string GetLocalizedString(string source){
    //unused
    return source;
}
int GetLocalizedHotkey(string source){
    //unused
    return 0;
}
//============================================================================
// Randomization API
int GetRandomInt(int lowBound, int highBound){
    return RandomInt(lowBound,highBound);
}
fixed GetRandomReal(fixed lowBound, fixed highBound){
    return RandomFixed(lowBound,highBound);
}
void StartSound (soundhandle soundHandle){
    point p;
    if(!DataTableGetBool(true,"GAw3_Sound_"+soundHandle+"_Killed")){
        if(DataTableValueExists(true,"GAw3_Sound_"+soundHandle+"_Unit")){
            SoundPlayOnUnit(SoundLink(soundHandle,-1), (PlayerGroupAll()), DataTableGetUnit(true,"GAw3_Sound_"+soundHandle+"_Unit"), 0.0, 100.0, 0.0);
        }else if(DataTableValueExists(true,"GAw3_Sound_"+soundHandle+"_Position")){
        p=DataTableGetPoint(true,"GAw3_Sound_"+soundHandle+"_Position");	SoundPlayAtPoint(SoundLink(soundHandle,-1),PlayerGroupAll(),DataTableGetPoint(true,"GAw3_Sound_"+soundHandle+"_Position"),PointGetHeight(p),100,0);
        }else{
            SoundPlay(SoundLink(soundHandle,-1), PlayerGroupAll(), 100.0, 0.0);
        }
        DataTableSetSound(true,"GAw3_Sound_"+soundHandle,SoundLastPlayed ());
        if(DataTableValueExists(true,"GAw3_Sound_"+soundHandle+"_Vol")){
            SoundSetVolume(SoundLastPlayed (),DataTableGetFixed(true,"GAw3_Sound_"+soundHandle+"_Vol"));
        }
    }
}
void SetUnitPositionLoc(unit whichUnit, location whichLocation){
    UnitIssueOrder(whichUnit, Order(AbilityCommand("stop", 0)), c_orderQueueReplace);
    UnitSetPosition(whichUnit, whichLocation, false);
}
location Location(real x, real y){
    return Point(x,y);
}
fixed GetDestructableX(destructable d){
    return PointGetX(UnitGetPosition(d));
}
fixed GetDestructableY(destructable d){
    return PointGetY(UnitGetPosition(d));
}
void SetUnitPathing(unit whichUnit, boolean flag){
    string buff="SetUnitPathing";
    if (flag){
   UnitBehaviorRemove(whichUnit,buff,0);
    }else{
   UnitBehaviorAdd(whichUnit,buff,whichUnit,1);
    }
}
void ClearMapMusic(){
    SoundtrackPause(PlayerGroupAll(), c_soundtrackCategoryMusic, true, true);
}
void PlayThematicMusic(string musicFileName){
	string link=musicFileName;
	if(musicFileName=="Sound\\Music\\mp3Music\\ArthasTheme.mp3"){link="MusicThemeArthas";}
	if(musicFileName=="Sound\\Music\\mp3Music\\BloodElfTheme.mp3"){link="MusicThemeBloodElf";}
	if(musicFileName=="Sound\\Music\\mp3Music\\Comradeship.mp3"){link="MusicThemeComradeship";}
	if(musicFileName=="Sound\\Music\\mp3Music\\Credits.mp3"){link="MusicThemeCredits";}
	if(musicFileName=="Sound\\Music\\mp3Music\\DarkAgents.mp3"){link="MusicThemeDarkAgents";}
	if(musicFileName=="Sound\\Music\\mp3Music\\DarkVictory.mp3"){link="MusicThemeDarkVictory";}
	if(musicFileName=="Sound\\Music\\mp3Music\\Doom.mp3"){link="MusicThemeDoom";}
	if(musicFileName=="Sound\\Music\\mp3Music\\HeroicVictory.mp3"){link="MusicThemeHeroicVictory";}
	if(musicFileName=="Sound\\Music\\mp3Music\\Human1.mp3"){link="MusicThemeHuman1";}
	if(musicFileName=="Sound\\Music\\mp3Music\\Human2.mp3"){link="MusicThemeHuman2";}
	if(musicFileName=="Sound\\Music\\mp3Music\\Human3.mp3"){link="MusicThemeHuman3";}
	if(musicFileName=="Sound\\Music\\mp3Music\\HumanX1.mp3"){link="MusicThemeHumanX1";}
	if(musicFileName=="Sound\\Music\\mp3Music\\HumanDefeat.mp3"){link="MusicThemeDefeatHuman";}
	if(musicFileName=="Sound\\Music\\mp3Music\\HumanVictory.mp3"){link="MusicThemeVictoryHuman";}
	if(musicFileName=="Sound\\Music\\mp3Music\\IllidansTheme.mp3"){link="MusicThemeIllidan";}
	if(musicFileName=="Sound\\Music\\mp3Music\\LichKingTheme.mp3"){link="MusicThemeLichKing";}
	if(musicFileName=="Sound\\Music\\mp3Music\\MainScreen.mp3"){link="MusicThemeMainScreen";}
	if(musicFileName=="Sound\\Music\\mp3Music\\War3XMainScreen.mp3"){link="MusicThemeMainScreenX";}
	if(musicFileName=="Sound\\Music\\mp3Music\\NagaTheme.mp3"){link="MusicThemeNaga";}
	if(musicFileName=="Sound\\Music\\mp3Music\\NightElf1.mp3"){link="MusicThemeNightElf1";}
	if(musicFileName=="Sound\\Music\\mp3Music\\NightElf2.mp3"){link="MusicThemeNightElf2";}
	if(musicFileName=="Sound\\Music\\mp3Music\\NightElf3.mp3"){link="MusicThemeNightElf3";}
	if(musicFileName=="Sound\\Music\\mp3Music\\NightElfX1.mp3"){link="MusicThemeNightElfX1";}
	if(musicFileName=="Sound\\Music\\mp3Music\\NightElfDefeat.mp3"){link="MusicThemeDefeatNightElf";}
	if(musicFileName=="Sound\\Music\\mp3Music\\NightElfVictory.mp3"){link="MusicThemeVictoryNightElf";}
	if(musicFileName=="Sound\\Music\\mp3Music\\Orc1.mp3"){link="MusicThemeOrc1";}
	if(musicFileName=="Sound\\Music\\mp3Music\\Orc2.mp3"){link="MusicThemeOrc2";}
	if(musicFileName=="Sound\\Music\\mp3Music\\Orc3.mp3"){link="MusicThemeOrc3";}
	if(musicFileName=="Sound\\Music\\mp3Music\\OrcX1.mp3"){link="MusicThemeOrcX1";}
	if(musicFileName=="Sound\\Music\\mp3Music\\OrcDefeat.mp3"){link="MusicThemeDefeatOrc";}
	if(musicFileName=="Sound\\Music\\mp3Music\\OrcTheme.mp3"){link="MusicThemeOrcTheme";}
	if(musicFileName=="Sound\\Music\\mp3Music\\OrcVictory.mp3"){link="MusicThemeVictoryOrc";}
	if(musicFileName=="Sound\\Music\\mp3Music\\PursuitTheme.mp3"){link="MusicThemePersuit";}
	if(musicFileName=="Sound\\Music\\mp3Music\\SadMystery.mp3"){link="MusicThemeSadMystery";}
	if(musicFileName=="Sound\\Music\\mp3Music\\Tension.mp3"){link="MusicThemeTension";}
	if(musicFileName=="Sound\\Music\\mp3Music\\TragicConfrontation.mp3"){link="MusicThemeTragicConfrontation";}
	if(musicFileName=="Sound\\Music\\mp3Music\\Undead1.mp3"){link="MusicThemeUndead1";}
	if(musicFileName=="Sound\\Music\\mp3Music\\Undead2.mp3"){link="MusicThemeUndead2";}
	if(musicFileName=="Sound\\Music\\mp3Music\\Undead3.mp3"){link="MusicThemeUndead3";}
	if(musicFileName=="Sound\\Music\\mp3Music\\UndeadX1.mp3"){link="MusicThemeUndeadX1";}
	if(musicFileName=="Sound\\Music\\mp3Music\\UndeadDefeat.mp3"){link="MusicThemeDefeatUndead";}
	if(musicFileName=="Sound\\Music\\mp3Music\\UndeadVictory.mp3"){link="MusicThemeVictoryUndead";}
	//todo libHots_gf_PlaySoundLinkasMusic(SoundLink(link, -1), false, true);
}
void SetMapMusic(string musicName, boolean random, integer index){
    if(random){index=c_soundtrackIndexAny;}
    SoundtrackPlay (PlayerGroupAll(), c_soundtrackCategoryMusic, musicName, c_soundtrackCueAny, index, false);
}
void EnableTrigger(trigger whichTrigger){
    TriggerEnable(whichTrigger, true);
}
void DisableTrigger(trigger whichTrigger){
    TriggerEnable(whichTrigger, false);
}
boolean IsTriggerEnabled(trigger whichTrigger){
    return TriggerIsEnabled(whichTrigger);
}
boolean IssuePointOrderLoc(unit whichUnit, string ord, location whichLocation){
    order raw=GAw3_OrderStringToOrder(ord);
    order ordTarget=OrderTargetingPoint(OrderGetAbilityCommand(raw),whichLocation);
    return UnitIssueOrder(whichUnit, ordTarget, c_orderQueueReplace);
}
void SelectHeroSkill(unit whichHero, integer abilcode){
    string abil=GAw3_IntToASCII4(abilcode);
    string learn=GAw3_UnitLearnGet(whichHero);
    string path="Abil,"+learn+",InfoArray";
    int c;
    int i;
    int p=UnitGetOwner(whichHero);
    if(learn){
        c=CatalogReferenceCount(path,p);
        for(;i<c;i+=1){
            if(CatalogReferenceGet(path+"["+IntToString(i)+"].Abil",p)==abil){
                UnitIssueOrder(whichHero, Order(AbilityCommand(learn, i)), c_orderQueueReplace);
                break;
            }
        }
    }
}
player Player(integer number){
    if(number==PLAYER_NEUTRAL_PASSIVE){return 0;};
    return number+1;
}
timer CreateTimer(){
    return TimerCreate();
}
void SetUnitLookAt(unit whichUnit, string whichBone, unit lookAtTarget, real offsetX, real offsetY, real offsetZ){
    string type;
    if(whichBone=="bone_head"){
        type="FastHeadOnly";
    }else{
        type="FastStanding";
    }
    libNtve_gf_MakeUnitLookAtPoint(whichUnit, type, libNtve_gf_PointWithZOffset(PointWithOffset(UnitGetPosition(lookAtTarget), offsetX, offsetY), offsetZ));
}
void ResetUnitLookAt     ( unit whichUnit ){
    ActorLookAtTypeStop(libNtve_gf_MainActorofUnit(whichUnit), "FastStanding");
    ActorLookAtTypeStop(libNtve_gf_MainActorofUnit(whichUnit), "FastHeadOnly");
}
void SetDoodadAnimationRect   ( rect r, integer doodadID, string animName, boolean animRandom ){
    int flag=0;
    if(animRandom){flag=c_animFlagRandomStartOffset;}
    libNtve_gf_PlayAnimationOnDoodadsInRegion(r, GAw3_IntToASCII4(doodadID), c_animNameDefault, GAw3_ConvertAnimName(animName), flag, c_animTimeDefault);
}
void ResetToGameCamera   ( fixed duration ){
    int p;
    for(p=0;p<=15;p+=1){
        CameraApplyInfo(p, CameraInfoDefault(), duration , -1, 10.0, false);
    }
}
location CameraSetupGetDestPositionLoc   ( camerasetup whichSetup ){
    return CameraInfoGetTarget(whichSetup);
}
void CameraSetSmoothingFactor    ( fixed factor ){};
void SetUnitFacing  ( unit whichUnit, fixed facingAngle ){
    UnitSetFacing(whichUnit,facingAngle,0);
}
void TriggerWaitForSound  ( soundhandle s, real offset ){
    SoundWait(GAw3_SoundFromSoundHandle(s), offset, c_soundOffsetEnd);
    TransmissionWait(DataTableGetTransmission(true,"GAw3_Sound_"+s),0);
}
void SetUnitInvulnerable ( unit whichUnit, boolean flag ){
    UnitSetState(whichUnit, c_unitStateInvulnerable, flag);
}
void UnitRemoveBuffs( unit whichUnit, boolean removePositive, boolean removeNegative ){
    int i;
    int c=UnitBehaviorCountAll(whichUnit);
    string buff;
    string[33] pool;
    int poolCount;
    string align;
    bool isNeg;
    for(i=1;i<=c;i+=1){
        buff=UnitBehaviorGet(whichUnit,i);
        align=GAw3_BehaviorAlignment(buff);
        isNeg=align=="Negative";
        if(((CatalogFieldValueGet(c_gameCatalogBehavior, buff, "BehaviorFlags[Permanent]", c_playerAny) == "0"))&&(CatalogEntryScope(c_gameCatalogBehavior, buff) == "CBehaviorBuff")){
            if((isNeg&&removeNegative)||(!isNeg&&removePositive)){
                    poolCount+=1;
                    pool[poolCount]=buff;
            }
        }
    }
    for(i=1;i<=poolCount;i+=1){
        UnitBehaviorRemove(whichUnit,pool[i],c_unitBehaviorCountAll);
    }
}
void UnitRemoveBuffsEx( unit whichUnit, boolean removePositive, boolean removeNegative, boolean magic, boolean physical, boolean timedLife, boolean aura, boolean autoDispel ){
    //ToDO
    //if(removePositive){
        //UnitBehaviorRemoveCategory(whichUnit,c_unitBehaviorFlagUser1);
    //}
    //if(removeNegative){
        //UnitBehaviorRemoveCategory(whichUnit,c_unitBehaviorFlagUser2);
    //}
    //if(magic){
        //UnitBehaviorRemoveCategory(whichUnit,c_unitBehaviorFlagUser3);
   //}
    //if(physical){
        //UnitBehaviorRemoveCategory(whichUnit,c_unitBehaviorFlagUser4);
   //}
    //if(timedLife){
        //UnitBehaviorRemoveCategory(whichUnit,c_unitBehaviorFlagUser5);
   //}
   //if(aura){
        //UnitBehaviorRemoveCategory(whichUnit,c_unitBehaviorFlagUser6);
   //}
   //if(autoDispel){
        //UnitBehaviorRemoveCategory(whichUnit,c_unitBehaviorFlagUser7);
   //}
}
void SetUnitFacingTimed  ( unit whichUnit, fixed facingAngle, fixed duration ){
    UnitSetFacing(whichUnit,facingAngle,duration);
}
boolean IsUnitHidden(unit whichUnit){
    return UnitTestState(whichUnit,c_unitStateHidden);
}
void RemoveLocation  ( location whichLocation ){}
location GetUnitLoc ( unit whichUnit ){
    return UnitGetPosition(whichUnit);
}
void SetSoundVolume ( soundhandle soundHandle, int volume ){
    fixed vol=volume*1.27;
    SoundSetVolume(GAw3_SoundFromSoundHandle(soundHandle),vol);
    DataTableSetFixed(true,"GAw3_Sound_"+soundHandle+"_Vol",vol);
}
void ClearSelection (){
    int p;
    for(p=0;p<=15;p+=1){
        UnitClearSelection(p);
    }
}
void ForGroup( unitgroup whichGroup, code callback ){
    int c=UnitGroupCount(whichGroup,c_unitCountAll);
    int i;
    for(i=1;i<=c;i+=1){
        GAw3_EnumUnitPush();
        GAw3_EnumUnitSet(UnitGroupUnit(whichGroup,i));
        callback();
        GAw3_EnumUnitPop();
    }
}
unit GetEnumUnit(){
    int Stack=DataTableGetInt(false,"GAw3_EnumUnitStack");
    return DataTableGetUnit(false,"GAw3_EnumUnit_"+IntToString(Stack));
}
unit GetFilterUnit(){
    int Stack=DataTableGetInt(false,"GAw3_FilterUnitStack");
    return DataTableGetUnit(false,"GAw3_FilterUnit_"+IntToString(Stack));
}
unit GetEnumDestructable(){
    int Stack=DataTableGetInt(false,"GAw3_EnumDestructableStack");
    return DataTableGetUnit(false,"GAw3_EnumDestructable_"+IntToString(Stack));
}
unit GetFilterDestructable(){
    int Stack=DataTableGetInt(false,"GAw3_FilterDestructableStack");
    return DataTableGetUnit(false,"GAw3_FilterDestructable_"+IntToString(Stack));
}
item GetFilterItem(){
    int Stack=DataTableGetInt(false,"GAw3_FilterItemStack");
    return DataTableGetUnit(false,"GAw3_FilterItem_"+IntToString(Stack));
}
item GetEnumItem(){
    int Stack=DataTableGetInt(false,"GAw3_EnumItemStack");
    return DataTableGetUnit(false,"GAw3_EnumItem_"+IntToString(Stack));
}
boolean IssueImmediateOrder( unit whichUnit, string ord ){
    return UnitIssueOrder(whichUnit, GAw3_OrderStringToOrder(ord), c_orderQueueReplace);
}
void VolumeGroupReset(){
    libNtve_gf_SetAllSoundChannelVolumes(2, PlayerGroupAll(), 0.0);
}
void VolumeGroupSetVolume         ( volumegroup vgroup, fixed scale ){
    SoundChannelSetVolume(PlayerGroupAll(),vgroup,scale*100,0);
}
void AttachSoundToUnit( soundhandle soundHandle, unit whichUnit ){
    DataTableSetUnit(true,"GAw3_Sound_"+soundHandle+"_Unit",whichUnit);
}
void SetSoundPosition(soundhandle soundHandle, fixed x, fixed y, fixed z){
    point p=Point(x,y);
    PointSetHeight(p,z);
    DataTableSetPoint(true,"GAw3_Sound_"+soundHandle+"_Position",p);
}
void StopSound(soundhandle soundHandle, boolean killWhenDone, boolean fadeOut){
    sound s=GAw3_SoundFromSoundHandle(soundHandle);
    SoundStop(s,fadeOut);
    DataTableSetBool(true,"GAw3_Sound_"+soundHandle+"_Killed",killWhenDone);
}
void RegisterStackedSound(soundhandle soundHandle, boolean byPosition, fixed rectwidth, fixed rectheight){
    StartSound(soundHandle);
    //do it in Data part
}
void UnregisterStackedSound(soundhandle soundHandle, boolean byPosition, fixed rectwidth, fixed rectheight){
    StopSound(soundHandle,false,false);
    //do it in Data part
}
//============================================================================
// Game API
version VersionGet(){
    return 126;
}
boolean VersionCompatible(version whichVersion){return true;}
boolean VersionSupported(version whichVersion){return true;}
void EndGame(boolean doScoreScreen){
    int p=0;
    libNtve_gf_CinematicMode(false, PlayerGroupAll(), 0);
    for(;p<16;p+=1){
        GameOver(p,c_gameOverTie,false,doScoreScreen);
    }
}
// Async only!
void ChangeLevel(string newLevel, boolean doScoreScreen){
    int p;
    SetNextMissionDifficulty(PlayerGroupAll(),GetDefaultDifficulty());
    GameSetNextMap(newLevel);
    for(;p<16;p+=1){
        GameOver(p,c_gameOverTie,true,doScoreScreen);
    }
}
void cj_RestartGame(boolean doScoreScreen){
    RestartGame((PlayerGroupAll()));
}
void ReloadGame(){
    RestartGame((PlayerGroupAll()));
}
//============================================================================
// Game API
// %%% SetCampaignMenuRace is deprecated. It must remain to support
// old maps which use it, but all new maps should use SetCampaignMenuRaceEx
void SetCampaignMenuRace(race r){}
void SetCampaignMenuRaceEx(int campaignIndex){}
void ForceCampaignSelectScreen(){}
trigger CreateTrigger(){
    return null;
}
void SetPlayerAlliance(player sourcePlayer, player otherPlayer, alliancetype whichAllianceSetting, boolean value){
    if(whichAllianceSetting==-1){return;}
    PlayerSetAlliance(sourcePlayer,whichAllianceSetting,otherPlayer,value);
}
void SetPlayerColor (player whichPlayer, playercolor inColor){
    PlayerSetColorIndex(whichPlayer,PlayerGetColorIndex(inColor,false),false);
}
playercolor GetPlayerColor (player whichPlayer){
    return PlayerGetColorIndex(whichPlayer,false);
    //return whichPlayer;
}
//===========================================================================
void SetPlayerState(player whichPlayer, playerstate whichPlayerState, int value){
    int c=0;
    int i;
    int j;
    string entry;
    string defautVal;
    string currentVal;
    if(whichPlayerState==PLAYER_STATE_GIVES_BOUNTY){
    if(value){
        for (i=1;i<=c;i+=1) {
            entry = CatalogEntryGet(c_gameCatalogUnit,i);
            for (j=0;j<4;j+=1) {
                defautVal=CatalogFieldValueGet(c_gameCatalogUnit,entry,"KillResource["+IntToString(j)+"]",c_playerAny);
                currentVal=CatalogFieldValueGet(c_gameCatalogUnit,entry,"KillResource["+IntToString(j)+"]",whichPlayer);
                if(defautVal!=currentVal){
                    CatalogFieldValueSet(c_gameCatalogUnit,entry,"KillResource["+ IntToString(j)+"]",whichPlayer,defautVal);
                }
            }
        }
    }else{
        for (i=1;i<=c;i+=1) {
            entry = CatalogEntryGet(c_gameCatalogUnit,i);
            for (j=0;j<4;j+=1) {
                currentVal=CatalogFieldValueGet(c_gameCatalogUnit,entry,"KillResource["+IntToString(j)+"]",whichPlayer);
                if(currentVal!="0"){
                    CatalogFieldValueSet(c_gameCatalogUnit,entry,"KillResource["+ IntToString(j)+"]",whichPlayer,"0");
                }
            }
        }
    }
    }else{
        PlayerModifyPropertyInt(whichPlayer,whichPlayerState,c_playerPropOperSetTo,value);
    }
}
void SetPlayerOnScoreScreen (player whichPlayer, boolean flag){
    PlayerSetState(whichPlayer, c_playerStateShowScore, flag);
}
void RemoveGuardPosition(unit hUnit){
    AISetUnitScriptControlled(hUnit, true);
}
void RecycleGuardPosition(unit hUnit){
    AISetUnitScriptControlled(hUnit, false);
}
void RemoveAllGuardPositions(player num){
    AISetGroupScriptControlled(UnitGroup(null, num, RegionEntireMap(), GAw3_DefaultFilter,c_noMaxCount), true);
}
//============================================================================
// Group API
//
group CreateGroup();
void DestroyGroup(group whichGroup);
void GroupAddUnit(group whichGroup, unit whichUnit);
void GroupRemoveUnit(group whichGroup, unit whichUnit);
void GroupClear(group whichGroup);
void GroupEnumUnitsOfType(group whichGroup, string unitname, boolexpr filter);
void GroupEnumUnitsOfPlayer(group whichGroup, player whichPlayer, boolexpr filter);
void GroupEnumUnitsOfTypeCounted(group whichGroup, string unitname, boolexpr filter, int countLimit);
void GroupEnumUnitsInRect(group whichGroup, rect r, boolexpr filter);
void GroupEnumUnitsInRectCounted(group whichGroup, rect r, boolexpr filter, int countLimit);
void GroupEnumUnitsInRange(group whichGroup, fixed x, fixed y, fixed radius, boolexpr filter);
void GroupEnumUnitsInRangeOfLoc(group whichGroup, location whichLocation, fixed radius, boolexpr filter);
void GroupEnumUnitsInRangeCounted(group whichGroup, fixed x, fixed y, fixed radius, boolexpr filter, int countLimit);
void GroupEnumUnitsInRangeOfLocCounted(group whichGroup, location whichLocation, fixed radius, boolexpr filter, int countLimit);
void GroupEnumUnitsSelected(group whichGroup, player whichPlayer, boolexpr filter);
group CreateGroup(){
    return UnitGroupEmpty();
}
void DestroyGroup(group whichGroup){
    UnitGroupClear(whichGroup);
}
void GroupAddUnit(group whichGroup, unit whichUnit){
    UnitGroupAdd(whichGroup,whichUnit);
}
void GroupRemoveUnit(group whichGroup, unit whichUnit){
    UnitGroupRemove(whichGroup,whichUnit);
}
void GroupClear(group whichGroup){
    UnitGroupClear(whichGroup);
}
void GroupEnumUnitsOfType(group whichGroup, string unitname, boolexpr filter){
    string type=GAw3_UnitCodeNameToType(unitname);
    unitgroup ng=UnitGroup(type, c_playerAny, RegionEntireMap(),GAw3_DefaultFilter, c_noMaxCount);
    ng=GAw3_GroupEnumUnits(ng,filter);
    UnitGroupClear(whichGroup);
    UnitGroupAddUnitGroup(whichGroup,ng);
}
void GroupEnumUnitsOfPlayer(group whichGroup, player whichPlayer, boolexpr filter){
    unitgroup ng=UnitGroup(null, whichPlayer, RegionEntireMap(),GAw3_DefaultFilter, c_noMaxCount);
    ng=GAw3_GroupEnumUnits(ng,filter);
    UnitGroupClear(whichGroup);
    UnitGroupAddUnitGroup(whichGroup,ng);
}
void GroupEnumUnitsOfTypeCounted(group whichGroup, string unitname, boolexpr filter, int countLimit){
    unitgroup ng=UnitGroup(unitname, c_playerAny, RegionEntireMap(),GAw3_DefaultFilter, countLimit);
    ng=GAw3_GroupEnumUnits(ng,filter);
    UnitGroupClear(whichGroup);
    UnitGroupAddUnitGroup(whichGroup,ng);
}
void GroupEnumUnitsInRect(group whichGroup, rect r, boolexpr filter){
    unitgroup ng=UnitGroup(null, c_playerAny, r,GAw3_DefaultFilterNoHidden, c_noMaxCount);
    ng=GAw3_GroupEnumUnits(ng,filter);
    UnitGroupClear(whichGroup);
    UnitGroupAddUnitGroup(whichGroup,ng);
}
void GroupEnumUnitsInRectCounted(group whichGroup, rect r, boolexpr filter, int countLimit){
    unitgroup ng=UnitGroup(null, c_playerAny, r,GAw3_DefaultFilterNoHidden, countLimit);
    ng=GAw3_GroupEnumUnits(ng,filter);
    UnitGroupClear(whichGroup);
    UnitGroupAddUnitGroup(whichGroup,ng);
}
void GroupEnumUnitsInRange(group whichGroup, fixed x, fixed y, fixed radius, boolexpr filter){
    GroupEnumUnitsInRangeOfLoc(whichGroup,Point(x,y),radius,filter);
}
void GroupEnumUnitsInRangeOfLoc(group whichGroup, location whichLocation, fixed radius, boolexpr filter){
    GroupEnumUnitsInRangeOfLocCounted(whichGroup,whichLocation,radius,filter,c_noMaxCount);
}
void GroupEnumUnitsInRangeCounted(group whichGroup, fixed x, fixed y, fixed radius, boolexpr filter, int countLimit){
    GroupEnumUnitsInRangeOfLocCounted(whichGroup,Point(x,y),radius,filter,countLimit);
}
void GroupEnumUnitsInRangeOfLocCounted(group whichGroup, location whichLocation, fixed radius, boolexpr filter, int countLimit){
    unitgroup ng=UnitGroupSearch(null,c_playerAny,whichLocation,radius/128,GAw3_DefaultFilterNoHidden,countLimit);
    ng=GAw3_GroupEnumUnits(ng,filter);
    UnitGroupClear(whichGroup);
    UnitGroupAddUnitGroup(whichGroup,ng);
}
void GroupEnumUnitsSelected(group whichGroup, player whichPlayer, boolexpr filter){
    unitgroup ng=UnitGroupSelected(whichPlayer);
    ng=GAw3_GroupEnumUnits(ng,filter);
    UnitGroupClear(whichGroup);
    UnitGroupAddUnitGroup(whichGroup,ng);
}
void SetPlayerHandicapXP(player whichPlayer, fixed handicap){
    CatalogReferenceSet("Behavior,HandicapXP,Modification.XPMultiplier", whichPlayer, FixedToString(handicap,3));
}
conditionfunc Condition(boolexpr func){
    return func;   
}
filterfunc Filter(boolexpr func){
    return func;   
}
boolean IsUnitType(unit whichUnit, unittype whichUnitType){
    string ut=UnitGetType(whichUnit);
    int wc=UnitWeaponCount(whichUnit);
    if(whichUnitType==UNIT_TYPE_DEAD){
        return UnitTestState(whichUnit,c_unitStateIsDead);
    }
    if(whichUnitType==UNIT_TYPE_STUNNED){
        return UnitTestState(whichUnit,c_unitStateStunned);
    }
    if(whichUnitType==UNIT_TYPE_RESISTANT){
        return UnitTestState(whichUnit,c_unitStateResistant);
    }
    if(whichUnitType==UNIT_TYPE_ETHEREAL){
        return UnitTestState(whichUnit,c_unitStateInStasis);
    }
    if(whichUnitType==UNIT_TYPE_MAGIC_IMMUNE){
        return !UnitTestState(whichUnit,c_unitStateStoppable);
    }
    if(whichUnitType==UNIT_TYPE_FLYING){
        return UnitMoverExists(whichUnit, "Fly");
    }
    if(whichUnitType==UNIT_TYPE_GROUND){
        return UnitMoverExists(whichUnit,"Ground");
    }
    if(whichUnitType==UNIT_TYPE_ATTACKS_FLYING){
        return GAw3_UnitValidator(whichUnit,"Unit_ATTACKS_FLYING");
    }
    if(whichUnitType==UNIT_TYPE_ATTACKS_GROUND){
        return GAw3_UnitValidator(whichUnit,"Unit_ATTACKS_GROUND");
    }
    if(whichUnitType==UNIT_TYPE_PLAGUED){
        return GAw3_UnitValidator(whichUnit,"UNIT_TYPE_PLAGUED");
    }
    if(whichUnitType==UNIT_TYPE_SNARED){
        return GAw3_UnitValidator(whichUnit,"UNIT_TYPE_SNARED");
    }
    if(whichUnitType==UNIT_TYPE_POLYMORPHED){
        return GAw3_UnitValidator(whichUnit,"UNIT_TYPE_POLYMORPHED");
    }
    if(whichUnitType==UNIT_TYPE_POISONED){
        return GAw3_UnitValidator(whichUnit,"UNIT_TYPE_POISONED");
    }
    if(whichUnitType==UNIT_TYPE_MELEE_ATTACKER){
        if(!wc){return false;};
        return GAw3_WeaponIsMelee(UnitWeaponGet(whichUnit,1));
    }
    if(whichUnitType==UNIT_TYPE_RANGED_ATTACKER){
        if(!wc){return false;};
        return !GAw3_WeaponIsMelee(UnitWeaponGet(whichUnit,1));
    }
    if(whichUnitType==UNIT_TYPE_GIANT){
        return UnitHasBehavior(whichUnit,"giant");
    }
    if(whichUnitType==UNIT_TYPE_UNDEAD){
        return UnitHasBehavior(whichUnit,"undead");
    }
    if(whichUnitType==UNIT_TYPE_UNDEAD){
        return UnitHasBehavior(whichUnit,"tauren");
    }
    if(whichUnitType==UNIT_TYPE_SAPPER){
        return UnitHasBehavior(whichUnit,"sapper");
    }
    if(whichUnitType==UNIT_TYPE_SLEEPING){
        return UnitHasBehavior(whichUnit,"ACsp");
    }
    if(whichUnitType==UNIT_TYPE_PEON){
        return UnitTypeTestFlag(ut,c_unitFlagWorker);
    }
    if(whichUnitType==UNIT_TYPE_HERO){
        return UnitTypeTestFlag(ut,c_unitFlagHero);
    }
    if(whichUnitType==UNIT_TYPE_STRUCTURE){
        return UnitTypeTestFlag(ut,c_unitFlagPreventDefeat);
    }
    if(whichUnitType==UNIT_TYPE_TOWNHALL){
        return UnitTypeTestFlag(ut,c_unitFlagPenaltyRevealed);
    }
    if(whichUnitType==UNIT_TYPE_SUMMONED){
        return UnitTypeTestAttribute(ut,c_unitAttributeSummoned);
    }
    if(whichUnitType==UNIT_TYPE_MECHANICAL){
        return UnitTypeTestAttribute(ut,c_unitAttributeMechanical);
    }
    if(whichUnitType==UNIT_TYPE_ANCIENT){
        return UnitTypeTestAttribute(ut,c_unitAttributePsionic);
    }
    if(whichUnitType==UNIT_TYPE_FLYING){
        return libNtve_gf_UnitMoverExists(ut, "Fly");
    }
    if(whichUnitType==UNIT_TYPE_GROUND){
        return libNtve_gf_UnitMoverExists(ut,"Ground");
    }
    return false;
}
boolean IsUnitIdType(int unitId, unittype whichUnitType){
    string ut=GAw3_IntToASCII4(unitId);
    if(whichUnitType==UNIT_TYPE_PEON){
        return UnitTypeTestFlag(ut,c_unitFlagWorker);
    }
    if(whichUnitType==UNIT_TYPE_HERO){
        return UnitTypeTestFlag(ut,c_unitFlagHero);
    }
    if(whichUnitType==UNIT_TYPE_STRUCTURE){
        return UnitTypeTestFlag(ut,c_unitFlagPreventDefeat);
    }
    if(whichUnitType==UNIT_TYPE_TOWNHALL){
        return UnitTypeTestFlag(ut,c_unitFlagPenaltyRevealed);
    }
    if(whichUnitType==UNIT_TYPE_SUMMONED){
        return UnitTypeTestAttribute(ut,c_unitAttributeSummoned);
    }
    if(whichUnitType==UNIT_TYPE_MECHANICAL){
        return UnitTypeTestAttribute(ut,c_unitAttributeMechanical);
    }
    if(whichUnitType==UNIT_TYPE_ANCIENT){
        return UnitTypeTestAttribute(ut,c_unitAttributePsionic);
    }
    if(whichUnitType==UNIT_TYPE_FLYING){
        return libNtve_gf_UnitMoverExists(ut, "Fly");
    }
    if(whichUnitType==UNIT_TYPE_GROUND){
        return libNtve_gf_UnitMoverExists(ut,"Ground");
    }
    return false;
}
void DestroyBoolExpr(boolexpr e){
}
player GetOwningPlayer(unit whichUnit){
    return UnitGetOwner(whichUnit);
}
int GetUnitTypeId(unit whichUnit){
    return GAw3_ASCII4ToInt(UnitGetType((whichUnit)));
}
void SyncSelections(){
}
void SuspendTimeOfDay(boolean b){
    GameTimeOfDayPause(b);
}
void SetTimeOfDayScale(fixed r){
    if(r<0.01){r=0.01;}
    GameTimeOfDaySetLength(480/r);
}
fixed GetTimeOfDayScale(){
    return 480/GameTimeOfDayGetLength();
}
void SetUnitColor(unit whichUnit, playercolor whichColor){
    UnitSetTeamColorIndex(whichUnit,whichColor);
}
fogmodifier CreateFogModifierRect(player forWhichPlayer, fogstate whichState, rect where, boolean useSharedVision, boolean afterUnits){
    fogmodifier fm;
    if(whichState==FOG_OF_WAR_VISIBLE){
        VisRevealerCreate(forWhichPlayer,where);
        fm=VisRevealerLastCreated();
    }else if(whichState==FOG_OF_WAR_MASKED){
        VisExploreArea(forWhichPlayer,where,false,false);
    }else if(whichState==FOG_OF_WAR_FOGGED){
        VisExploreArea(forWhichPlayer,where,true,false);
    }
    return fm;
}
fogmodifier CreateFogModifierRadius(player forWhichPlayer, fogstate whichState, fixed centerx, fixed centerY, fixed radius, boolean useSharedVision, boolean afterUnits){
    rect where=RegionCircle(Point(centerx,centerY),radius/128);
    return CreateFogModifierRect(forWhichPlayer, whichState, where, useSharedVision, afterUnits);
}
fogmodifier CreateFogModifierRadiusLoc(player forWhichPlayer, fogstate whichState, location center, fixed radius, boolean useSharedVision, boolean afterUnits){
    rect where=RegionCircle(center,radius/128);
    return CreateFogModifierRect(forWhichPlayer, whichState, where, useSharedVision, afterUnits);
}
void DestroyFogModifier(fogmodifier whichFogModifier){
    VisRevealerDestroy(whichFogModifier);
}
void FogModifierStart(fogmodifier whichFogModifier){
    VisRevealerEnable(whichFogModifier,true);
}
void FogModifierStop(fogmodifier whichFogModifier){
    VisRevealerEnable(whichFogModifier,false);
}
// Returns full map bounds, including unplayable borders, in world coordinates
rect GetWorldBounds(){
    return RegionEntireMap();
}
//============================================================================
// Unit API
// Facing arguments are specified in degrees
unit CreateUnit(player id, int unitid, fixed x, fixed y, fixed face){
    UnitCreate(1,GAw3_IntToASCII4(unitid),0,id,Point(x,y),face);
    return UnitLastCreated();
}
unit CreateUnitByName(player whichPlayer, string unitname, fixed x, fixed y, fixed face){
    string type=GAw3_UnitCodeNameToType(unitname);
    UnitCreate(1,type,0,whichPlayer,Point(x,y),face);
    return UnitLastCreated();
}
unit CreateUnitAtLoc(player id, int unitid, location whichLocation, fixed face){
    UnitCreate(1,GAw3_IntToASCII4(unitid),0,id,whichLocation,face);
    return UnitLastCreated();
}
unit CreateUnitAtLocByName(player id, string unitname, location whichLocation, fixed face){
    string type=GAw3_UnitCodeNameToType(unitname);
    UnitCreate(1,type,0,id,whichLocation,face);
    return UnitLastCreated();
}
unit CreateCorpse(player whichPlayer, int unitid, fixed x, fixed y, fixed face){
    unit u=CreateUnit(whichPlayer,unitid,x,y,face);
    actorscope scope=ActorScopeFromUnit(u);
    UnitKill(u);
    ActorScopeSend(scope, "AnimPlay Death Decay,Bone PlayForever 0.000000 -1.000000 90.000000 AsDuration 3.000000 2000");
    return u;
}
void KillUnit(unit whichUnit){
    UnitKill(whichUnit);
}
void RemoveUnit(unit whichUnit){
    UnitRemove(whichUnit);
}
void ShowUnit( unit whichUnit, boolean show ){
    libNtve_gf_ShowHideUnit(whichUnit,show);
}
unit CreateBlightedGoldmine(player id, fixed x, fixed y, fixed face){
    return CreateUnit(id,'ugol',x,y,face);
}
void MoveLocation(location whichLocation, fixed newX, fixed newY){
    PointSet(whichLocation,Point(newX,newY));
}
fixed GetLocationX(location whichLocation){
    return PointGetX(whichLocation);
}
fixed GetLocationY(location whichLocation){
    return PointGetY(whichLocation);
}
fixed GetRectCenterX(rect whichRect){
    return PointGetX(RegionGetCenter(whichRect));
}
fixed GetRectCenterY(rect whichRect){
    return PointGetY(RegionGetCenter(whichRect));
}
fixed GetRectMinX(rect whichRect){
    return PointGetX(RegionGetBoundsMin(whichRect));
}
fixed GetRectMinY(rect whichRect){
    return PointGetY(RegionGetBoundsMin(whichRect));
}
fixed GetRectMaxX(rect whichRect){
    return PointGetX(RegionGetBoundsMax(whichRect));
}
fixed GetRectMaxY(rect whichRect){
    return PointGetY(RegionGetBoundsMax(whichRect));
}
trigger GetTriggeringTrigger(){
    return TriggerGetCurrent();
}
unit GetEnteringUnit(){
    return EventUnit();
}
event TriggerRegisterEnterRegion(trigger whichTrigger, region whichRegion, string filter){
    TriggerAddEventUnitRegion(whichTrigger, null, whichRegion, true);
    GAw3_EventHandleMax+=1;
    return GAw3_EventHandleMax;
}
event TriggerRegisterLeaveRegion(trigger whichTrigger, region whichRegion, string filter){
    TriggerAddEventUnitRegion(whichTrigger, null, whichRegion, false);
    GAw3_EventHandleMax+=1;
    return GAw3_EventHandleMax;
}
event TriggerRegisterPlayerEvent(trigger whichTrigger, player whichPlayer, playerevent whichPlayerEvent){
    if(whichPlayerEvent==EVENT_PLAYER_STATE_LIMIT){
        TriggerAddEventPlayerPropChange(whichTrigger,whichPlayer,-1);
    }else if(whichPlayerEvent==EVENT_PLAYER_ALLIANCE_CHANGED){
        TriggerAddEventPlayerAllianceChange(whichTrigger,whichPlayer);
    }else if(whichPlayerEvent==EVENT_PLAYER_LEAVE){
        TriggerAddEventPlayerLeft(whichTrigger,whichPlayer,c_gameResultUndecided);
    }else if(whichPlayerEvent==EVENT_PLAYER_DEFEAT){
        TriggerAddEventPlayerLeft(whichTrigger,whichPlayer,c_gameResultDefeat);
    }else if(whichPlayerEvent==EVENT_PLAYER_VICTORY){
        TriggerAddEventPlayerLeft(whichTrigger,whichPlayer,c_gameResultVictory);
    }else if(whichPlayerEvent==EVENT_PLAYER_CHAT){
        TriggerAddEventChatMessage(whichTrigger,whichPlayer,"",false);
    }else if(whichPlayerEvent==EVENT_PLAYER_END_CINEMATIC){
        TriggerAddEventKeyPressed(whichTrigger,whichPlayer, c_keyEscape, true, c_keyModifierStateIgnore, c_keyModifierStateIgnore, c_keyModifierStateIgnore);
    }else if(whichPlayerEvent==EVENT_PLAYER_ARROW_LEFT_DOWN){
        TriggerAddEventKeyPressed(whichTrigger,whichPlayer, c_keyLeft, true, c_keyModifierStateIgnore, c_keyModifierStateIgnore, c_keyModifierStateIgnore);
    }else if(whichPlayerEvent==EVENT_PLAYER_ARROW_LEFT_UP){
        TriggerAddEventKeyPressed(whichTrigger,whichPlayer, c_keyLeft, false, c_keyModifierStateIgnore, c_keyModifierStateIgnore, c_keyModifierStateIgnore);
    }else if(whichPlayerEvent==EVENT_PLAYER_ARROW_RIGHT_DOWN){
        TriggerAddEventKeyPressed(whichTrigger,whichPlayer, c_keyRight, true, c_keyModifierStateIgnore, c_keyModifierStateIgnore, c_keyModifierStateIgnore);
    }else if(whichPlayerEvent==EVENT_PLAYER_ARROW_RIGHT_UP){
        TriggerAddEventKeyPressed(whichTrigger,whichPlayer, c_keyRight, false, c_keyModifierStateIgnore, c_keyModifierStateIgnore, c_keyModifierStateIgnore);
    }else if(whichPlayerEvent==EVENT_PLAYER_ARROW_DOWN_DOWN){
        TriggerAddEventKeyPressed(whichTrigger,whichPlayer, c_keyDown, true, c_keyModifierStateIgnore, c_keyModifierStateIgnore, c_keyModifierStateIgnore);
    }else if(whichPlayerEvent==EVENT_PLAYER_ARROW_DOWN_UP){
        TriggerAddEventKeyPressed(whichTrigger,whichPlayer, c_keyDown, false, c_keyModifierStateIgnore, c_keyModifierStateIgnore, c_keyModifierStateIgnore);
    }else if(whichPlayerEvent==EVENT_PLAYER_ARROW_UP_DOWN){
        TriggerAddEventKeyPressed(whichTrigger,whichPlayer, c_keyUp, true, c_keyModifierStateIgnore, c_keyModifierStateIgnore, c_keyModifierStateIgnore);
    }else if(whichPlayerEvent==EVENT_PLAYER_ARROW_UP_UP){
        TriggerAddEventKeyPressed(whichTrigger,whichPlayer, c_keyUp, false, c_keyModifierStateIgnore, c_keyModifierStateIgnore, c_keyModifierStateIgnore);
    }
    GAw3_EventHandleMax+=1;
    return GAw3_EventHandleMax;
}
region CreateRegion(){
    return RegionEmpty();
}
// Warning: Will Wait forever!
event TriggerRegisterGameStateEvent(trigger whichTrigger, gamestate whichState, limitop opcode, fixed limitval){
    if(whichState==GAME_STATE_TIME_OF_DAY){
        GAw3_tmp_trig=whichTrigger;
        GAw3_temp_int=opcode;
        GAw3_temp_fixed=limitval;
        TriggerExecute(GAw3_TODEvent,false,false);
    }
    GAw3_EventHandleMax+=1;
    return GAw3_EventHandleMax;
}
void DisplayTextToPlayer(player toPlayer, fixed x, fixed y, string message){
    UIDisplayMessage(PlayerGroupSingle(toPlayer), c_messageAreaDebug, StringExternal(message));
}
void DisplayTimedTextToPlayer(player toPlayer, fixed x, fixed y, fixed duration, string message){
    UIDisplayMessage(PlayerGroupSingle(toPlayer), c_messageAreaDebug, StringExternal(message));
}
void DisplayTimedTextFromPlayer(player toPlayer, fixed x, fixed y, fixed duration, string message){
    UIDisplayMessage(PlayerGroupSingle(toPlayer), c_messageAreaDebug, StringExternal(message));
}
void ClearTextMessages(){
    UIClearMessages((PlayerGroupAll()), c_messageAreaDebug);
}
event TriggerRegisterTimerEvent(trigger whichTrigger, fixed timeout, boolean periodic){
    timer t=TimerCreate();
    TriggerAddEventTimer(whichTrigger,t);
    TimerStart (t, timeout, periodic, c_timeGame);
    GAw3_EventHandleMax+=1;
    return GAw3_EventHandleMax;
}
event TriggerRegisterTimerExpireEvent(trigger whichTrigger, timer t){
    TriggerAddEventTimer(whichTrigger,t);
    GAw3_EventHandleMax+=1;
    return GAw3_EventHandleMax;
}
void cj_TimerStart(timer whichTimer, fixed timeout, boolean periodic, string handlerFunc){
    TimerStart(whichTimer, timeout, periodic, c_timeGame);
}
void  DestroyTimer(timer whichTimer){
    TimerStart(whichTimer, c_timerDurationInfinite, false, c_timeGame);
    TimerPause(whichTimer,true);
}
//fixed TimerGetElapsed(timer whichTimer);
//fixed TimerGetRemaining(timer whichTimer);
fixed TimerGetTimeout(timer whichTimer){
    return TimerGetDuration(whichTimer);
}
void PauseTimer(timer whichTimer){
    TimerPause(whichTimer,true);
}
void ResumeTimer(timer whichTimer){
    TimerPause(whichTimer,false);
}
timer GetExpiredTimer(){
    return EventTimer();
}
//============================================================================
// Campaign API
void SetTutorialCleared(boolean cleared){}
void SetMissionAvailable(int campaignNumber, int missionNumber, boolean available){}
void SetCampaignAvailable(int campaignNumber, boolean available){}
void SetOpCinematicAvailable(int campaignNumber, boolean available){}
void SetEdCinematicAvailable(int campaignNumber, boolean available){}
gamedifficulty GetDefaultDifficulty(){return PlayerDifficulty(0);}
gamedifficulty GetGameDifficulty(){return PlayerDifficulty(0);}
void SetCustomCampaignButtonVisible(int whichButton, boolean visible){}
boolean GetCustomCampaignButtonVisible(int whichButton){return true;}
void DoNotSaveReplay(){}
void PlayModelCinematic(string modelName){}
void PlayCinematic(string movieName){
    PreloadMovie(movieName,true);
    MoviePlayAfterGame(PlayerGroupAll (),movieName);
}
bank[100] GAw3_GC;
int GAw3_GCCount;
boolean ReloadGameCachesFromDisk(){
    int i;
    bank b;
    for(;i<100;i+=1){
        b=GAw3_GC[i];
        if(b!=null){
            BankReload(b);
        }else{
            break;
        }
    }
    return true;
}
gamecache InitGameCache(string campaignFile){
    bank b=BankLoad(campaignFile,GAw3_HumanPlayer);
    if(GAw3_GCCount<100){
        GAw3_GC[GAw3_GCCount]=b;
    }
    GAw3_GCCount+=1;
    return b;
}
boolean SaveGameCache(gamecache whichCache){
    BankSave(whichCache);
    return true;
}
void StoreInteger(gamecache cache, string missionKey, string key, int value){
    BankValueSetFromInt(cache,missionKey,key,value);
}
void StoreReal( gamecache cache, string missionKey, string key, fixed value){
    BankValueSetFromFixed(cache,missionKey,key,value);
}
void StoreBoolean ( gamecache cache, string missionKey, string key, boolean value){
    BankValueSetFromFlag(cache,missionKey,key,value);
}
boolean StoreUnit( gamecache cache, string missionKey, string key, unit whichUnit){
    BankValueSetFromUnit(cache,missionKey,key,whichUnit);
    return true;
}
boolean StoreString ( gamecache cache, string missionKey, string key, string value){
    BankValueSetFromString(cache,missionKey,key,value);
    return true;
}
void SyncStoredInteger(gamecache cache, string missionKey, string key){}
void SyncStoredReal(gamecache cache, string missionKey, string key){}
void SyncStoredBoolean(gamecache cache, string missionKey, string key){}
void SyncStoredUnit(gamecache cache, string missionKey, string key){}
void SyncStoredString(gamecache cache, string missionKey, string key){}
boolean HaveStoredInteger( gamecache cache, string missionKey, string key){
    return BankValueIsType(cache,missionKey,key,c_bankTypeInt);
}
boolean HaveStoredReal( gamecache cache, string missionKey, string key){
    return BankValueIsType(cache,missionKey,key,c_bankTypeFixed);
}
boolean HaveStoredBoolean( gamecache cache, string missionKey, string key){
    return BankValueIsType(cache,missionKey,key,c_bankTypeFlag);
}
boolean HaveStoredUnit( gamecache cache, string missionKey, string key){
    return BankValueIsType(cache,missionKey,key,c_bankTypeUnit);
}
boolean HaveStoredString( gamecache cache, string missionKey, string key){
    return BankValueIsType(cache,missionKey,key,c_bankTypeString);
}
void FlushGameCache( gamecache cache){
    int c=BankSectionCount(cache);
    int i;
    for(;i<c;i+=1){
        BankSectionRemove(cache,BankSectionName(cache,i));
    }
}
void FlushStoredMission( gamecache cache, string missionKey){
    BankSectionRemove(cache,missionKey);
}
void FlushStoredInteger( gamecache cache, string missionKey, string key){
    BankKeyRemove(cache,missionKey,key);
}
void FlushStoredReal( gamecache cache, string missionKey, string key){
    BankKeyRemove(cache,missionKey,key);
}
void FlushStoredBoolean( gamecache cache, string missionKey, string key){
    BankKeyRemove(cache,missionKey,key);
}
void FlushStoredUnit( gamecache cache, string missionKey, string key){
    BankKeyRemove(cache,missionKey,key);
}
void FlushStoredString( gamecache cache, string missionKey, string key){
    BankKeyRemove(cache,missionKey,key);
}
//============================================================================
void Cheat(string cheatStr){
    ConsoleCommand(cheatStr,true,true);
}
boolean IsNoVictoryCheat(){return GAw3_NoVictory;}
boolean IsNoDefeatCheat(){return GAw3_NoDefeat;}
//============================================================================
// Dialog API
dialog cj_DialogCreate(){
    return DialogCreate(500, 400, c_anchorCenter, 0, 0, true);
}
//void DialogDestroy(dialog whichDialog);
void DialogClear(dialog whichDialog){
    DialogControlDestroyAll(whichDialog);
}
void DialogSetMessage(dialog whichDialog, string messageText){
    DialogSetTitle(whichDialog, StringExternal(messageText));
}
button DialogAddButton(dialog whichDialog, string buttonText, int hotkey){
    return libNtve_gf_CreateDialogItemButton(whichDialog, 200, 50, c_anchorTop, 50, 50, StringToText(""), StringExternal(buttonText), "");
}
button DialogAddQuitButton(dialog whichDialog, boolean doScoreScreen, string buttonText, int hotkey){
    button btn=libNtve_gf_CreateDialogItemButton(whichDialog, 200, 50, c_anchorTop, 50, 50, StringToText(""), StringExternal(buttonText), "");
    return btn;
}
void DialogDisplay(player whichPlayer, dialog whichDialog, boolean flag){
    DialogSetVisible(whichDialog,PlayerGroupSingle(whichPlayer),flag);
}
event TriggerRegisterDialogButtonEvent(trigger whichTrigger, button whichButton){
    TriggerAddEventDialogControl(whichTrigger, c_playerAny, whichButton, c_triggerControlEventTypeClick);
    GAw3_EventHandleMax+=1;
    return GAw3_EventHandleMax;
}
void RemovePlayer(player whichPlayer, playergameresult gameResult){
    GameOver(whichPlayer,gameResult,false,true);
}
void EnableUserControl(boolean b){
    int i;
    for(;i<=6;i+=1){
        UISetCommandAllowed(PlayerGroupAll(),i,b);
    }
}
void EnableUserUI(boolean b){
    libNtve_gf_HideGameUI(!b, PlayerGroupAll());
}
mapcontrol GetPlayerController(player whichPlayer){
    return PlayerType(whichPlayer);
}
void DisplayLoadDialog(){}
unit GetTriggerUnit(){
    return EventUnit();
}
// EVENT_PLAYER_UNIT_ATTACKED
unit GetAttacker(){
    return EventUnitTarget();
}
// EVENT_PLAYER_UNIT_DEATH
unit GetDyingUnit(){
    return EventUnit();
}
unit GetLevelingUnit(){
    return EventUnit();
}
unit GetLearningUnit(){
    return EventUnit();
}
unit GetKillingUnit(){
    return EventUnitTarget();
}
unit GetManipulatingUnit(){
    return EventUnit();
}
item GetManipulatedItem(){
    return EventUnitInventoryItem();
}
int GetLearnedSkill(){
    abilcmd ac=EventUnitAbility();
    string abil=CatalogFieldValueGet(c_gameCatalogAbil, AbilityCommandGetAbility(ac), "InfoArray[" + IntToString(AbilityCommandGetCommand(ac)) + "].Abil", c_playerAny);
    return GAw3_ASCII4ToInt(abil);
}
bool GAw3_TODEvent_Func(bool testConds, bool runActions){
    trigger whichTrigger=GAw3_tmp_trig;
    int opcode=GAw3_temp_int;
    fixed limitval=GAw3_temp_fixed;
    fixed cr;
    fixed mv;
        if(opcode==LESS_THAN){
            while(true){
                if(TriggerIsEnabled(whichTrigger)&&(GAw3_TODToTODHour(GameTimeOfDayGet())<limitval)){
                    TriggerExecute(whichTrigger,true,false);
                }
                Wait(1,c_timeGame);
            }
        }else if(opcode==LESS_THAN_OR_EQUAL){
            while(true){
                if(TriggerIsEnabled(whichTrigger)&&(GAw3_TODToTODHour(GameTimeOfDayGet())<=limitval)){
                    TriggerExecute(whichTrigger,true,false);
                }
                Wait(1,c_timeGame);
            }
        }else if(opcode==EQUAL){
            while(true){
                cr=GAw3_TODToTODHour(GameTimeOfDayGet());
                mv=limitval+24/GameTimeOfDayGetLength();
                if(TriggerIsEnabled(whichTrigger)&&(cr>=limitval)&&(cr<mv)){
                    TriggerExecute(whichTrigger,true,false);
                }
                Wait(1,c_timeGame);
            }
        }else if(opcode==GREATER_THAN_OR_EQUAL){
            while(true){
                if(TriggerIsEnabled(whichTrigger)&&(GAw3_TODToTODHour(GameTimeOfDayGet())>=limitval)){
                    TriggerExecute(whichTrigger,true,false);
                }
                Wait(1,c_timeGame);
            }
        }else if(opcode==GREATER_THAN){
            while(true){
                if(TriggerIsEnabled(whichTrigger)&&(GAw3_TODToTODHour(GameTimeOfDayGet())>limitval)){
                    TriggerExecute(whichTrigger,true,false);
                }
                Wait(1,c_timeGame);
            }
        }else if(opcode==NOT_EQUAL){
            while(true){
                if(GAw3_TODToTODHour(GameTimeOfDayGet())!=limitval){
                    TriggerExecute(whichTrigger,true,false);
                }
                Wait(1,c_timeGame);
            }
        }
    return true;
}
force CreateForce(){
    return PlayerGroupEmpty ();
}
void DestroyForce(force whichForce){PlayerGroupClear(whichForce);}
void ForceAddPlayer(force whichForce, player whichPlayer){
    PlayerGroupAdd(whichForce,whichPlayer);
}
void ForceRemovePlayer(force whichForce, player whichPlayer){
    PlayerGroupRemove(whichForce,whichPlayer);
}
void ForceClear(force whichForce){PlayerGroupClear(whichForce);}
gamespeed GetGameSpeed (){
    return GameGetSpeedValue();
}
void FogMaskEnable(boolean enable){
    VisEnable(c_visTypeMask, enable);
}
boolean IsFogMaskEnabled(){
    return VisIsEnabled(c_visTypeMask);
}
void FogEnable(boolean enable){
    VisEnable(c_visTypeFog, enable);
}
boolean IsFogEnabled(){
    return VisIsEnabled(c_visTypeFog);
}
playerslotstate GetPlayerSlotState(player whichPlayer){
    return PlayerStatus(whichPlayer);
}
soundhandle CreateSoundFromLabel(string soundLabel, boolean looping, boolean is3D, boolean stopwhenoutofrange, int fadeInRate, int fadeOutRate){
    return soundLabel;
}
//============================================================================
// Quest API
quest CreateQuest(){
    int q=ObjectiveCreate(GAw3_tEmpty,GAw3_tEmpty,c_objectiveStateActive,true);
    int h;
    ObjectiveSetPriority(q,q);
    //HelpPanelAddTip (PlayerGroupAll(), GAw3_tEmpty, GAw3_tEmpty, GAw3_tEmpty, "");
    //h=HelpPanelLastCreatedHelpItem();
    //DataTableSetInt(true, "GAw3_Quest_"+IntToString(q)+"_HelpItem",h);
    return q;
}
void DestroyQuest(quest whichQuest){
    int c=GAw3_QuestCountQuestItem(whichQuest);
    int i=1;
    for(;i<=c;i=+1){
        ObjectiveDestroy(GAw3_QuestGetQuestItem(whichQuest,i));
    }
    HelpPanelDestroyHelpItem(GAw3_QuestGetHelpItem(whichQuest));
    ObjectiveDestroy(whichQuest);
}
void QuestSetTitle(quest whichQuest, string title){
    ObjectiveSetName(whichQuest,StringExternal(title));
    GAw3_UpdateQuestHelpItem(whichQuest,false);
}
void QuestSetDescription(quest whichQuest, string description){
    ObjectiveSetDescription(whichQuest,StringExternal(description));
    GAw3_UpdateQuestHelpItem(whichQuest,false);
}
void QuestSetIconPath(quest whichQuest, string iconPath){
    string icon=StringReplaceWord(iconPath,"ReplaceableTextures\\CommandButtons\\BTN","Assets\\Textures\\BTN\\WAR3_BTN",c_stringReplaceAll,true);
    icon=StringReplaceWord(icon,".blp",".dds",c_stringReplaceAll,true);
    icon=StringReplaceWord(icon,".tga",".dds",c_stringReplaceAll,true);
    DataTableSetString(true, "GAw3_Quest_"+IntToString(whichQuest)+"_Image",icon);
    GAw3_UpdateQuestHelpItem(whichQuest,false);
}
void QuestSetRequired(quest whichQuest, boolean required){
    ObjectiveSetPrimary(whichQuest,required);
    GAw3_UpdateQuestHelpItem(whichQuest,false);
}
void QuestSetCompleted(quest whichQuest, boolean completed){
    if(completed){
        ObjectiveSetState(whichQuest,c_objectiveStateCompleted);
        GAw3_UpdateQuestHelpItem(whichQuest,true);
    }else if(IsQuestCompleted(whichQuest)){
        ObjectiveSetState(whichQuest,c_objectiveStateActive);
    }
}
void QuestSetDiscovered(quest whichQuest, boolean discovered){
    if(discovered){
        ObjectiveSetPlayerGroup(whichQuest,PlayerGroupAll());
        GAw3_UpdateQuestHelpItem(whichQuest,true);
    }else{
        ObjectiveSetPlayerGroup(whichQuest,PlayerGroupEmpty());
        GAw3_UpdateQuestHelpItem(whichQuest,false);
    }
}
void QuestSetFailed(quest whichQuest, boolean failed){
    if(failed){
        ObjectiveSetState(whichQuest,c_objectiveStateFailed);
        GAw3_UpdateQuestHelpItem(whichQuest,true);
    }else if(IsQuestFailed(whichQuest)){
        ObjectiveSetState(whichQuest,c_objectiveStateActive);
    }
}
void QuestSetEnabled(quest whichQuest, boolean enabled){
    if(!enabled){
        ObjectiveSetState(whichQuest,c_objectiveStateHidden);
    }else if(!IsQuestEnabled(whichQuest)){
        ObjectiveSetState(whichQuest,c_objectiveStateActive);
        GAw3_UpdateQuestHelpItem(whichQuest,true);
    }
}
    
boolean IsQuestRequired(quest whichQuest){
    return ObjectiveGetPrimary(whichQuest);
}
boolean IsQuestCompleted(quest whichQuest){
    return (ObjectiveGetState(whichQuest)==c_objectiveStateCompleted);
}
boolean IsQuestDiscovered(quest whichQuest){
    return (PlayerGroupCount(ObjectiveGetPlayerGroup(whichQuest))>0);
}
boolean IsQuestFailed(quest whichQuest){
    return (ObjectiveGetState(whichQuest)==c_objectiveStateFailed);
}
boolean IsQuestEnabled(quest whichQuest){
    return (ObjectiveGetState(whichQuest)!=c_objectiveStateHidden);
}
questitem QuestCreateItem(quest whichQuest){
    int qi=ObjectiveCreateForPlayers(GAw3_tEmpty,GAw3_tEmpty,c_objectiveStateActive,true,PlayerGroupEmpty());
    int i=DataTableGetInt(true, "GAw3_Quest_"+IntToString(whichQuest)+"_ItemCount")+1;
    DataTableSetInt(true, "GAw3_Quest_"+IntToString(whichQuest)+"_ItemCount",i);
    DataTableSetObjective(true, "GAw3_Quest_"+IntToString(whichQuest)+"_Item_"+IntToString(i),qi);
    DataTableSetObjective(true, "GAw3_QuestItem_"+IntToString(qi)+"_Quest",whichQuest);
    GAw3_UpdateQuestHelpItem(whichQuest,false);
    return qi;
}
void QuestItemSetDescription(questitem whichQuestItem, string description){
    ObjectiveSetName(whichQuestItem,StringExternal(description));
    GAw3_UpdateQuestHelpItem(DataTableGetObjective(true, "GAw3_QuestItem_"+IntToString(whichQuestItem)+"_Quest"),false);
}
void QuestItemSetCompleted(questitem whichQuestItem, boolean completed){
    if(completed){
        ObjectiveSetState(whichQuestItem,c_objectiveStateCompleted);
        GAw3_UpdateQuestHelpItem(DataTableGetObjective(true, "GAw3_QuestItem_"+IntToString(whichQuestItem)+"_Quest"),true);
    }else{
        ObjectiveSetState(whichQuestItem,c_objectiveStateActive);
        GAw3_UpdateQuestHelpItem(DataTableGetObjective(true, "GAw3_QuestItem_"+IntToString(whichQuestItem)+"_Quest"),false);
    }
}
boolean IsQuestItemCompleted(questitem whichQuestItem){
    return (ObjectiveGetState(whichQuestItem)==c_objectiveStateCompleted);
}
defeatcondition CreateDefeatCondition(){
    int q=ObjectiveCreate(null,null,c_objectiveStateActive,true);
    ObjectiveSetPriority(q,-1);
    return q;
}
void DestroyDefeatCondition(defeatcondition whichCondition){
    ObjectiveDestroy(whichCondition);
}
void DefeatConditionSetDescription(defeatcondition whichCondition, string description){
    ObjectiveSetName(whichCondition,StringExternal(description));
}
void FlashQuestDialogButton(){
    TriggerExecute(GAw3_FlashQuestButton,true,false);
}
void ForceQuestDialogUpdate(){};
void SuspendHeroXP(unit whichHero, boolean flag){
    UnitXPGainEnable(whichHero,null,!flag);
    DataTableSetBool(true,"SuspendHeroXP_"+IntToString(UnitGetTag(whichHero)),flag);
}
boolean IsSuspendedXP(unit whichHero){
    return DataTableGetBool(true,"SuspendHeroXP_"+IntToString(UnitGetTag(whichHero)));
}
void UnitAddIndicator(unit whichUnit, int red, int green, int blue, int alpha){
    UnitFlashSelection(whichUnit, 1.5);
}
void AddIndicator(widget whichWidget, int red, int green, int blue, int alpha){
    UnitFlashSelection(whichWidget, 1.5);
}
void PingMinimap(fixed x, fixed y, fixed duration){
    PingCreate(PlayerGroupAll(), "PingSimple", Point(x,y), ColorWithAlpha(0, 100, 0, 100.0), duration);
}
void PingMinimapEx(fixed x, fixed y, fixed duration, int red, int green, int blue, boolean extraEffects){
    string model= "PingSimple";
    if(extraEffects){model= "PingAlert";}
    PingCreate(PlayerGroupAll(), model, Point(x,y), ColorWithAlpha(red/255, green/255, blue/255, 100.0), duration);
}
void SetCameraQuickPosition(fixed x, fixed y){
    UIAlertPoint("Trigger", -1, StringToText(""), null, Point(x,y));
}
void AddHeroXP(unit whichHero, int xpToAdd, boolean showEyeCandy){
    UnitSetPropertyInt(whichHero, c_unitPropXP, UnitGetPropertyInt(whichHero, c_unitPropXP, c_unitPropCurrent) + xpToAdd);
}
void SetHeroLevel(unit whichHero, int level, boolean showEyeCandy){
    UnitSetPropertyInt(whichHero, c_unitPropLevel, level);
}
int GetHeroLevel(unit whichHero){
    return UnitLevel(whichHero);
}
//============================================================================
// Item API
item CreateItem(int itemid, fixed x, fixed y){
    libNtve_gf_CreateUnitsWithDefaultFacing(1,GAw3_IntToASCII4(itemid),0,0,Point(x,y));
    return UnitLastCreated();
}
void RemoveItem(item whichItem){
    UnitRemove(whichItem);
}
player GetItemPlayer(item whichItem){
    return UnitGetOwner(whichItem);
}
int GetItemTypeId(item i){
    return GetUnitTypeId(i);
}
fixed GetItemX(item i){
    return PointGetX(UnitGetPosition(i));
}
fixed GetItemY(item i){
    return PointGetY(UnitGetPosition(i));
}
void SetItemPosition(item i, fixed x, fixed y){
    UnitSetPosition(i,Point(x,y),false);
}
void SetUnitState(unit whichUnit, unitstate whichUnitState, fixed newVal){
    int prop;
    if(whichUnitState==UNIT_STATE_LIFE){
        prop=c_unitPropLife;
    }else if(whichUnitState==UNIT_STATE_MAX_LIFE){
        prop=c_unitPropLifeMax;
    }else if(whichUnitState==UNIT_STATE_MANA){
        prop=c_unitPropEnergy;
    }else if(whichUnitState==UNIT_STATE_MAX_MANA){
        prop=c_unitPropEnergyMax;
    }
    UnitSetPropertyFixed(whichUnit,prop,newVal);
}
fixed GetUnitState(unit whichUnit, unitstate whichUnitState){
    int prop;
    if(whichUnitState==UNIT_STATE_LIFE){
        prop=c_unitPropLife;
    }else if(whichUnitState==UNIT_STATE_MAX_LIFE){
        prop=c_unitPropLifeMax;
    }else if(whichUnitState==UNIT_STATE_MANA){
        prop=c_unitPropEnergy;
    }else if(whichUnitState==UNIT_STATE_MAX_MANA){
        prop=c_unitPropEnergyMax;
    }
    return UnitGetPropertyFixed(whichUnit,prop,c_unitPropCurrent);
}
item UnitAddItemById(unit whichUnit, int itemId){
    return UnitInventoryCreate(whichUnit,GAw3_IntToASCII4(itemId));
}
boolean UnitAddItemToSlotById(unit whichUnit, int itemId, int itemSlot){
    item it=UnitInventoryCreate(whichUnit,GAw3_IntToASCII4(itemId));
    int container=itemSlot+1;
    UnitInventoryMove(it,container,65);
    return true;
}
void UnitRemoveItem(unit whichUnit, item whichItem){
    if(UnitHasItem(whichUnit,whichItem)){UnitSetPosition(whichItem,UnitGetPosition(whichUnit),false);}
}
item UnitRemoveItemFromSlot(unit whichUnit, int itemSlot){
    item it=UnitItemInSlot(whichUnit,itemSlot);
    UnitRemoveItem(whichUnit,it);
    return it;
}
boolean UnitHasItem(unit whichUnit, item whichItem){
    return UnitInventoryUnit(whichItem)==whichUnit;
}
item UnitItemInSlot(unit whichUnit, int itemSlot){
    int i=1;
    int c=UnitInventoryCount(whichUnit,c_unitInventoryCountCarried);
    item it;
    int container=itemSlot+1;
    for(;i<=c;i+=1){
        it=UnitInventoryItem(whichUnit,i);
        if(UnitInventoryContainer(it)==container){return it;}
    }
    return null;
}
int UnitInventorySize(unit whichUnit){
    return UnitInventoryCount(whichUnit,c_unitInventoryCountTotal);
}
boolean UnitIsSleeping(unit whichUnit){
    return UnitHasBehavior(whichUnit,"ACsp");
}
void UnitWakeUp(unit whichUnit){
    UnitBehaviorAdd(whichUnit,"ACspSleepSuppress",whichUnit,1);
}
void cj_TriggerExecute(trigger whichTrigger){
    TriggerExecute(whichTrigger,false,false);
}
//TODO
bool IsMapFlagSet (mapflag whichMapFlag){
    return false;
}
integer GetIntegerGameState(igamestate whichIntegerGameState){
    return 0;
}
event TriggerRegisterPlayerUnitEvent(trigger whichTrigger, player whichPlayer, playerunitevent whichPlayerUnitEvent, string filter){
    string pre=GAw3_EVENT[whichPlayerUnitEvent]+"_Player_"+IntToString(whichPlayer)+"_";
    int index;
    if(whichPlayerUnitEvent==EVENT_PLAYER_UNIT_SELECTED){
        TriggerAddEventUnitSelected(whichTrigger, null, whichPlayer, true);
    }else if(whichPlayerUnitEvent==EVENT_PLAYER_UNIT_DESELECTED){
        TriggerAddEventUnitSelected(whichTrigger, null, whichPlayer, false);
    }else{
        index=DataTableGetInt(true, pre+"TrigCount")+1;
        DataTableSetInt(true,pre+"TrigCount",index);
        DataTableSetTrigger(true,pre+"Trig_"+IntToString(index),whichTrigger);
        TriggerEnable(GAw3_EVENT_TRIG[whichPlayerUnitEvent],true);
    }
    GAw3_EventHandleMax+=1;
    return GAw3_EventHandleMax;
}
event TriggerRegisterUnitEvent(trigger whichTrigger, unit whichUnit, unitevent whichEvent){
    if(whichEvent==EVENT_UNIT_DEATH){
        TriggerAddEventUnitDied(whichTrigger, UnitRefFromUnit(whichUnit));
    }else if(whichEvent==EVENT_UNIT_ATTACKED){
        TriggerAddEventUnitAttacked(whichTrigger, UnitRefFromUnit(whichUnit));
    }
    GAw3_EventHandleMax+=1;
    return GAw3_EventHandleMax;
}
event TriggerRegisterGameEvent(trigger whichTrigger, gameevent whichGameEvent){
    if(whichGameEvent==EVENT_GAME_SHOW_SKILL){
        TriggerAddEventButtonPressed(whichTrigger, c_playerAny, "CmdSelectSkill");
    }
    GAw3_EventHandleMax+=1;
    return GAw3_EventHandleMax;
}
void SetSkyModel(string skyModelFile){
    //GameSetBackground(c_backgroundFixed, skyModelFile, 100.0);
}

//--------------------------------------------------------------------------------------------------
// Custom Script: Blizzard.j (Consts)
//--------------------------------------------------------------------------------------------------
integer   bj_TIMETYPE_ADD    = c_transmissionDurationAdd;
integer   bj_TIMETYPE_SET    = c_transmissionDurationSet; 
integer   bj_TIMETYPE_SUB    = c_transmissionDurationSub;
//===========================================================================;
// Blizzard.j ( define Jass2 functions that need to be in every map script )
//===========================================================================;
//globals;
    //-----------------------------------------------------------------------;
    // Constants
    //;
    // Misc constants
    real      bj_PI                            = 3.14159;
    real      bj_E                             = 2.71828;
    real      bj_CELLWIDTH                     = 128.0;
    real      bj_CLIFFHEIGHT                   = 128.0;
    real      bj_UNIT_FACING                   = 270.0;
    real      bj_RADTODEG                      = 180.0/bj_PI;
    real      bj_DEGTORAD                      = bj_PI/180.0;
    real      bj_TEXT_DELAY_QUEST              = 20.00;
    real      bj_TEXT_DELAY_QUESTUPDATE        = 20.00;
    real      bj_TEXT_DELAY_QUESTDONE          = 20.00;
    real      bj_TEXT_DELAY_QUESTFAILED        = 20.00;
    real      bj_TEXT_DELAY_QUESTREQUIREMENT   = 20.00;
    real      bj_TEXT_DELAY_MISSIONFAILED      = 20.00;
    real      bj_TEXT_DELAY_ALWAYSHINT         = 12.00;
    real      bj_TEXT_DELAY_HINT               = 12.00;
    real      bj_TEXT_DELAY_SECRET             = 10.00;
    real      bj_TEXT_DELAY_UNITACQUIRED       = 15.00;
    real      bj_TEXT_DELAY_UNITAVAILABLE      = 10.00;
    real      bj_TEXT_DELAY_ITEMACQUIRED       = 10.00;
    real      bj_TEXT_DELAY_WARNING            = 12.00;
    real      bj_QUEUE_DELAY_QUEST             =  5.00;
    real      bj_QUEUE_DELAY_HINT              =  5.00;
    real      bj_QUEUE_DELAY_SECRET            =  3.00;
    real      bj_HANDICAP_EASY                 = 60.00;
    real      bj_GAME_STARTED_THRESHOLD        =  0.01;
    real      bj_WAIT_FOR_COND_MIN_INTERVAL    =  0.10;
    real      bj_POLLED_WAIT_INTERVAL          =  0.10;
    real      bj_POLLED_WAIT_SKIP_THRESHOLD    =  2.00;
    // Game constants
    int   bj_MAX_INVENTORY                 =   6;
    int   bj_MAX_PLAYERS                   =  12;
    int   bj_PLAYER_NEUTRAL_VICTIM         =  13;
    int   bj_PLAYER_NEUTRAL_EXTRA          =  14;
    int   bj_MAX_PLAYER_SLOTS              =  16;
    int   bj_MAX_SKELETONS                 =  25;
    int   bj_MAX_STOCK_ITEM_SLOTS          =  11;
    int   bj_MAX_STOCK_UNIT_SLOTS          =  11;
    int   bj_MAX_ITEM_LEVEL                =  10;
    // Ideally these would be looked up from Units/MiscData.txt,
    // but there is currently no script functionality exposed to do that
    real      bj_TOD_DAWN                      = 6.00;
    real      bj_TOD_DUSK                      = 18.00;
    // Melee game settings:
    //   - Starting Time of Day (TOD)
    //   - Starting Gold
    //   - Starting Lumber
    //   - Starting Hero Tokens (free heroes)
    //   - Max heroes allowed per player
    //   - Max heroes allowed per hero type
    //   - Distance from start loc to search for nearby mines
    //;
    real      bj_MELEE_STARTING_TOD            = 8.00;
    int   bj_MELEE_STARTING_GOLD_V0        = 750;
    int   bj_MELEE_STARTING_GOLD_V1        = 500;
    int   bj_MELEE_STARTING_LUMBER_V0      = 200;
    int   bj_MELEE_STARTING_LUMBER_V1      = 150;
    int   bj_MELEE_STARTING_HERO_TOKENS    = 1;
    int   bj_MELEE_HERO_LIMIT              = 3;
    int   bj_MELEE_HERO_TYPE_LIMIT         = 1;
    real      bj_MELEE_MINE_SEARCH_RADIUS      = 2000;
    real      bj_MELEE_CLEAR_UNITS_RADIUS      = 1500;
    real      bj_MELEE_CRIPPLE_TIMEOUT         = 120.00;
    real      bj_MELEE_CRIPPLE_MSG_DURATION    = 20.00;
    int   bj_MELEE_MAX_TWINKED_HEROES_V0   = 3;
    int   bj_MELEE_MAX_TWINKED_HEROES_V1   = 1;
    // Delay between a creep's death and the time it may drop an item.
    real      bj_CREEP_ITEM_DELAY              = 0.50;
    // Timing settings for Marketplace inventories.
    real      bj_STOCK_RESTOCK_INITIAL_DELAY   = 120;
    real      bj_STOCK_RESTOCK_INTERVAL        = 30;
    int   bj_STOCK_MAX_ITERATIONS          = 20;
    // Max events registered by a single "dest dies in region" event.
    int   bj_MAX_DEST_IN_REGION_EVENTS     = 64;
    // Camera settings
    int   bj_CAMERA_MIN_FARZ               = 100;
    int   bj_CAMERA_DEFAULT_DISTANCE       = 1650;
    int   bj_CAMERA_DEFAULT_FARZ           = 5000;
    int   bj_CAMERA_DEFAULT_AOA            = 304;
    int   bj_CAMERA_DEFAULT_FOV            = 70;
    int   bj_CAMERA_DEFAULT_ROLL           = 0;
    int   bj_CAMERA_DEFAULT_ROTATION       = 90;
    // Rescue
    real      bj_RESCUE_PING_TIME              = 2.00;
    // Transmission behavior settings
    real      bj_NOTHING_SOUND_DURATION        = 5.00;
    real      bj_TRANSMISSION_PING_TIME        = 1.00;
    int   bj_TRANSMISSION_IND_RED          = 255;
    int   bj_TRANSMISSION_IND_BLUE         = 255;
    int   bj_TRANSMISSION_IND_GREEN        = 255;
    int   bj_TRANSMISSION_IND_ALPHA        = 255;
    real      bj_TRANSMISSION_PORT_HANGTIME    = 1.50;
    // Cinematic mode settings
    real      bj_CINEMODE_INTERFACEFADE        = 0.50;
    gamespeed bj_CINEMODE_GAMESPEED            = MAP_SPEED_NORMAL;
    // Cinematic mode volume levels
    real      bj_CINEMODE_VOLUME_UNITMOVEMENT  = 0.40;
    real      bj_CINEMODE_VOLUME_UNITSOUNDS    = 0.00;
    real      bj_CINEMODE_VOLUME_COMBAT        = 0.40;
    real      bj_CINEMODE_VOLUME_SPELLS        = 0.40;
    real      bj_CINEMODE_VOLUME_UI            = 0.00;
    real      bj_CINEMODE_VOLUME_MUSIC         = 0.55;
    real      bj_CINEMODE_VOLUME_AMBIENTSOUNDS = 1.00;
    real      bj_CINEMODE_VOLUME_FIRE          = 0.60;
    // Speech mode volume levels
    real      bj_SPEECH_VOLUME_UNITMOVEMENT    = 0.25;
    real      bj_SPEECH_VOLUME_UNITSOUNDS      = 0.00;
    real      bj_SPEECH_VOLUME_COMBAT          = 0.25;
    real      bj_SPEECH_VOLUME_SPELLS          = 0.25;
    real      bj_SPEECH_VOLUME_UI              = 0.00;
    real      bj_SPEECH_VOLUME_MUSIC           = 0.55;
    real      bj_SPEECH_VOLUME_AMBIENTSOUNDS   = 1.00;
    real      bj_SPEECH_VOLUME_FIRE            = 0.60;
    // Smart pan settings
    real      bj_SMARTPAN_TRESHOLD_PAN         = 500;
    real      bj_SMARTPAN_TRESHOLD_SNAP        = 3500;
    // QueuedTriggerExecute settings
    int   bj_MAX_QUEUED_TRIGGERS           = 100;
    real      bj_QUEUED_TRIGGER_TIMEOUT        = 180.00;
    // Campaign indexing constants
    int   bj_CAMPAIGN_INDEX_T        = 0;
    int   bj_CAMPAIGN_INDEX_H        = 1;
    int   bj_CAMPAIGN_INDEX_U        = 2;
    int   bj_CAMPAIGN_INDEX_O        = 3;
    int   bj_CAMPAIGN_INDEX_N        = 4;
    int   bj_CAMPAIGN_INDEX_XN       = 5;
    int   bj_CAMPAIGN_INDEX_XH       = 6;
    int   bj_CAMPAIGN_INDEX_XU       = 7;
    int   bj_CAMPAIGN_INDEX_XO       = 8;
    // Campaign offset constants (for mission indexing)
    int   bj_CAMPAIGN_OFFSET_T       = 0;
    int   bj_CAMPAIGN_OFFSET_H       = 1;
    int   bj_CAMPAIGN_OFFSET_U       = 2;
    int   bj_CAMPAIGN_OFFSET_O       = 3;
    int   bj_CAMPAIGN_OFFSET_N       = 4;
    int   bj_CAMPAIGN_OFFSET_XN      = 0;
    int   bj_CAMPAIGN_OFFSET_XH      = 1;
    int   bj_CAMPAIGN_OFFSET_XU      = 2;
    int   bj_CAMPAIGN_OFFSET_XO      = 3;
    // Mission indexing constants
    // Tutorial
    int   bj_MISSION_INDEX_T00       = bj_CAMPAIGN_OFFSET_T * 1000 + 0;
    int   bj_MISSION_INDEX_T01       = bj_CAMPAIGN_OFFSET_T * 1000 + 1;
    // Human
    int   bj_MISSION_INDEX_H00       = bj_CAMPAIGN_OFFSET_H * 1000 + 0;
    int   bj_MISSION_INDEX_H01       = bj_CAMPAIGN_OFFSET_H * 1000 + 1;
    int   bj_MISSION_INDEX_H02       = bj_CAMPAIGN_OFFSET_H * 1000 + 2;
    int   bj_MISSION_INDEX_H03       = bj_CAMPAIGN_OFFSET_H * 1000 + 3;
    int   bj_MISSION_INDEX_H04       = bj_CAMPAIGN_OFFSET_H * 1000 + 4;
    int   bj_MISSION_INDEX_H05       = bj_CAMPAIGN_OFFSET_H * 1000 + 5;
    int   bj_MISSION_INDEX_H06       = bj_CAMPAIGN_OFFSET_H * 1000 + 6;
    int   bj_MISSION_INDEX_H07       = bj_CAMPAIGN_OFFSET_H * 1000 + 7;
    int   bj_MISSION_INDEX_H08       = bj_CAMPAIGN_OFFSET_H * 1000 + 8;
    int   bj_MISSION_INDEX_H09       = bj_CAMPAIGN_OFFSET_H * 1000 + 9;
    int   bj_MISSION_INDEX_H10       = bj_CAMPAIGN_OFFSET_H * 1000 + 10;
    int   bj_MISSION_INDEX_H11       = bj_CAMPAIGN_OFFSET_H * 1000 + 11;
    // Undead
    int   bj_MISSION_INDEX_U00       = bj_CAMPAIGN_OFFSET_U * 1000 + 0;
    int   bj_MISSION_INDEX_U01       = bj_CAMPAIGN_OFFSET_U * 1000 + 1;
    int   bj_MISSION_INDEX_U02       = bj_CAMPAIGN_OFFSET_U * 1000 + 2;
    int   bj_MISSION_INDEX_U03       = bj_CAMPAIGN_OFFSET_U * 1000 + 3;
    int   bj_MISSION_INDEX_U05       = bj_CAMPAIGN_OFFSET_U * 1000 + 4;
    int   bj_MISSION_INDEX_U07       = bj_CAMPAIGN_OFFSET_U * 1000 + 5;
    int   bj_MISSION_INDEX_U08       = bj_CAMPAIGN_OFFSET_U * 1000 + 6;
    int   bj_MISSION_INDEX_U09       = bj_CAMPAIGN_OFFSET_U * 1000 + 7;
    int   bj_MISSION_INDEX_U10       = bj_CAMPAIGN_OFFSET_U * 1000 + 8;
    int   bj_MISSION_INDEX_U11       = bj_CAMPAIGN_OFFSET_U * 1000 + 9;
    // Orc
    int   bj_MISSION_INDEX_O00       = bj_CAMPAIGN_OFFSET_O * 1000 + 0;
    int   bj_MISSION_INDEX_O01       = bj_CAMPAIGN_OFFSET_O * 1000 + 1;
    int   bj_MISSION_INDEX_O02       = bj_CAMPAIGN_OFFSET_O * 1000 + 2;
    int   bj_MISSION_INDEX_O03       = bj_CAMPAIGN_OFFSET_O * 1000 + 3;
    int   bj_MISSION_INDEX_O04       = bj_CAMPAIGN_OFFSET_O * 1000 + 4;
    int   bj_MISSION_INDEX_O05       = bj_CAMPAIGN_OFFSET_O * 1000 + 5;
    int   bj_MISSION_INDEX_O06       = bj_CAMPAIGN_OFFSET_O * 1000 + 6;
    int   bj_MISSION_INDEX_O07       = bj_CAMPAIGN_OFFSET_O * 1000 + 7;
    int   bj_MISSION_INDEX_O08       = bj_CAMPAIGN_OFFSET_O * 1000 + 8;
    int   bj_MISSION_INDEX_O09       = bj_CAMPAIGN_OFFSET_O * 1000 + 9;
    int   bj_MISSION_INDEX_O10       = bj_CAMPAIGN_OFFSET_O * 1000 + 10;
    // Night Elf
    int   bj_MISSION_INDEX_N00       = bj_CAMPAIGN_OFFSET_N * 1000 + 0;
    int   bj_MISSION_INDEX_N01       = bj_CAMPAIGN_OFFSET_N * 1000 + 1;
    int   bj_MISSION_INDEX_N02       = bj_CAMPAIGN_OFFSET_N * 1000 + 2;
    int   bj_MISSION_INDEX_N03       = bj_CAMPAIGN_OFFSET_N * 1000 + 3;
    int   bj_MISSION_INDEX_N04       = bj_CAMPAIGN_OFFSET_N * 1000 + 4;
    int   bj_MISSION_INDEX_N05       = bj_CAMPAIGN_OFFSET_N * 1000 + 5;
    int   bj_MISSION_INDEX_N06       = bj_CAMPAIGN_OFFSET_N * 1000 + 6;
    int   bj_MISSION_INDEX_N07       = bj_CAMPAIGN_OFFSET_N * 1000 + 7;
    int   bj_MISSION_INDEX_N08       = bj_CAMPAIGN_OFFSET_N * 1000 + 8;
    int   bj_MISSION_INDEX_N09       = bj_CAMPAIGN_OFFSET_N * 1000 + 9;
    // Expansion Night Elf
    int   bj_MISSION_INDEX_XN00       = bj_CAMPAIGN_OFFSET_XN * 1000 + 0;
    int   bj_MISSION_INDEX_XN01       = bj_CAMPAIGN_OFFSET_XN * 1000 + 1;
    int   bj_MISSION_INDEX_XN02       = bj_CAMPAIGN_OFFSET_XN * 1000 + 2;
    int   bj_MISSION_INDEX_XN03       = bj_CAMPAIGN_OFFSET_XN * 1000 + 3;
    int   bj_MISSION_INDEX_XN04       = bj_CAMPAIGN_OFFSET_XN * 1000 + 4;
    int   bj_MISSION_INDEX_XN05       = bj_CAMPAIGN_OFFSET_XN * 1000 + 5;
    int   bj_MISSION_INDEX_XN06       = bj_CAMPAIGN_OFFSET_XN * 1000 + 6;
    int   bj_MISSION_INDEX_XN07       = bj_CAMPAIGN_OFFSET_XN * 1000 + 7;
    int   bj_MISSION_INDEX_XN08       = bj_CAMPAIGN_OFFSET_XN * 1000 + 8;
    int   bj_MISSION_INDEX_XN09       = bj_CAMPAIGN_OFFSET_XN * 1000 + 9;
    int   bj_MISSION_INDEX_XN10       = bj_CAMPAIGN_OFFSET_XN * 1000 + 10;
    // Expansion Human
    int   bj_MISSION_INDEX_XH00       = bj_CAMPAIGN_OFFSET_XH * 1000 + 0;
    int   bj_MISSION_INDEX_XH01       = bj_CAMPAIGN_OFFSET_XH * 1000 + 1;
    int   bj_MISSION_INDEX_XH02       = bj_CAMPAIGN_OFFSET_XH * 1000 + 2;
    int   bj_MISSION_INDEX_XH03       = bj_CAMPAIGN_OFFSET_XH * 1000 + 3;
    int   bj_MISSION_INDEX_XH04       = bj_CAMPAIGN_OFFSET_XH * 1000 + 4;
    int   bj_MISSION_INDEX_XH05       = bj_CAMPAIGN_OFFSET_XH * 1000 + 5;
    int   bj_MISSION_INDEX_XH06       = bj_CAMPAIGN_OFFSET_XH * 1000 + 6;
    int   bj_MISSION_INDEX_XH07       = bj_CAMPAIGN_OFFSET_XH * 1000 + 7;
    int   bj_MISSION_INDEX_XH08       = bj_CAMPAIGN_OFFSET_XH * 1000 + 8;
    int   bj_MISSION_INDEX_XH09       = bj_CAMPAIGN_OFFSET_XH * 1000 + 9;
    // Expansion Undead
    int   bj_MISSION_INDEX_XU00       = bj_CAMPAIGN_OFFSET_XU * 1000 + 0;
    int   bj_MISSION_INDEX_XU01       = bj_CAMPAIGN_OFFSET_XU * 1000 + 1;
    int   bj_MISSION_INDEX_XU02       = bj_CAMPAIGN_OFFSET_XU * 1000 + 2;
    int   bj_MISSION_INDEX_XU03       = bj_CAMPAIGN_OFFSET_XU * 1000 + 3;
    int   bj_MISSION_INDEX_XU04       = bj_CAMPAIGN_OFFSET_XU * 1000 + 4;
    int   bj_MISSION_INDEX_XU05       = bj_CAMPAIGN_OFFSET_XU * 1000 + 5;
    int   bj_MISSION_INDEX_XU06       = bj_CAMPAIGN_OFFSET_XU * 1000 + 6;
    int   bj_MISSION_INDEX_XU07       = bj_CAMPAIGN_OFFSET_XU * 1000 + 7;
    int   bj_MISSION_INDEX_XU08       = bj_CAMPAIGN_OFFSET_XU * 1000 + 8;
    int   bj_MISSION_INDEX_XU09       = bj_CAMPAIGN_OFFSET_XU * 1000 + 9;
    int   bj_MISSION_INDEX_XU10       = bj_CAMPAIGN_OFFSET_XU * 1000 + 10;
    int   bj_MISSION_INDEX_XU11       = bj_CAMPAIGN_OFFSET_XU * 1000 + 11;
    int   bj_MISSION_INDEX_XU12       = bj_CAMPAIGN_OFFSET_XU * 1000 + 12;
    int   bj_MISSION_INDEX_XU13       = bj_CAMPAIGN_OFFSET_XU * 1000 + 13;
    // Expansion Orc
    int   bj_MISSION_INDEX_XO00       = bj_CAMPAIGN_OFFSET_XO * 1000 + 0;
    // Cinematic indexing constants
    int   bj_CINEMATICINDEX_TOP      = 0;
    int   bj_CINEMATICINDEX_HOP      = 1;
    int   bj_CINEMATICINDEX_HED      = 2;
    int   bj_CINEMATICINDEX_OOP      = 3;
    int   bj_CINEMATICINDEX_OED      = 4;
    int   bj_CINEMATICINDEX_UOP      = 5;
    int   bj_CINEMATICINDEX_UED      = 6;
    int   bj_CINEMATICINDEX_NOP      = 7;
    int   bj_CINEMATICINDEX_NED      = 8;
    int   bj_CINEMATICINDEX_XOP      = 9;
    int   bj_CINEMATICINDEX_XED      = 10;
    // Alliance settings
    int   bj_ALLIANCE_UNALLIED        = 0;
    int   bj_ALLIANCE_UNALLIED_VISION = 1;
    int   bj_ALLIANCE_ALLIED          = 2;
    int   bj_ALLIANCE_ALLIED_VISION   = 3;
    int   bj_ALLIANCE_ALLIED_UNITS    = 4;
    int   bj_ALLIANCE_ALLIED_ADVUNITS = 5;
    int   bj_ALLIANCE_NEUTRAL         = 6;
    int   bj_ALLIANCE_NEUTRAL_VISION  = 7;
    // Keyboard Event Types
    int   bj_KEYEVENTTYPE_DEPRESS     = 0;
    int   bj_KEYEVENTTYPE_RELEASE     = 1;
    // Keyboard Event Keys
    int   bj_KEYEVENTKEY_LEFT         = 0;
    int   bj_KEYEVENTKEY_RIGHT        = 1;
    int   bj_KEYEVENTKEY_DOWN         = 2;
    int   bj_KEYEVENTKEY_UP           = 3;
    // Transmission timing methods
    //int   bj_TIMETYPE_ADD             = 0;
    //int   bj_TIMETYPE_SET             = 1;
    //int   bj_TIMETYPE_SUB             = 2;
    // Camera bounds adjustment methods
    int   bj_CAMERABOUNDS_ADJUST_ADD  = 0;
    int   bj_CAMERABOUNDS_ADJUST_SUB  = 1;
    // Quest creation states
    int   bj_QUESTTYPE_REQ_DISCOVERED   = 0;
    int   bj_QUESTTYPE_REQ_UNDISCOVERED = 1;
    int   bj_QUESTTYPE_OPT_DISCOVERED   = 2;
    int   bj_QUESTTYPE_OPT_UNDISCOVERED = 3;
    // Quest message types
    int   bj_QUESTMESSAGE_DISCOVERED    = 0;
    int   bj_QUESTMESSAGE_UPDATED       = 1;
    int   bj_QUESTMESSAGE_COMPLETED     = 2;
    int   bj_QUESTMESSAGE_FAILED        = 3;
    int   bj_QUESTMESSAGE_REQUIREMENT   = 4;
    int   bj_QUESTMESSAGE_MISSIONFAILED = 5;
    int   bj_QUESTMESSAGE_ALWAYSHINT    = 6;
    int   bj_QUESTMESSAGE_HINT          = 7;
    int   bj_QUESTMESSAGE_SECRET        = 8;
    int   bj_QUESTMESSAGE_UNITACQUIRED  = 9;
    int   bj_QUESTMESSAGE_UNITAVAILABLE = 10;
    int   bj_QUESTMESSAGE_ITEMACQUIRED  = 11;
    int   bj_QUESTMESSAGE_WARNING       = 12;
    // Leaderboard sorting methods
    int   bj_SORTTYPE_SORTBYVALUE     = 0;
    int   bj_SORTTYPE_SORTBYPLAYER    = 1;
    int   bj_SORTTYPE_SORTBYLABEL     = 2;
    // Cinematic fade filter methods
    int   bj_CINEFADETYPE_FADEIN      = 0;
    int   bj_CINEFADETYPE_FADEOUT     = 1;
    int   bj_CINEFADETYPE_FADEOUTIN   = 2;
    // Buff removal methods
    int   bj_REMOVEBUFFS_POSITIVE     = 0;
    int   bj_REMOVEBUFFS_NEGATIVE     = 1;
    int   bj_REMOVEBUFFS_ALL          = 2;
    int   bj_REMOVEBUFFS_NONTLIFE     = 3;
    // Buff properties - polarity
    int   bj_BUFF_POLARITY_POSITIVE   = 0;
    int   bj_BUFF_POLARITY_NEGATIVE   = 1;
    int   bj_BUFF_POLARITY_EITHER     = 2;
    // Buff properties - resist type
    int   bj_BUFF_RESIST_MAGIC        = 0;
    int   bj_BUFF_RESIST_PHYSICAL     = 1;
    int   bj_BUFF_RESIST_EITHER       = 2;
    int   bj_BUFF_RESIST_BOTH         = 3;
    // Hero stats
    int   bj_HEROSTAT_STR             = 0;
    int   bj_HEROSTAT_AGI             = 1;
    int   bj_HEROSTAT_INT             = 2;
    // Hero skill point modification methods
    int   bj_MODIFYMETHOD_ADD    = 0;
    int   bj_MODIFYMETHOD_SUB    = 1;
    int   bj_MODIFYMETHOD_SET    = 2;
    // Unit state adjustment methods (for replaced units)
    int   bj_UNIT_STATE_METHOD_ABSOLUTE = 0;
    int   bj_UNIT_STATE_METHOD_RELATIVE = 1;
    int   bj_UNIT_STATE_METHOD_DEFAULTS = 2;
    int   bj_UNIT_STATE_METHOD_MAXIMUM  = 3;
    // Gate operations
    int   bj_GATEOPERATION_CLOSE      = 0;
    int   bj_GATEOPERATION_OPEN       = 1;
    int   bj_GATEOPERATION_DESTROY    = 2;
	// Game cache value types
	int   bj_GAMECACHE_BOOLEAN                 = 0;
	int   bj_GAMECACHE_INTEGER                 = 1;
	int   bj_GAMECACHE_REAL                    = 2;
	int   bj_GAMECACHE_UNIT                    = 3;
	int   bj_GAMECACHE_STRING                  = 4;
	;
	// Hashtable value types
	int   bj_HASHTABLE_BOOLEAN                 = 0;
	int   bj_HASHTABLE_INTEGER                 = 1;
	int   bj_HASHTABLE_REAL                    = 2;
	int   bj_HASHTABLE_STRING                  = 3;
	int   bj_HASHTABLE_HANDLE                  = 4;
    // Item status types
    int   bj_ITEM_STATUS_HIDDEN       = 0;
    int   bj_ITEM_STATUS_OWNED        = 1;
    int   bj_ITEM_STATUS_INVULNERABLE = 2;
    int   bj_ITEM_STATUS_POWERUP      = 3;
    int   bj_ITEM_STATUS_SELLABLE     = 4;
    int   bj_ITEM_STATUS_PAWNABLE     = 5;
    // Itemcode status types
    int   bj_ITEMCODE_STATUS_POWERUP  = 0;
    int   bj_ITEMCODE_STATUS_SELLABLE = 1;
    int   bj_ITEMCODE_STATUS_PAWNABLE = 2;
    // Minimap ping styles
    int   bj_MINIMAPPINGSTYLE_SIMPLE  = 0;
    int   bj_MINIMAPPINGSTYLE_FLASHY  = 1;
    int   bj_MINIMAPPINGSTYLE_ATTACK  = 2;
    // Corpse creation settings
    real      bj_CORPSE_MAX_DEATH_TIME    = 8.00;
    // Corpse creation styles
    int   bj_CORPSETYPE_FLESH         = 0;
    int   bj_CORPSETYPE_BONE          = 1;
    // Elevator pathing-blocker destructable code
    int   bj_ELEVATOR_BLOCKER_CODE    = 'DTep';
    int   bj_ELEVATOR_CODE01          = 'DTrf';
    int   bj_ELEVATOR_CODE02          = 'DTrx';
    // Elevator wall codes
    int   bj_ELEVATOR_WALL_TYPE_ALL        = 0;
    int   bj_ELEVATOR_WALL_TYPE_EAST       = 1;
    int   bj_ELEVATOR_WALL_TYPE_NORTH      = 2;
    int   bj_ELEVATOR_WALL_TYPE_SOUTH      = 3;
    int   bj_ELEVATOR_WALL_TYPE_WEST       = 4;
    //-----------------------------------------------------------------------;
    // Variables
    //;
    // Force predefs
    force              bj_FORCE_ALL_PLAYERS;
    force[8192]       bj_FORCE_PLAYER;
    integer            bj_MELEE_MAX_TWINKED_HEROES = 0;
    // Map area rects
    rect               bj_mapInitialPlayableArea;
    rect               bj_mapInitialCameraBounds;
    // Utility function vars
    integer            bj_forLoopAIndex            = 0;
    integer            bj_forLoopBIndex            = 0;
    integer            bj_forLoopAIndexEnd         = 0;
    integer            bj_forLoopBIndexEnd         = 0;
    boolean            bj_slotControlReady         = false;
    boolean[8192]     bj_slotControlUsed;
    mapcontrol[8192]  bj_slotControl;
    // Game started detection vars
    timer              bj_gameStartedTimer;
    boolean            bj_gameStarted              = false;
    timer              bj_volumeGroupsTimer        = CreateTimer();
    // Singleplayer check
    boolean            bj_isSinglePlayer           = false;
    // Day/Night Cycle vars
    trigger            bj_dncSoundsDay;
    trigger            bj_dncSoundsNight;
    sound              bj_dayAmbientSound;
    sound              bj_nightAmbientSound;
    trigger            bj_dncSoundsDawn;
    trigger            bj_dncSoundsDusk;
    sound              bj_dawnSound;
    sound              bj_duskSound;
    boolean            bj_useDawnDuskSounds        = true;
    boolean            bj_dncIsDaytime             = false;
    // Triggered sounds
    //sound              bj_pingMinimapSound;
    soundhandle              bj_rescueSound;
    soundhandle              bj_questDiscoveredSound;
    soundhandle              bj_questUpdatedSound;
    soundhandle              bj_questCompletedSound;
    soundhandle              bj_questFailedSound;
    soundhandle              bj_questHintSound;
    soundhandle              bj_questSecretSound;
    soundhandle              bj_questItemAcquiredSound;
    soundhandle              bj_questWarningSound;
    soundhandle              bj_victoryDialogSound;
    soundhandle              bj_defeatDialogSound;
    // Marketplace vars
    trigger            bj_stockItemPurchased;
    timer              bj_stockUpdateTimer;
    boolean[8192]     bj_stockAllowedPermanent;
    boolean[8192]     bj_stockAllowedCharged;
    boolean[8192]     bj_stockAllowedArtifact;
    integer            bj_stockPickedItemLevel     = 0;
    itemtype           bj_stockPickedItemType;
    // Melee vars
    trigger            bj_meleeVisibilityTrained;
    boolean            bj_meleeVisibilityIsDay     = true;
    boolean            bj_meleeGrantHeroItems      = false;
    location           bj_meleeNearestMineToLoc;
    unit               bj_meleeNearestMine;
    real               bj_meleeNearestMineDist     = 0.00;
    boolean            bj_meleeGameOver            = false;
    boolean[8192]     bj_meleeDefeated;
    boolean[8192]     bj_meleeVictoried;
    unit[8192]        bj_ghoul;
    timer[8192]       bj_crippledTimer;
    timerdialog[8192] bj_crippledTimerWindows;
    boolean[8192]     bj_playerIsCrippled;
    boolean[8192]     bj_playerIsExposed;
    boolean            bj_finishSoonAllExposed     = false;
    timerdialog        bj_finishSoonTimerDialog;
    integer[8192]     bj_meleeTwinkedHeroes;
    // Rescue behavior vars
    trigger            bj_rescueUnitBehavior;
    boolean            bj_rescueChangeColorUnit    = true;
    boolean            bj_rescueChangeColorBldg    = true;
    // Transmission vars
    timer              bj_cineSceneEndingTimer;
    sound              bj_cineSceneLastSound;
    trigger            bj_cineSceneBeingSkipped;
    // Cinematic mode vars
    gamespeed          bj_cineModePriorSpeed       = MAP_SPEED_NORMAL;
    boolean            bj_cineModePriorFogSetting  = false;
    boolean            bj_cineModePriorMaskSetting = false;
    boolean            bj_cineModeAlreadyIn        = false;
    boolean            bj_cineModePriorDawnDusk    = false;
    integer            bj_cineModeSavedSeed        = 0;
    // Cinematic fade vars
    timer              bj_cineFadeFinishTimer;
    timer              bj_cineFadeContinueTimer;
    real               bj_cineFadeContinueRed      = 0;
    real               bj_cineFadeContinueGreen    = 0;
    real               bj_cineFadeContinueBlue     = 0;
    real               bj_cineFadeContinueTrans    = 0;
    real               bj_cineFadeContinueDuration = 0;
    string             bj_cineFadeContinueTex      = "";
    // QueuedTriggerExecute vars
    integer            bj_queuedExecTotal          = 0;
    trigger[8192]     bj_queuedExecTriggers;
    boolean[8192]     bj_queuedExecUseConds;
    timer              bj_queuedExecTimeoutTimer   = CreateTimer();
    trigger            bj_queuedExecTimeout;
    // Helper vars (for Filter and Enum funcs)
    integer            bj_destInRegionDiesCount    = 0;
    trigger            bj_destInRegionDiesTrig;
    integer            bj_groupCountUnits          = 0;
    integer            bj_forceCountPlayers        = 0;
    integer            bj_groupEnumTypeId          = 0;
    player             bj_groupEnumOwningPlayer;
    group              bj_groupAddGroupDest;
    group              bj_groupRemoveGroupDest;
    integer            bj_groupRandomConsidered    = 0;
    unit               bj_groupRandomCurrentPick;
    group              bj_groupLastCreatedDest;
    group              bj_randomSubGroupGroup;
    integer            bj_randomSubGroupWant       = 0;
    integer            bj_randomSubGroupTotal      = 0;
    real               bj_randomSubGroupChance     = 0;
    integer            bj_destRandomConsidered     = 0;
    destructable       bj_destRandomCurrentPick;
    destructable       bj_elevatorWallBlocker;
    destructable       bj_elevatorNeighbor;
    integer            bj_itemRandomConsidered     = 0;
    item               bj_itemRandomCurrentPick;
    integer            bj_forceRandomConsidered    = 0;
    player             bj_forceRandomCurrentPick;
    unit               bj_makeUnitRescuableUnit;
    boolean            bj_makeUnitRescuableFlag    = true;
    boolean            bj_pauseAllUnitsFlag        = true;
    location           bj_enumDestructableCenter;
    real               bj_enumDestructableRadius   = 0;
    playercolor        bj_setPlayerTargetColor;
    boolean            bj_isUnitGroupDeadResult    = true;
    boolean            bj_isUnitGroupEmptyResult   = true;
    boolean            bj_isUnitGroupInRectResult  = true;
    rect               bj_isUnitGroupInRectRect;
    boolean            bj_changeLevelShowScores    = false;
    string             bj_changeLevelMapName;
    group              bj_suspendDecayFleshGroup   = CreateGroup();
    group              bj_suspendDecayBoneGroup    = CreateGroup();
    timer              bj_delayedSuspendDecayTimer = CreateTimer();
    trigger            bj_delayedSuspendDecayTrig;
    integer            bj_livingPlayerUnitsTypeId  = 0;
    widget             bj_lastDyingWidget;
    // Random distribution vars
    integer            bj_randDistCount            = 0;
    integer[8192]     bj_randDistID;
    integer[8192]     bj_randDistChance;
    // Last X'd vars
    unit               bj_lastCreatedUnit;
    item               bj_lastCreatedItem;
    item               bj_lastRemovedItem;
    unit               bj_lastHauntedGoldMine;
    destructable       bj_lastCreatedDestructable;
    group              bj_lastCreatedGroup         = CreateGroup();
    fogmodifier        bj_lastCreatedFogModifier;
    effect             bj_lastCreatedEffect;
    weathereffect      bj_lastCreatedWeatherEffect;
    terraindeformation bj_lastCreatedTerrainDeformation;
    quest              bj_lastCreatedQuest;
    questitem          bj_lastCreatedQuestItem;
    defeatcondition    bj_lastCreatedDefeatCondition;
    timer              bj_lastStartedTimer         = CreateTimer();
    timerdialog        bj_lastCreatedTimerDialog;
    leaderboard        bj_lastCreatedLeaderboard;
    multiboard         bj_lastCreatedMultiboard;
    soundhandle              bj_lastPlayedSound;
    string             bj_lastPlayedMusic          = "";
    real               bj_lastTransmissionDuration = 0;
    gamecache          bj_lastCreatedGameCache;
    hashtable          bj_lastCreatedHashtable;
    unit               bj_lastLoadedUnit;
    button             bj_lastCreatedButton;
    unit               bj_lastReplacedUnit;
    texttag            bj_lastCreatedTextTag;
    lightning          bj_lastCreatedLightning;
    image              bj_lastCreatedImage;
    ubersplat          bj_lastCreatedUbersplat;
    // Filter function vars
    boolexpr           filterIssueHauntOrderAtLocBJ;
    boolexpr           filterEnumDestructablesInCircleBJ;
    boolexpr           filterGetUnitsInRectOfPlayer;
    boolexpr           filterGetUnitsOfTypeIdAll;
    boolexpr           filterGetUnitsOfPlayerAndTypeId;
    boolexpr           filterMeleeTrainedUnitIsHeroBJ;
    boolexpr           filterLivingPlayerUnitsOfTypeId;
    // Memory cleanup vars
    boolean            bj_wantDestroyGroup         = false;
//endglobals

//--------------------------------------------------------------------------------------------------
// Custom Script: Blizzard.j
//--------------------------------------------------------------------------------------------------
//***************************************************************************
//*
//*  Debugging Functions
//*
//***************************************************************************
//===========================================================================
void BJDebugMsg(string msg){
    TriggerDebugOutput(1, StringExternal(msg), true);
}
//***************************************************************************
//*
//*  Math Utility Functions
//*
//***************************************************************************
//===========================================================================
real RMinBJ(real a, real b){
    if ((a < b)) {
        return a;
    }else{
        return b;
    }
}
//===========================================================================
real RMaxBJ(real a, real b){
    if ((a < b)) {
        return b;
    }else{
        return a;
    }
}
//===========================================================================
real RAbsBJ(real a){
    if ((a >= 0)) {
        return a;
    }else{
        return -a;
    }
}
//===========================================================================
real RSignBJ(real a){
    if ((a >= 0.0)) {
        return 1.0;
    }else{
        return -1.0;
    }
}
//===========================================================================
integer IMinBJ(integer a, integer b){
    if ((a < b)) {
        return a;
    }else{
        return b;
    }
}
//===========================================================================
integer IMaxBJ(integer a, integer b){
    if ((a < b)) {
        return b;
    }else{
        return a;
    }
}
//===========================================================================
integer IAbsBJ(integer a){
    if ((a >= 0)) {
        return a;
    }else{
        return -a;
    }
}
//===========================================================================
integer ISignBJ(integer a){
    if ((a >= 0)) {
        return 1;
    }else{
        return -1;
    }
}
//***************************************************************************
//*
//*  Utility Constructs
//*
//***************************************************************************
//===========================================================================
// Runs the trigger's actions if (the trigger's conditions evaluate to true.
//
void ConditionalTriggerExecute(trigger trig){
    TriggerExecute(trig, true, false);
}
//===========================================================================
// Runs the trigger's actions if (the trigger's conditions evaluate to true.
//
boolean TriggerExecuteBJ(trigger trig, boolean checkConditions){
    if (checkConditions) {
        if (! (TriggerEvaluate(trig))) {
            return false;
        }
    }
    cj_TriggerExecute(trig);
    return true;
}
//===========================================================================
// Arranges for a trigger to fire almost immediately, except that the calling
// trigger is not interrupted as is the case with a TriggerExecute call.
// Since the trigger executes normally, its conditions are still evaluated.
//
boolean PostTriggerExecuteBJ(trigger trig, boolean checkConditions){
    if (checkConditions) {
        if (! (TriggerEvaluate(trig))) {
            return false;
        }
    }
    TriggerRegisterTimerEvent(trig, 0, false);
    return true;
}
//===========================================================================
// Debug - Display the contents of the trigger queue (as either null || "x"
// for each entry).
void QueuedTriggerCheck(){
    string s = "TrigQueue Check ";
    integer i;
    i = 0;
    while(true){
        if (i >= bj_queuedExecTotal){break;}
        s = s + "q[" + I2S(i) + "]=";
        if ((bj_queuedExecTriggers[i] == null)) {
            s = s + "null ";
        }else{
            s = s + "x ";
        }
        i = i + 1;
    }
    s = s + "(" + I2S(bj_queuedExecTotal) + " total)";
    UIDisplayMessage(PlayerGroupAll(), c_messageAreaDebug, StringExternal(s));
}
//===========================================================================
// Searches the queue for a given trigger, returning the index of the
// trigger within the queue if (it is found, || -1 if (it is not found.
//
integer QueuedTriggerGetIndex(trigger trig){
    // Determine which, if (any, of the queued triggers is being removed.
    integer index     = 0;
    while(true){
        if (index >= bj_queuedExecTotal){break;}
        if ((bj_queuedExecTriggers[index] == trig)) {
            return index;
        }
        index = index + 1;
    }
    return -1;
}
//===========================================================================
// Removes a trigger from the trigger queue, shifting other triggers down
// to fill the unused space.  if (the currently running trigger is removed
// in this manner, this function does NOT attempt to run the next trigger.
//
boolean QueuedTriggerRemoveByIndex(integer trigIndex){
    integer index;
    // if (the to-be-removed index is out of range, fail.
    if ((trigIndex >= bj_queuedExecTotal)) {
        return false;
    }
    // Shift all queue entries down to fill in the gap.
    bj_queuedExecTotal = bj_queuedExecTotal - 1;
    index = trigIndex;
    while(true){
        if (index >= bj_queuedExecTotal){break;}
        bj_queuedExecTriggers[index] = bj_queuedExecTriggers[index + 1];
        bj_queuedExecUseConds[index] = bj_queuedExecUseConds[index + 1];
        index = index + 1;
    }
    return true;
}
//===========================================================================
// Attempt to execute the first trigger in the queue.  if (it fails, remove
// it && execute the next one.  Continue this cycle until a trigger runs,
// || until the queue is empty.
//
boolean QueuedTriggerAttemptExec(){
    while(true){
        if (bj_queuedExecTotal == 0){break;}
        if (TriggerExecuteBJ(bj_queuedExecTriggers[0], bj_queuedExecUseConds[0])) {
            // Timeout the queue if (it sits at the front of the queue for too long.
            cj_TimerStart(bj_queuedExecTimeoutTimer, bj_QUEUED_TRIGGER_TIMEOUT, false, null);
            return true;
        }
        QueuedTriggerRemoveByIndex(0);
    }
    return false;
}
//===========================================================================
// Queues a trigger to be executed, assuring that such triggers are not
// executed at the same time.
//
boolean QueuedTriggerAddBJ(trigger trig, boolean checkConditions){
    // Make sure our queue isn't full.  if (it is, return failure.;
    if ((bj_queuedExecTotal >= bj_MAX_QUEUED_TRIGGERS)) {
        return false;
    }
    // Add the trigger to an array of to-be-executed triggers.
    bj_queuedExecTriggers[bj_queuedExecTotal] = trig;
    bj_queuedExecUseConds[bj_queuedExecTotal] = checkConditions;
    bj_queuedExecTotal = bj_queuedExecTotal + 1;
    // if (this is the only trigger in the queue, run it.
    if ((bj_queuedExecTotal == 1)) {
        QueuedTriggerAttemptExec();
    }
    return true;
}
//===========================================================================
// Denotes the end of a queued trigger. Be sure to this only once per
// queued trigger, || risk stepping on the toes of other queued triggers.
//
void QueuedTriggerRemoveBJ(trigger trig){
    integer index;
    integer trigIndex;
    boolean trigExecuted;
    // Find the trigger's index.
    trigIndex = QueuedTriggerGetIndex(trig);
    if ((trigIndex == -1)) {
        return;
    }
    // Shuffle the other trigger entries down to fill in the gap.
    QueuedTriggerRemoveByIndex(trigIndex);
    // if (we just axed the currently running trigger, run the next one.
    if ((trigIndex == 0)) {
        PauseTimer(bj_queuedExecTimeoutTimer);
        QueuedTriggerAttemptExec();
    }
}
//===========================================================================
// Denotes the end of a queued trigger. Be sure to this only once per
// queued trigger, lest you step on the toes of other queued triggers.
//
bool QueuedTriggerDoneBJ(bool a, bool b){
    integer index;
    // Make sure there's something on the queue to remove.
    if ((bj_queuedExecTotal <= 0)) {
        return true;
    }
    // Remove the currently running trigger from the array.
    QueuedTriggerRemoveByIndex(0);
    // if (other triggers are waiting to run, run one of them.
    PauseTimer(bj_queuedExecTimeoutTimer);
    QueuedTriggerAttemptExec();
    return true;
}
//===========================================================================
// Empty the trigger queue.
//
void QueuedTriggerClearBJ(){
    PauseTimer(bj_queuedExecTimeoutTimer);
    bj_queuedExecTotal = 0;
}
//===========================================================================
// Remove all but the currently executing trigger from the trigger queue.
//
void QueuedTriggerClearInactiveBJ(){
    bj_queuedExecTotal = IMinBJ(bj_queuedExecTotal, 1);
}
//===========================================================================
integer QueuedTriggerCountBJ(){
    return bj_queuedExecTotal;
}
//===========================================================================
boolean IsTriggerQueueEmptyBJ(){
    return bj_queuedExecTotal <= 0;
}
//===========================================================================
boolean IsTriggerQueuedBJ(trigger trig){
    return QueuedTriggerGetIndex(trig) != -1;
}
//===========================================================================
integer GetForLoopIndexA(){
    return bj_forLoopAIndex;
}
//===========================================================================
void SetForLoopIndexA(integer newIndex){
    bj_forLoopAIndex = newIndex;
}
//===========================================================================
integer GetForLoopIndexB(){
    return bj_forLoopBIndex;
}
//===========================================================================
void SetForLoopIndexB(integer newIndex){
    bj_forLoopBIndex = newIndex;
}
//===========================================================================
// We can't do game-time waits, so this simulates one by starting a timer
// && polling until the timer expires.
void PolledWait(real duration){
    Wait(duration,c_timeGame);
}
//===========================================================================
integer IntegerTertiaryOp(boolean flag, integer valueA, integer valueB){
    if (flag) {
        return valueA;
    }else{
        return valueB;
    }
}
void VolumeGroupSetVolumeForPlayerBJ(player whichPlayer, volumegroup vgroup, real scale){
    SoundChannelSetVolume(PlayerGroupSingle(whichPlayer),vgroup,scale*100,0);
}
void CinematicFadeBJ(integer fadetype, real duration, string tex, real red, real green, real blue, real trans){
    if(red==0){
        tex="Assets\\Textures\\CameraMasks\\Black_mask.tga";
    }else{
        tex=StringReplaceWord(tex,"ReplaceableTextures\\", "Assets\\Textures\\", c_stringReplaceAll, c_stringNoCase);
        tex=StringReplaceWord(tex,".blp", ".tga", c_stringReplaceAll, c_stringNoCase);
    }
    //CinematicOverlay(fadetype>0, duration, tex, trans, false);
    //temp
    CinematicFade(fadetype!=1, duration, c_fadeStyleNormal, Color(0.00, 0.00, 0.00), 0.0, false);
}
integer PercentToInt(real percentage, integer max){
    integer result = FixedToInt(percentage * IntToFixed(max) * 0.01);
    if ((result < 0)) {
   result = 0;
    }else if ((result > max)) {
   result = max;
    }
    return result;
}
//===========================================================================
integer PercentTo255(real percentage){
    return PercentToInt(percentage, 255);;
}
//***************************************************************************
//*
//*  General Utility Functions
//*  These functions exist purely to make the trigger dialogs cleaner and
//*  more comprehensible.
//*
//***************************************************************************
//===========================================================================
void DoNothing(){
}
//===========================================================================
// This function does nothing.  WorldEdit should should eventually ignore
// CommentString triggers during script generation, but until such a time,
// this function will serve as a stub.
//
void CommentString(string commentString){
}
//===========================================================================
// This function returns the input string, converting it from the localized text, if (necessary
//
string StringIdentity(string theString){
    return GetLocalizedString(theString);;
}
//===========================================================================
boolean GetBooleanAnd(boolean valueA, boolean valueB){
    return valueA && valueB;
}
//===========================================================================
boolean GetBooleanOr(boolean valueA, boolean valueB){
    return valueA || valueB;
}
void TriggerSleepAction(real timeout){
    Wait(timeout, c_timeReal);
}
force GetPlayersAll(){
    return PlayerGroupAll();
}
void ClearMapMusicBJ(){
    ClearMapMusic();
}
location GetRectCenter(rect whichRect){
    return RegionGetCenter(whichRect);
}
//===========================================================================
void PlayThematicMusicBJ(string musicName){
    PlayThematicMusic(musicName);
}
//===========================================================================
void SetMapMusicIndexedBJ(string musicName, integer index){
    SetMapMusic(musicName, false, index);
}
//===========================================================================
void SetMapMusicRandomBJ (string musicName){
    SetMapMusic(musicName, true, 0);
}
//===========================================================================
void PlaySoundBJ(soundhandle soundHandle){
    bj_lastPlayedSound = soundHandle;
    if (soundHandle != null) {
        StartSound(soundHandle);
    }
}
//===========================================================================
void StopSoundBJ(soundhandle soundHandle, boolean fadeOut){
    StopSound(soundHandle, false, fadeOut);
}
//===========================================================================
boolean IssuePointOrderLocBJ(unit whichUnit, string ord, location whichLocation){
    return IssuePointOrderLoc(whichUnit, ord, whichLocation);
}
//***************************************************************************
//*
//*  Camera Utility Functions
//*
//***************************************************************************
//===========================================================================
void CameraSetupApplyForPlayer(boolean doPan, camerasetup whichSetup, player whichPlayer, real duration){
    CameraApplyInfo(whichPlayer, whichSetup, duration, -1, 10.0, true);
}
//***************************************************************************
//*
//*  Cinematic Mode Utility Functions
//*
//***************************************************************************
//===========================================================================
// Makes many common UI settings changes at once, for use when beginning and
// ending cinematic sequences.  Note that some affects apply to all players,
// such as game speed.  This is unavoidable.
//   - Clear the screen of text messages
//   - Hide interface UI (letterbox mode)
//   - Hide game messages (ally under attack, etc.)
//   - Disable user control
//   - Disable occlusion
//   - Set game speed (for all players)
//   - Lock game speed (for all players)
//   - Disable black mask (for all players)
//   - Disable fog of war (for all players)
//   - Disable world boundary fog (for all players)
//   - Dim non-speech sound channels
//   - End any outstanding music themes
//   - Fix the random seed to a set value
//   - Reset the camera smoothing factor
//
void CinematicModeExBJ(boolean cineMode, force forForce, real interfaceFadeTime){
    string param="1";
    libNtve_gf_CinematicMode(cineMode, forForce, interfaceFadeTime);
    libNtve_gf_GlobalCinematicSetting(cineMode);
    TriggerStop(GAw3_CinSkipPrep);
    if(cineMode){TriggerExecute(GAw3_CinSkipPrep,true,false);param="0";}
    libNtve_gf_SendActorMessageToGameRegionWithFilters(RegionEntireMap(), c_actorIntersectAgainstRadiusContact, "SetVisibility "+param, "Model", "IsKnownAs War3_HeroGlow");
}
//===========================================================================
void CinematicModeBJ(boolean cineMode, force forForce){
    CinematicModeExBJ(cineMode, forForce, bj_CINEMODE_INTERFACEFADE);
}
void TransmissionFromUnitWithNameBJ(force toForce, unit whichUnit, string unitName, soundhandle soundHandle, string message, integer timeType, real timeVal, boolean wait){
    soundlink SndLink=SoundLink(soundHandle,0);
    transmissionsource ts=TransmissionSource();
    bool cinMode=libNtve_gf_PlayerInCinematicMode(PlayerGroupPlayer(toForce,1));
    string anim="Talk";
    int portrait=libNtve_gf_CinematicPortrait(4);
    if(!cinMode){portrait=PortraitGetGame();}
    if(UnitIsValid(whichUnit)){ts=TransmissionSourceFromUnit(whichUnit, true, false, "IGNORE");}else{portrait=c_invalidPortraitId;}
    bj_lastPlayedSound = soundHandle;
    TransmissionClearAll();
    PortraitSetTeamColor(libNtve_gf_CinematicPortrait(4), libNtve_gf_ConvertPlayerColorToColor(PlayerGetColorIndex(UnitGetOwner(whichUnit), false)));
    ActorSend(ActorFromPortrait(libNtve_gf_CinematicPortrait(4)), "AnimGroupApply Portrait,Stand");
    TransmissionSend(toForce, ts, portrait, anim, SndLink, StringExternal(unitName), StringExternal(message), timeVal, timeType, wait);
    DataTableSetTransmission (true,"GAw3_Sound_"+soundHandle,TransmissionLastSent());
}
void TransmissionFromUnitTypeWithNameBJ(force toForce, player fromPlayer, integer unitId, string unitName, location loc, soundhandle soundHandle, string message, integer timeType, real timeVal, boolean wait){
    soundlink SndLink=SoundLink(soundHandle,0);
    transmissionsource ts=TransmissionSource();
    bool cinMode=libNtve_gf_PlayerInCinematicMode(PlayerGroupPlayer(toForce,1));
    string anim="Talk";
    int portrait=libNtve_gf_CinematicPortrait(4);
    if(!cinMode){portrait=PortraitGetGame();}
    if(unitId!=0){ts=TransmissionSourceFromUnitType(GAw3_IntToASCII4(unitId), false);}else{portrait=c_invalidPortraitId;}
    bj_lastPlayedSound = soundHandle;
    //TransmissionClear(TransmissionLastSent ());
    TransmissionClearAll();
    PortraitSetTeamColor(libNtve_gf_CinematicPortrait(4), libNtve_gf_ConvertPlayerColorToColor(PlayerGetColorIndex(0, false)));
    ActorSend(ActorFromPortrait(libNtve_gf_CinematicPortrait(4)), "AnimGroupApply Portrait,Stand");
    TransmissionSend(toForce, ts, portrait, "Talk", SndLink, StringExternal(unitName), StringExternal(message), timeVal, timeType, wait);
    DataTableSetTransmission (true,"GAw3_Sound_"+soundHandle,TransmissionLastSent());
}
void SetDoodadAnimationRectBJ(string animName, integer doodadID, rect r){
    SetDoodadAnimationRect(r, doodadID, animName, false);
}
void ResetToGameCameraForPlayer (player whichPlayer, real duration ){
    CameraApplyInfo(whichPlayer, CameraInfoDefault(), duration , -1, 10.0, false);
}
void PanCameraToTimedLocForPlayer(player whichPlayer, location loc, real duration){
    CameraPan(whichPlayer, loc, duration, -1, 10.0, false);
}
void CameraResetSmoothingFactorBJ(  ){
}
void SetUnitPositionLocFacingBJ(unit whichUnit, location loc, real facing){
    SetUnitPositionLoc(whichUnit, loc);
    SetUnitFacing(whichUnit, facing);
}
//===========================================================================
void PlaySound(string soundName){
    SoundPlay(SoundLink(soundName, -1), PlayerGroupAll(), 100.0, 0.0);
}
//===========================================================================
void WaitForSoundBJ(soundhandle soundHandle, real offset){
    TriggerWaitForSound(soundHandle, offset );
}
//===========================================================================
void UnitRemoveBuffsBJ(integer buffType, unit whichUnit){
    if (buffType == bj_REMOVEBUFFS_POSITIVE){
   UnitRemoveBuffs(whichUnit, true, false);
    }else if (buffType == bj_REMOVEBUFFS_NEGATIVE) {
   UnitRemoveBuffs(whichUnit, false, true);
    }else if (buffType == bj_REMOVEBUFFS_ALL) {
   UnitRemoveBuffs(whichUnit, true, true);
    }else if (buffType == bj_REMOVEBUFFS_NONTLIFE) {
   UnitRemoveBuffsEx(whichUnit, true, true, false, false, false, true, false);
    }else{
   // Unrecognized dispel type - ignore the request.
    }
}
//===========================================================================
void UnitRemoveBuffsExBJ(integer polarity, integer resist, unit whichUnit, boolean bTLife, boolean bAura){
    boolean bPos   = (polarity == bj_BUFF_POLARITY_EITHER) || (polarity == bj_BUFF_POLARITY_POSITIVE);
    boolean bNeg   = (polarity == bj_BUFF_POLARITY_EITHER) || (polarity == bj_BUFF_POLARITY_NEGATIVE);
    boolean bMagic = (resist == bj_BUFF_RESIST_BOTH) || (resist == bj_BUFF_RESIST_MAGIC);
    boolean bPhys  = (resist == bj_BUFF_RESIST_BOTH) || (resist == bj_BUFF_RESIST_PHYSICAL);
    UnitRemoveBuffsEx(whichUnit, bPos, bNeg, bMagic, bPhys, bTLife, bAura, false);
}
//===========================================================================
// Sets a unit's facing to point directly at a location.
//
void SetUnitFacingToFaceLocTimed(unit whichUnit, location target, real duration){
    location unitLoc = GetUnitLoc(whichUnit);
    SetUnitFacingTimed(whichUnit, AngleBetweenPoints(unitLoc, target), duration);
    RemoveLocation(unitLoc);
}
//===========================================================================
// Sets a unit's facing to point directly at another unit.
//
void SetUnitFacingToFaceUnitTimed(unit whichUnit, unit target, real duration){
    location unitLoc = GetUnitLoc(target);
    SetUnitFacingToFaceLocTimed(whichUnit, unitLoc, duration);
    RemoveLocation(unitLoc);
}
//===========================================================================
void SetSoundVolumeBJ(soundhandle soundHandle, real volumePercent){
    SetSoundVolume(soundHandle, PercentToInt(volumePercent, 127));
}
//===========================================================================
void SetTimeOfDay(real whatTime){
    int hour=TruncI(whatTime);
    int minute=RoundI((whatTime-hour)*60);
    string h=IntToString(hour);
    string m=IntToString(minute);
    GameTimeOfDaySet (h+":"+m+":00");
}
//group GetUnitsOfPlayerAndTypeId(player whichPlayer, integer unitid){
//    return UnitGroup(GAw3_IntToASCII4(unitid), whichPlayer, RegionEntireMap(), Unit, 0);
//}
boolean IssueImmediateOrderBJ(unit whichUnit, string ord){
    return IssueImmediateOrder( whichUnit, ord );
}
//===========================================================================
void VolumeGroupResetImmediateBJ(){
    VolumeGroupReset();
}
//===========================================================================
void VolumeGroupResetBJ(){
        VolumeGroupResetImmediateBJ();
}
//===========================================================================
void VolumeGroupSetVolumeBJ(volumegroup vgroup, real percent){
    VolumeGroupSetVolume(vgroup, percent * 0.01);
}
//===========================================================================
void AttachSoundToUnitBJ(soundhandle soundHandle, unit whichUnit){
    AttachSoundToUnit(soundHandle, whichUnit);
}
//***************************************************************************
//*
//*  Campaign Utility Functions
//*
//***************************************************************************
void SetCampaignMenuRaceBJ(integer campaignNumber){
    if ((campaignNumber == bj_CAMPAIGN_INDEX_T)) {
        SetCampaignMenuRace(RACE_OTHER);
    }else if ((campaignNumber == bj_CAMPAIGN_INDEX_H)) {
        SetCampaignMenuRace(RACE_HUMAN);
    }else if ((campaignNumber == bj_CAMPAIGN_INDEX_U)) {
        SetCampaignMenuRace(RACE_UNDEAD);
    }else if ((campaignNumber == bj_CAMPAIGN_INDEX_O)) {
        SetCampaignMenuRace(RACE_ORC);
    }else if ((campaignNumber == bj_CAMPAIGN_INDEX_N)) {
        SetCampaignMenuRace(RACE_NIGHTELF);
    }else if ((campaignNumber == bj_CAMPAIGN_INDEX_XN)) {
        SetCampaignMenuRaceEx(bj_CAMPAIGN_OFFSET_XN);
    }else if ((campaignNumber == bj_CAMPAIGN_INDEX_XH)) {
        SetCampaignMenuRaceEx(bj_CAMPAIGN_OFFSET_XH);
    }else if ((campaignNumber == bj_CAMPAIGN_INDEX_XU)) {
        SetCampaignMenuRaceEx(bj_CAMPAIGN_OFFSET_XU);
    }else if ((campaignNumber == bj_CAMPAIGN_INDEX_XO)) {
        SetCampaignMenuRaceEx(bj_CAMPAIGN_OFFSET_XO);
    }else{
        // Unrecognized campaign - ignore the request
    }
}
//===========================================================================
// Converts a single campaign mission designation into campaign && mission
// numbers.  The 1000's digit is considered the campaign index, && the 1's
// digit is considered the mission index within that campaign.  This is done
// so that the trigger for this can use a single drop-down to list all of
// the campaign missions.
//
void SetMissionAvailableBJ(boolean available, integer missionIndex){
    integer campaignNumber = missionIndex / 1000;
    integer missionNumber = missionIndex - campaignNumber * 1000;
    SetMissionAvailable(campaignNumber, missionNumber, available);
}
//===========================================================================
void SetCampaignAvailableBJ(boolean available, integer campaignNumber){
    integer campaignOffset;
    if ((campaignNumber == bj_CAMPAIGN_INDEX_H)) {
        SetTutorialCleared(true);
    }
    if ((campaignNumber == bj_CAMPAIGN_INDEX_XN)) {
        campaignOffset = bj_CAMPAIGN_OFFSET_XN;
    }else if ((campaignNumber == bj_CAMPAIGN_INDEX_XH)) {
        campaignOffset = bj_CAMPAIGN_OFFSET_XH;
    }else if ((campaignNumber == bj_CAMPAIGN_INDEX_XU)) {
        campaignOffset = bj_CAMPAIGN_OFFSET_XU;
    }else if ((campaignNumber == bj_CAMPAIGN_INDEX_XO)) {
        campaignOffset = bj_CAMPAIGN_OFFSET_XO;
    }else{
        campaignOffset = campaignNumber;
    }
    SetCampaignAvailable(campaignOffset, available);
    SetCampaignMenuRaceBJ(campaignNumber);
    ForceCampaignSelectScreen();
}
//===========================================================================
void SetCinematicAvailableBJ(boolean available, integer cinematicIndex){
    if (( cinematicIndex == bj_CINEMATICINDEX_TOP )) {
        SetOpCinematicAvailable( bj_CAMPAIGN_INDEX_T, available );
        PlayCinematic( "TutorialOp" );
    }else if ((cinematicIndex == bj_CINEMATICINDEX_HOP)) {
        SetOpCinematicAvailable( bj_CAMPAIGN_INDEX_H, available );
        PlayCinematic( "HumanOp" );
    }else if ((cinematicIndex == bj_CINEMATICINDEX_HED)) {
        SetEdCinematicAvailable( bj_CAMPAIGN_INDEX_H, available );
        PlayCinematic( "HumanEd" );
    }else if ((cinematicIndex == bj_CINEMATICINDEX_OOP)) {
        SetOpCinematicAvailable( bj_CAMPAIGN_INDEX_O, available );
        PlayCinematic( "OrcOp" );
    }else if ((cinematicIndex == bj_CINEMATICINDEX_OED)) {
        SetEdCinematicAvailable( bj_CAMPAIGN_INDEX_O, available );
        PlayCinematic( "OrcEd" );
    }else if ((cinematicIndex == bj_CINEMATICINDEX_UOP)) {
        SetEdCinematicAvailable( bj_CAMPAIGN_INDEX_U, available );
        PlayCinematic( "UndeadOp" );
    }else if ((cinematicIndex == bj_CINEMATICINDEX_UED)) {
        SetEdCinematicAvailable( bj_CAMPAIGN_INDEX_U, available );
        PlayCinematic( "UndeadEd" );
    }else if ((cinematicIndex == bj_CINEMATICINDEX_NOP)) {
        SetEdCinematicAvailable( bj_CAMPAIGN_INDEX_N, available );
        PlayCinematic( "NightElfOp" );
    }else if ((cinematicIndex == bj_CINEMATICINDEX_NED)) {
        SetEdCinematicAvailable( bj_CAMPAIGN_INDEX_N, available );
        PlayCinematic( "NightElfEd" );
    }else if ((cinematicIndex == bj_CINEMATICINDEX_XOP)) {
        SetOpCinematicAvailable( bj_CAMPAIGN_OFFSET_XN, available );
        PlayCinematic( "IntroX" );
    }else if ((cinematicIndex == bj_CINEMATICINDEX_XED)) {
        SetEdCinematicAvailable( bj_CAMPAIGN_OFFSET_XU, available );
        PlayCinematic( "OutroX" );
    }else{
        // Unrecognized cinematic - ignore the request.
    }
}
//===========================================================================
gamecache InitGameCacheBJ(string campaignFile){
    bj_lastCreatedGameCache = InitGameCache(campaignFile);
    return bj_lastCreatedGameCache;
}
//===========================================================================
boolean SaveGameCacheBJ(gamecache cache){
    return SaveGameCache(cache);;
}
//===========================================================================
void StoreRealBJ(real value, string key, string missionKey, gamecache cache){
    StoreReal(cache, missionKey, key, value);
}
//===========================================================================
void StoreIntegerBJ(integer value, string key, string missionKey, gamecache cache){
    StoreInteger(cache, missionKey, key, value);
}
//===========================================================================
void StoreBooleanBJ(boolean value, string key, string missionKey, gamecache cache){
    StoreBoolean(cache, missionKey, key, value);
}
//===========================================================================
boolean StoreStringBJ(string value, string key, string missionKey, gamecache cache){
    return StoreString(cache, missionKey, key, value);;
}
//===========================================================================
boolean StoreUnitBJ(unit whichUnit, string key, string missionKey, gamecache cache){
    return StoreUnit(cache, missionKey, key, whichUnit);;
}
//===========================================================================
gamecache GetLastCreatedGameCacheBJ(){
    return bj_lastCreatedGameCache;
}
//***************************************************************************
//*
//*  Alliance Utility Functions
//*
//***************************************************************************
//===========================================================================
void SetPlayerAllianceBJ(player sourcePlayer, alliancetype whichAllianceSetting, boolean value, player otherPlayer){
    // Prevent players from attempting to ally with themselves.
    if ((sourcePlayer == otherPlayer)) {
        return;
    }
    SetPlayerAlliance(sourcePlayer, otherPlayer, whichAllianceSetting, value);
}
//===========================================================================
// all flags used by the in-game "Ally" checkbox.
//
void SetPlayerAllianceStateAllyBJ(player sourcePlayer, player otherPlayer, boolean flag){
    SetPlayerAlliance(sourcePlayer, otherPlayer, ALLIANCE_PASSIVE,       flag);
    SetPlayerAlliance(sourcePlayer, otherPlayer, ALLIANCE_HELP_REQUEST,  flag);
    SetPlayerAlliance(sourcePlayer, otherPlayer, ALLIANCE_HELP_RESPONSE, flag);
    SetPlayerAlliance(sourcePlayer, otherPlayer, ALLIANCE_SHARED_XP,     flag);
    SetPlayerAlliance(sourcePlayer, otherPlayer, ALLIANCE_SHARED_SPELLS, flag);
}
//===========================================================================
// all flags used by the in-game "Shared Vision" checkbox.
//
void SetPlayerAllianceStateVisionBJ(player sourcePlayer, player otherPlayer, boolean flag){
    SetPlayerAlliance(sourcePlayer, otherPlayer, ALLIANCE_SHARED_VISION, flag);
}
//===========================================================================
// all flags used by the in-game "Shared Units" checkbox.
//
void SetPlayerAllianceStateControlBJ(player sourcePlayer, player otherPlayer, boolean flag){
    SetPlayerAlliance(sourcePlayer, otherPlayer, ALLIANCE_SHARED_CONTROL, flag);
}
//===========================================================================
// all flags used by the in-game "Shared Units" checkbox with the Full
// Shared Unit Control feature enabled.
//
void SetPlayerAllianceStateFullControlBJ(player sourcePlayer, player otherPlayer, boolean flag){
    SetPlayerAlliance(sourcePlayer, otherPlayer, ALLIANCE_SHARED_ADVANCED_CONTROL, flag);
}
//===========================================================================
void SetPlayerAllianceStateBJ(player sourcePlayer, player otherPlayer, integer allianceState){
    // Prevent players from attempting to ally with themselves.
    if ((sourcePlayer == otherPlayer)) {
        return;
    }
    if (allianceState == bj_ALLIANCE_UNALLIED) {
        SetPlayerAllianceStateAllyBJ(        sourcePlayer, otherPlayer, false );
        SetPlayerAllianceStateVisionBJ(      sourcePlayer, otherPlayer, false );
        SetPlayerAllianceStateControlBJ(     sourcePlayer, otherPlayer, false );
        SetPlayerAllianceStateFullControlBJ( sourcePlayer, otherPlayer, false );
    }else if (allianceState == bj_ALLIANCE_UNALLIED_VISION) {
        SetPlayerAllianceStateAllyBJ(        sourcePlayer, otherPlayer, false );
        SetPlayerAllianceStateVisionBJ(      sourcePlayer, otherPlayer, true  );
        SetPlayerAllianceStateControlBJ(     sourcePlayer, otherPlayer, false );
        SetPlayerAllianceStateFullControlBJ( sourcePlayer, otherPlayer, false );
    }else if (allianceState == bj_ALLIANCE_ALLIED) {
        SetPlayerAllianceStateAllyBJ(        sourcePlayer, otherPlayer, true  );
        SetPlayerAllianceStateVisionBJ(      sourcePlayer, otherPlayer, false );
        SetPlayerAllianceStateControlBJ(     sourcePlayer, otherPlayer, false );
        SetPlayerAllianceStateFullControlBJ( sourcePlayer, otherPlayer, false );
    }else if (allianceState == bj_ALLIANCE_ALLIED_VISION) {
        SetPlayerAllianceStateAllyBJ(        sourcePlayer, otherPlayer, true  );
        SetPlayerAllianceStateVisionBJ(      sourcePlayer, otherPlayer, true  );
        SetPlayerAllianceStateControlBJ(     sourcePlayer, otherPlayer, false );
        SetPlayerAllianceStateFullControlBJ( sourcePlayer, otherPlayer, false );
    }else if (allianceState == bj_ALLIANCE_ALLIED_UNITS) {
        SetPlayerAllianceStateAllyBJ(        sourcePlayer, otherPlayer, true  );
        SetPlayerAllianceStateVisionBJ(      sourcePlayer, otherPlayer, true  );
        SetPlayerAllianceStateControlBJ(     sourcePlayer, otherPlayer, true  );
        SetPlayerAllianceStateFullControlBJ( sourcePlayer, otherPlayer, false );
    }else if (allianceState == bj_ALLIANCE_ALLIED_ADVUNITS) {
        SetPlayerAllianceStateAllyBJ(        sourcePlayer, otherPlayer, true  );
        SetPlayerAllianceStateVisionBJ(      sourcePlayer, otherPlayer, true  );
        SetPlayerAllianceStateControlBJ(     sourcePlayer, otherPlayer, true  );
        SetPlayerAllianceStateFullControlBJ( sourcePlayer, otherPlayer, true  );
    }else if (allianceState == bj_ALLIANCE_NEUTRAL) {
        SetPlayerAllianceStateAllyBJ(        sourcePlayer, otherPlayer, false );
        SetPlayerAllianceStateVisionBJ(      sourcePlayer, otherPlayer, false );
        SetPlayerAllianceStateControlBJ(     sourcePlayer, otherPlayer, false );
        SetPlayerAllianceStateFullControlBJ( sourcePlayer, otherPlayer, false );
        SetPlayerAlliance( sourcePlayer, otherPlayer, ALLIANCE_PASSIVE, true );
    }else if (allianceState == bj_ALLIANCE_NEUTRAL_VISION) {
        SetPlayerAllianceStateAllyBJ(        sourcePlayer, otherPlayer, false );
        SetPlayerAllianceStateVisionBJ(      sourcePlayer, otherPlayer, true  );
        SetPlayerAllianceStateControlBJ(     sourcePlayer, otherPlayer, false );
        SetPlayerAllianceStateFullControlBJ( sourcePlayer, otherPlayer, false );
        SetPlayerAlliance( sourcePlayer, otherPlayer, ALLIANCE_PASSIVE, true );
    }else{
        // Unrecognized alliance state - ignore the request.
    }
}
//===========================================================================
void SetPlayerColorBJEnum(){
    //Unused
}
//===========================================================================
void SetPlayerColorBJ(player whichPlayer, playercolor inColor, boolean changeExisting){
    PlayerSetColorIndex(whichPlayer,inColor,changeExisting);
}
//===========================================================================
void SetNextLevelBJ(string nextLevel){
    //if ((nextLevel == "")) {
        //bj_changeLevelMapName = null;
    //}else{
        //bj_changeLevelMapName = nextLevel;
    //}
}
//===========================================================================
void SetPlayerOnScoreScreenBJ(boolean flag, player whichPlayer){
    SetPlayerOnScoreScreen(whichPlayer, flag);
}
void SetPlayerFlagBJ(playerstate whichPlayerFlag, boolean flag, player whichPlayer){
    SetPlayerState(whichPlayer, whichPlayerFlag, IntegerTertiaryOp(flag, 1, 0));
}
//***************************************************************************
//*
//*  Group and Force Utility Functions
//*
//***************************************************************************
//===========================================================================
void ForGroupBJ(group whichGroup, code callback){
    // if (the user wants the group destroyed, remember that fact and clear
    // the flag, in case it is used again in the callback.
    boolean wantDestroy = bj_wantDestroyGroup;
    bj_wantDestroyGroup = false;
    ForGroup(whichGroup, callback);
    // if (the user wants the group destroyed, do so now.
    if ((wantDestroy)) {
        DestroyGroup(whichGroup);
    }
}
//===========================================================================
void GroupAddUnitSimple(unit whichUnit, group whichGroup){
    GroupAddUnit(whichGroup, whichUnit);
}
//===========================================================================
void GroupRemoveUnitSimple(unit whichUnit, group whichGroup){
    GroupRemoveUnit(whichGroup, whichUnit);
}
//===========================================================================
void GroupRemoveGroupEnum(){
    //Unused
    //GroupRemoveUnit(bj_groupRemoveGroupDest, GetEnumUnit());
}
//===========================================================================
void GroupRemoveGroup(group sourceGroup, group destGroup){
    // if (the user wants the group destroyed, remember that fact and clear
    // the flag, in case it is used again in the callback.
    boolean wantDestroy = bj_wantDestroyGroup;
    bj_wantDestroyGroup = false;
    UnitGroupRemoveUnitGroup(destGroup,sourceGroup);
    // if (the user wants the group destroyed, do so now.
    if ((wantDestroy)) {
        DestroyGroup(sourceGroup);
    }
}
//===========================================================================
void SetPlayerHandicapXPBJ(player whichPlayer, real handicapPercent){
    SetPlayerHandicapXP(whichPlayer, handicapPercent * 0.01);
}
//===========================================================================
void CountUnitsInGroupEnum(){
    bj_groupCountUnits = bj_groupCountUnits + 1;
}
//===========================================================================
integer CountUnitsInGroup(group g){
    // if (the user wants the group destroyed, remember that fact && clear
    // the flag, in case it is used again in the callback.
    boolean wantDestroy = bj_wantDestroyGroup;
    bj_wantDestroyGroup = false;
    bj_groupCountUnits = 0;
    ForGroup(g, CountUnitsInGroupEnum);
    // if (the user wants the group destroyed, do so now.
    if ((wantDestroy)) {
        DestroyGroup(g);
    }
    return bj_groupCountUnits;
}
//===========================================================================
group GetUnitsInRectMatching(rect r, boolexpr filter){
    group g = CreateGroup();
    GroupEnumUnitsInRect(g, r, filter);
    DestroyBoolExpr(filter);
    return g;
}
//===========================================================================
group GetUnitsInRectAll(rect r){
	return UnitGroup(null, c_playerAny, r, GAw3_DefaultFilterNoHidden,c_noMaxCount);
}
//===========================================================================
boolean GetUnitsInRectOfPlayerFilter(){
	//Unused
    return GetOwningPlayer(GetFilterUnit()) == bj_groupEnumOwningPlayer;
}
//===========================================================================
group GetUnitsInRectOfPlayer(rect r, player whichPlayer){
	return UnitGroup(null, whichPlayer, r, GAw3_DefaultFilterNoHidden,c_noMaxCount);
}
//===========================================================================
group GetUnitsInRangeOfLocMatching(real radius, location whichLocation, boolexpr filter){
    group g = CreateGroup();
    GroupEnumUnitsInRangeOfLoc(g, whichLocation, radius, filter);
    DestroyBoolExpr(filter);
    return g;
}
//===========================================================================
group GetUnitsInRangeOfLocAll(real radius, location whichLocation){
    return UnitGroupSearch(null,c_playerAny,whichLocation,radius/128,GAw3_DefaultFilterNoHidden,c_noMaxCount);
}
//===========================================================================
boolean GetUnitsOfTypeIdAllFilter(){
	//Unused
    return GetUnitTypeId(GetFilterUnit()) == bj_groupEnumTypeId;
}
//===========================================================================
group GetUnitsOfTypeIdAll(integer unitid){
	return UnitGroup(GAw3_IntToASCII4(unitid), c_playerAny, RegionEntireMap(), GAw3_DefaultFilter, c_noMaxCount);
}
//===========================================================================
group GetUnitsOfPlayerMatching(player whichPlayer, boolexpr filter){
    group g = CreateGroup();
    GroupEnumUnitsOfPlayer(g, whichPlayer, filter);
    DestroyBoolExpr(filter);
    return g;
}
//===========================================================================
group GetUnitsOfPlayerAll(player whichPlayer){
	return UnitGroup(null, whichPlayer, RegionEntireMap(), GAw3_DefaultFilter, c_noMaxCount);
}
//===========================================================================
boolean GetUnitsOfPlayerAndTypeIdFilter(){
	//Unused
    return GetUnitTypeId(GetFilterUnit()) == bj_groupEnumTypeId;
}
//===========================================================================
group GetUnitsOfPlayerAndTypeId(player whichPlayer, integer unitid){
	return UnitGroup(GAw3_IntToASCII4(unitid), whichPlayer, RegionEntireMap(), GAw3_DefaultFilter, c_noMaxCount);
}
//===========================================================================
group GetUnitsSelectedAll(player whichPlayer){
	return UnitGroupSelected(whichPlayer);
}
//===========================================================================
void GroupAddGroupEnum(){
    //Unused
    //GroupAddUnit(bj_groupAddGroupDest, GetEnumUnit());
}
//===========================================================================
void GroupAddGroup(group sourceGroup, group destGroup){
    UnitGroupAddUnitGroup (destGroup, sourceGroup);
}
//===========================================================================
void EnableDawnDusk(boolean flag){
    bj_useDawnDuskSounds = flag;
    GAw3_Core_useTODSound=flag;
}
//===========================================================================
void UseTimeOfDayBJ(boolean flag){
    SuspendTimeOfDay(!flag);
}
//===========================================================================
void SetTimeOfDayScalePercentBJ(real scalePercent){
    SetTimeOfDayScale(scalePercent * 0.01);
}
//===========================================================================
real GetTimeOfDayScalePercentBJ(){
    return GetTimeOfDayScale() * 100;
}
//===========================================================================
// Consider each unit, one at a time, keeping a "current pick".   Once all units
// are considered, this "current pick" will be the resulting random unit.
//
// The chance of picking a given unit over the "current pick" is 1/N, where N is
// the number of units considered thusfar (including the current consideration).
//
void GroupPickRandomUnitEnum(){
    bj_groupRandomConsidered = bj_groupRandomConsidered + 1;
    if ((GetRandomInt(1,bj_groupRandomConsidered) == 1)) {
        bj_groupRandomCurrentPick = GetEnumUnit();
    }
}
//===========================================================================
// Picks a random unit from a group.
//
unit GroupPickRandomUnit(group whichGroup){
    // if (the user wants the group destroyed, remember that fact && clear
    // the flag, in case it is used again in the callback.
    boolean wantDestroy = bj_wantDestroyGroup;
    bj_wantDestroyGroup = false;
    bj_groupRandomConsidered = 0;
    bj_groupRandomCurrentPick = null;
    //ForGroup(whichGroup, function GroupPickRandomUnitEnum);
    bj_groupRandomCurrentPick=UnitGroupRandomUnit(whichGroup,c_unitCountAll);
    // if (the user wants the group destroyed, do so now.
    if ((wantDestroy)) {
        DestroyGroup(whichGroup);
    }
    return bj_groupRandomCurrentPick;
}
//===========================================================================
fogmodifier CreateFogModifierRectSimple(player whichPlayer, fogstate whichFogState, rect r, boolean afterUnits){
    bj_lastCreatedFogModifier = CreateFogModifierRect(whichPlayer, whichFogState, r, true, afterUnits);
    return bj_lastCreatedFogModifier;
}
//===========================================================================
fogmodifier CreateFogModifierRadiusLocSimple(player whichPlayer, fogstate whichFogState, location center, real radius, boolean afterUnits){
    bj_lastCreatedFogModifier = CreateFogModifierRadiusLoc(whichPlayer, whichFogState, center, radius, true, afterUnits);
    return bj_lastCreatedFogModifier;
}
//===========================================================================
// Version of CreateFogModifierRect that assumes use of sharedVision and
// gives the option of immediately enabling the modifier, so that triggers
// can default to modifiers that are immediately enabled.
//
fogmodifier CreateFogModifierRectBJ(boolean enabled, player whichPlayer, fogstate whichFogState, rect r){
    bj_lastCreatedFogModifier = CreateFogModifierRect(whichPlayer, whichFogState, r, true, false);
    if (enabled) {
        FogModifierStart(bj_lastCreatedFogModifier);
    }
    return bj_lastCreatedFogModifier;
}
//===========================================================================
// Version of CreateFogModifierRadius that assumes use of sharedVision and
// gives the option of immediately enabling the modifier, so that triggers
// can default to modifiers that are immediately enabled.
//
fogmodifier CreateFogModifierRadiusLocBJ(boolean enabled, player whichPlayer, fogstate whichFogState, location center, real radius){
    bj_lastCreatedFogModifier = CreateFogModifierRadiusLoc(whichPlayer, whichFogState, center, radius, true, false);
    if (enabled) {
        FogModifierStart(bj_lastCreatedFogModifier);
    }
    return bj_lastCreatedFogModifier;
}
//===========================================================================
fogmodifier GetLastCreatedFogModifier(){
    return bj_lastCreatedFogModifier;
}
//===========================================================================
// Query the playable map area, as defined at map init.
//
rect GetPlayableMapRect(){
    return RegionPlayableMap();
}
//===========================================================================
// Query the entire map area, as defined at map init.
//
rect GetEntireMapRect(){
    return GetWorldBounds();;
}
//===========================================================================
unit CreateUnitAtLocSaveLast(player id, integer unitid, location loc, real face){
    if ((unitid == 'ugol')) {
        bj_lastCreatedUnit = CreateBlightedGoldmine(id, GetLocationX(loc), GetLocationY(loc), face);
    }else{
        bj_lastCreatedUnit = CreateUnitAtLoc(id, unitid, loc, face);
    }
    return bj_lastCreatedUnit;
}
//===========================================================================
unit GetLastCreatedUnit(){
    return bj_lastCreatedUnit;
}
//===========================================================================
group CreateNUnitsAtLoc(integer count, integer unitId, player whichPlayer, location loc, real face){
    GroupClear(bj_lastCreatedGroup);
    while(true){
        count = count - 1;
        if (count < 0){break;}
        CreateUnitAtLocSaveLast(whichPlayer, unitId, loc, face);
        GroupAddUnit(bj_lastCreatedGroup, bj_lastCreatedUnit);
    }
    return bj_lastCreatedGroup;
}
//===========================================================================
group CreateNUnitsAtLocFacingLocBJ(integer count, integer unitId, player whichPlayer, location loc, location lookAt){
    return CreateNUnitsAtLoc(count, unitId, whichPlayer, loc, AngleBetweenPoints(loc, lookAt));;
}
//===========================================================================
void GetLastCreatedGroupEnum(){
    GroupAddUnit(bj_groupLastCreatedDest, GetEnumUnit());
}
//===========================================================================
group GetLastCreatedGroup(){
    bj_groupLastCreatedDest = CreateGroup();
    ForGroup(bj_lastCreatedGroup, GetLastCreatedGroupEnum);
    return bj_groupLastCreatedDest;
}
//===========================================================================
unit CreateCorpseLocBJ(integer unitid, player whichPlayer, location loc){
    bj_lastCreatedUnit = CreateCorpse(whichPlayer, unitid, GetLocationX(loc), GetLocationY(loc), GetRandomReal(0, 360));
    return bj_lastCreatedUnit;
}
//===========================================================================
void SetStackedSoundBJ(boolean add, soundhandle soundHandle, rect r){
    real width = GetRectMaxX(r) - GetRectMinX(r);
    real height = GetRectMaxY(r) - GetRectMinY(r);
    SetSoundPosition(soundHandle, GetRectCenterX(r), GetRectCenterY(r), 0);
    if (add) {
        RegisterStackedSound(soundHandle, true, width, height);
    }else{
        UnregisterStackedSound(soundHandle, true, width, height);
    }
}
//===========================================================================
void StartSoundForPlayerBJ(player whichPlayer, soundhandle soundHandle){
    point p;
    playergroup pg=PlayerGroupSingle(whichPlayer);
    if(!DataTableGetBool(true,"GAw3_Sound_"+soundHandle+"_Killed")){
        if(DataTableValueExists(true,"GAw3_Sound_"+soundHandle+"_Unit")){
            SoundPlayOnUnit(SoundLink(soundHandle,-1), pg, DataTableGetUnit(true,"GAw3_Sound_"+soundHandle+"_Unit"), 0.0, 100.0, 0.0);
        }else if(DataTableValueExists(true,"GAw3_Sound_"+soundHandle+"_Position")){
        p=DataTableGetPoint(true,"GAw3_Sound_"+soundHandle+"_Position");	SoundPlayAtPoint(SoundLink(soundHandle,-1),pg,DataTableGetPoint(true,"GAw3_Sound_"+soundHandle+"_Position"),PointGetHeight(p),100,0);
        }else{
            SoundPlay(SoundLink(soundHandle,-1), pg, 100.0, 0.0);
        }
        DataTableSetSound(true,"GAw3_Sound_"+soundHandle,SoundLastPlayed ());
        if(DataTableValueExists(true,"GAw3_Sound_"+soundHandle+"_Vol")){
            SoundSetVolume(SoundLastPlayed (),DataTableGetFixed(true,"GAw3_Sound_"+soundHandle+"_Vol"));
        }
    }
}
//===========================================================================
event TriggerRegisterPlayerSelectionEventBJ(trigger trig, player whichPlayer, boolean selected){
    if (selected) {
        return TriggerRegisterPlayerUnitEvent(trig, whichPlayer, EVENT_PLAYER_UNIT_SELECTED, null);;
    }else{
        return TriggerRegisterPlayerUnitEvent(trig, whichPlayer, EVENT_PLAYER_UNIT_DESELECTED, null);;
    }
}
//===========================================================================
event TriggerRegisterPlayerKeyEventBJ(trigger trig, player whichPlayer, integer keType, integer keKey){
    if ((keType == bj_KEYEVENTTYPE_DEPRESS)) {
        // Depress event - find out what key
        if ((keKey == bj_KEYEVENTKEY_LEFT)) {
            return TriggerRegisterPlayerEvent(trig, whichPlayer, EVENT_PLAYER_ARROW_LEFT_DOWN);;
        }else if ((keKey == bj_KEYEVENTKEY_RIGHT)) {
            return TriggerRegisterPlayerEvent(trig, whichPlayer, EVENT_PLAYER_ARROW_RIGHT_DOWN);;
        }else if ((keKey == bj_KEYEVENTKEY_DOWN)) {
            return TriggerRegisterPlayerEvent(trig, whichPlayer, EVENT_PLAYER_ARROW_DOWN_DOWN);;
        }else if ((keKey == bj_KEYEVENTKEY_UP)) {
            return TriggerRegisterPlayerEvent(trig, whichPlayer, EVENT_PLAYER_ARROW_UP_DOWN);;
        }else{
            // Unrecognized key - ignore the request && return failure.;
            return 0;
        }
    }else if ((keType == bj_KEYEVENTTYPE_RELEASE)) {
        // Release event - find out what key
        if ((keKey == bj_KEYEVENTKEY_LEFT)) {
            return TriggerRegisterPlayerEvent(trig, whichPlayer, EVENT_PLAYER_ARROW_LEFT_UP);;
        }else if ((keKey == bj_KEYEVENTKEY_RIGHT)) {
            return TriggerRegisterPlayerEvent(trig, whichPlayer, EVENT_PLAYER_ARROW_RIGHT_UP);;
        }else if ((keKey == bj_KEYEVENTKEY_DOWN)) {
            return TriggerRegisterPlayerEvent(trig, whichPlayer, EVENT_PLAYER_ARROW_DOWN_UP);;
        }else if ((keKey == bj_KEYEVENTKEY_UP)) {
            return TriggerRegisterPlayerEvent(trig, whichPlayer, EVENT_PLAYER_ARROW_UP_UP);;
        }else{
            // Unrecognized key - ignore the request && return failure.;
            return 0;
        }
    }else{
        // Unrecognized type - ignore the request && return failure.;
        return 0;
    }
}
//===========================================================================
event TriggerRegisterPlayerEventVictory(trigger trig, player whichPlayer){
    return TriggerRegisterPlayerEvent(trig, whichPlayer, EVENT_PLAYER_VICTORY);;
}
//===========================================================================
event TriggerRegisterPlayerEventDefeat(trigger trig, player whichPlayer){
    return TriggerRegisterPlayerEvent(trig, whichPlayer, EVENT_PLAYER_DEFEAT);;
}
//===========================================================================
event TriggerRegisterPlayerEventLeave(trigger trig, player whichPlayer){
    return TriggerRegisterPlayerEvent(trig, whichPlayer, EVENT_PLAYER_LEAVE);;
}
//===========================================================================
event TriggerRegisterPlayerEventAllianceChanged(trigger trig, player whichPlayer){
    return TriggerRegisterPlayerEvent(trig, whichPlayer, EVENT_PLAYER_ALLIANCE_CHANGED);;
}
//===========================================================================
event TriggerRegisterPlayerEventEndCinematic(trigger trig, player whichPlayer){
    return TriggerRegisterPlayerEvent(trig, whichPlayer, EVENT_PLAYER_END_CINEMATIC);;
}
//===========================================================================
event TriggerRegisterGameStateEventTimeOfDay(trigger trig, limitop opcode, real limitval){
    return 
    TriggerRegisterGameStateEvent(trig, GAME_STATE_TIME_OF_DAY, opcode, limitval);
}
//===========================================================================
event TriggerRegisterEnterRegionSimple(trigger trig, region whichRegion){
    return TriggerRegisterEnterRegion(trig, whichRegion, null);;
}
//===========================================================================
event TriggerRegisterLeaveRegionSimple(trigger trig, region whichRegion){
    return TriggerRegisterLeaveRegion(trig, whichRegion, null);;
}
//===========================================================================
event TriggerRegisterEnterRectSimple(trigger trig, rect r){
    region rectRegion = CreateRegion();
    RegionAddRegion(rectRegion, r);
    return TriggerRegisterEnterRegion(trig, rectRegion, null);;
}
//===========================================================================
// Determine whether || ! victory/defeat is disabled via cheat codes.
//
boolean AllowVictoryDefeat(playergameresult gameResult){
    if ((gameResult == PLAYER_GAME_RESULT_VICTORY)) {
        return ! IsNoVictoryCheat();;
    }
    if ((gameResult == PLAYER_GAME_RESULT_DEFEAT)) {
        return ! IsNoDefeatCheat();;
    }
    if ((gameResult == PLAYER_GAME_RESULT_NEUTRAL)) {
        return (! IsNoVictoryCheat()) && (! IsNoDefeatCheat());;
    }
    return true;
}
//===========================================================================
void EndGameBJ(){
    EndGame( true );
}
//===========================================================================
void MeleeVictoryDialogBJ(player whichPlayer, boolean leftGame){
    trigger t = CreateTrigger();
    dialog  d = cj_DialogCreate();
    string formatString;;
    libNtve_gf_CinematicMode(false, PlayerGroupAll(), 0);
    GameOver(whichPlayer, c_gameOverDefeat, !leftGame, true);
}
//===========================================================================
void MeleeDefeatDialogBJ(player whichPlayer, boolean leftGame){
    trigger t = CreateTrigger();
    dialog  d = cj_DialogCreate();
    string formatString;
    libNtve_gf_CinematicMode(false, PlayerGroupAll(), 0);
    GameOver(whichPlayer, c_gameOverDefeat, !leftGame, true);
}
//===========================================================================
void GameOverDialogBJ(player whichPlayer, boolean leftGame){
    trigger t = CreateTrigger();
    dialog  d = cj_DialogCreate();
    string  s;
    // Display "player left the game" message
    DisplayTimedTextFromPlayer(whichPlayer, 0, 0, 60, GetLocalizedString( "PLAYER_LEFT_GAME" ));
    if ((GetIntegerGameState(GAME_STATE_DISCONNECTED) != 0)) {
        s = GetLocalizedString( "GAMEOVER_DISCONNECTED" );
    }else{
        s = GetLocalizedString( "GAMEOVER_GAME_OVER" );
    }
    DialogSetMessage( d, s );
    t = CreateTrigger();
    TriggerRegisterDialogButtonEvent( t, DialogAddQuitButton( d, true, GetLocalizedString( "GAMEOVER_OK" ), GetLocalizedHotkey("GAMEOVER_OK") ) );
    DialogDisplay( whichPlayer, d, true );
    StartSoundForPlayerBJ( whichPlayer, bj_defeatDialogSound );
}
//===========================================================================
void RemovePlayerPreserveUnitsBJ(player whichPlayer, playergameresult gameResult, boolean leftGame){
    if (AllowVictoryDefeat(gameResult)) {
        RemovePlayer(whichPlayer, gameResult);
        if(( gameResult == PLAYER_GAME_RESULT_VICTORY )) {
            MeleeVictoryDialogBJ( whichPlayer, leftGame );
            return;
        }else if(( gameResult == PLAYER_GAME_RESULT_DEFEAT )) {
            MeleeDefeatDialogBJ( whichPlayer, leftGame );
        }else{
            GameOverDialogBJ( whichPlayer, leftGame );
        }
    }
}
//===========================================================================
bool CustomVictoryOkBJ(bool testConds, bool runActions){
    if (bj_isSinglePlayer) {
        PauseGame( false );
        // Bump the difficulty back up to the default.
        j_SetGameDifficulty(j_GetDefaultDifficulty());
    }
    if ((bj_changeLevelMapName == null)) {
        EndGame( bj_changeLevelShowScores );
    }else{
        ChangeLevel( bj_changeLevelMapName, bj_changeLevelShowScores );
    }
    return true;
}
//===========================================================================
bool CustomVictoryQuitBJ(bool testConds, bool runActions){
    if (bj_isSinglePlayer) {
        PauseGame( false );
        // Bump the difficulty back up to the default.
        j_SetGameDifficulty(j_GetDefaultDifficulty());
    }
    EndGame( bj_changeLevelShowScores );
    return true;
}
//===========================================================================
void CustomVictoryDialogBJ(player whichPlayer){
    trigger t = CreateTrigger();
    dialog  d = cj_DialogCreate();
    int i;
    DialogSetMessage( d, GetLocalizedString( "GAMEOVER_VICTORY_MSG" ) );
    t = TriggerCreate("CustomVictoryOkBJ");
    TriggerRegisterDialogButtonEvent( t, DialogAddButton( d, GetLocalizedString( "GAMEOVER_CONTINUE" ), GetLocalizedHotkey("GAMEOVER_CONTINUE") ) );
    t = TriggerCreate("CustomVictoryQuitBJ");
    TriggerRegisterDialogButtonEvent( t, DialogAddButton( d, GetLocalizedString( "GAMEOVER_QUIT_MISSION" ), GetLocalizedHotkey("GAMEOVER_QUIT_MISSION") ) );
    for(;i<=6;i+=1){
        UISetCommandAllowed(PlayerGroupSingle(whichPlayer),i,true);
    }
        if (bj_isSinglePlayer) {
            PauseGame( true );
        }
    libNtve_gf_HideGameUI(true, PlayerGroupSingle(whichPlayer));
    DialogDisplay( whichPlayer, d, true );
    VolumeGroupSetVolumeForPlayerBJ( whichPlayer, SOUND_VOLUMEGROUP_UI, 1.0 );
    StartSoundForPlayerBJ( whichPlayer, bj_victoryDialogSound );
}
//===========================================================================
void CustomVictorySkipBJ(player whichPlayer){
    //if ((GetLocalPlayer() == whichPlayer)) {
        if (bj_isSinglePlayer) {
            // Bump the difficulty back up to the default.
            j_SetGameDifficulty(j_GetDefaultDifficulty());
        }
        if ((bj_changeLevelMapName == null)) {
            EndGame( bj_changeLevelShowScores );
        }else{
            ChangeLevel( bj_changeLevelMapName, bj_changeLevelShowScores );
        }
    //}
}
//===========================================================================
void CustomVictoryBJ(player whichPlayer, boolean showDialog, boolean showScores){
    libNtve_gf_CinematicMode(false, PlayerGroupAll(), 0);
    GameOver(whichPlayer, c_gameOverVictory, showDialog, showScores);
}
//===========================================================================
bool CustomDefeatRestartBJ(bool testConds, bool runActions){
    PauseGame( false );
    cj_RestartGame( true );
	return true;
}
//===========================================================================
bool CustomDefeatReduceDifficultyBJ(bool testConds, bool runActions){
    gamedifficulty diff = GetGameDifficulty();
    PauseGame( false );
    // Knock the difficulty down, if (possible.
    if ((diff == MAP_DIFFICULTY_EASY)) {
        // Sorry, but it doesn't get any easier than this.
    }else if ((diff == MAP_DIFFICULTY_NORMAL)) {
        j_SetGameDifficulty(MAP_DIFFICULTY_EASY);
    }else if ((diff == MAP_DIFFICULTY_HARD)) {
        j_SetGameDifficulty(MAP_DIFFICULTY_NORMAL);
    }else{
        // Unrecognized difficulty
    }
    cj_RestartGame( true );
	return true;
}
//===========================================================================
void CustomDefeatLoadBJ(){
    PauseGame( false );
    DisplayLoadDialog();
}
//===========================================================================
void CustomDefeatQuitBJ(){
    if (bj_isSinglePlayer) {
        PauseGame( false );
    }
    // Bump the difficulty back up to the default.
    j_SetGameDifficulty(GetDefaultDifficulty());
    EndGame( true );
}
//===========================================================================
void CustomDefeatDialogBJ(player whichPlayer, string message){
    trigger t = CreateTrigger();
    dialog  d = cj_DialogCreate();
	int i;
    DialogSetMessage( d, message );
    if (bj_isSinglePlayer) {
        t = TriggerCreate("CustomDefeatRestartBJ");
        TriggerRegisterDialogButtonEvent( t, DialogAddButton( d, GetLocalizedString( "GAMEOVER_RESTART" ), GetLocalizedHotkey("GAMEOVER_RESTART") ) );
        if ((GetGameDifficulty() != MAP_DIFFICULTY_EASY)) {
            t = TriggerCreate("CustomDefeatReduceDifficultyBJ");
            TriggerRegisterDialogButtonEvent( t, DialogAddButton( d, GetLocalizedString( "GAMEOVER_REDUCE_DIFFICULTY" ), GetLocalizedHotkey("GAMEOVER_REDUCE_DIFFICULTY") ) );
        }
        t = TriggerCreate("CustomDefeatLoadBJ");
        TriggerRegisterDialogButtonEvent( t, DialogAddButton( d, GetLocalizedString( "GAMEOVER_LOAD" ), GetLocalizedHotkey("GAMEOVER_LOAD") ) );
    }
    t = TriggerCreate("CustomDefeatQuitBJ");
    TriggerRegisterDialogButtonEvent( t, DialogAddButton( d, GetLocalizedString( "GAMEOVER_QUIT_MISSION" ), GetLocalizedHotkey("GAMEOVER_QUIT_MISSION") ) );
    for(;i<=6;i+=1){
        UISetCommandAllowed(PlayerGroupSingle(whichPlayer),i,true);
    }
        if (bj_isSinglePlayer) {
            PauseGame( true );
        }
    libNtve_gf_HideGameUI(true, PlayerGroupSingle(whichPlayer));
    DialogDisplay( whichPlayer, d, true );
    VolumeGroupSetVolumeForPlayerBJ( whichPlayer, SOUND_VOLUMEGROUP_UI, 1.0 );
    StartSoundForPlayerBJ( whichPlayer, bj_defeatDialogSound );
}
//===========================================================================
void CustomDefeatBJ(player whichPlayer, string message){
    libNtve_gf_CinematicMode(false, PlayerGroupAll(), 0);
    GameOver(whichPlayer, c_gameOverDefeat, true, true);
}
//===========================================================================
event TriggerRegisterPlayerUnitEventSimple(trigger trig, player whichPlayer, playerunitevent whichEvent){
    return TriggerRegisterPlayerUnitEvent(trig, whichPlayer, whichEvent, null);;
}
//===========================================================================
location GetDestructableLoc(destructable whichDestructable){
    return Location(GetDestructableX(whichDestructable), GetDestructableY(whichDestructable));;
}
//===========================================================================
void SuspendHeroXPBJ(boolean flag, unit whichHero){
    SuspendHeroXP(whichHero, ! flag);
}
//===========================================================================
//***************************************************************************
//*
//*  Quest Utility Functions
//*
//***************************************************************************
//===========================================================================
quest CreateQuestBJ(integer questType, string title, string description, string iconPath){
    boolean required   = (questType == bj_QUESTTYPE_REQ_DISCOVERED) || (questType == bj_QUESTTYPE_REQ_UNDISCOVERED);
    boolean discovered = (questType == bj_QUESTTYPE_REQ_DISCOVERED) || (questType == bj_QUESTTYPE_OPT_DISCOVERED);
    bj_lastCreatedQuest = CreateQuest();
    QuestSetTitle(bj_lastCreatedQuest, title);
    QuestSetDescription(bj_lastCreatedQuest, description);
    QuestSetIconPath(bj_lastCreatedQuest, iconPath);
    QuestSetRequired(bj_lastCreatedQuest, required);
    QuestSetDiscovered(bj_lastCreatedQuest, discovered);
    QuestSetCompleted(bj_lastCreatedQuest, false);
    return bj_lastCreatedQuest;
}
//===========================================================================
void DestroyQuestBJ(quest whichQuest){
    DestroyQuest(whichQuest);
}
//===========================================================================
void QuestSetEnabledBJ(boolean enabled, quest whichQuest){
    QuestSetEnabled(whichQuest, enabled);
}
//===========================================================================
void QuestSetTitleBJ(quest whichQuest, string title){
    QuestSetTitle(whichQuest, title);
}
//===========================================================================
void QuestSetDescriptionBJ(quest whichQuest, string description){
    QuestSetDescription(whichQuest, description);
}
//===========================================================================
void QuestSetCompletedBJ(quest whichQuest, boolean completed){
    QuestSetCompleted(whichQuest, completed);
}
//===========================================================================
void QuestSetFailedBJ(quest whichQuest, boolean failed){
    QuestSetFailed(whichQuest, failed);
}
//===========================================================================
void QuestSetDiscoveredBJ(quest whichQuest, boolean discovered){
    QuestSetDiscovered(whichQuest, discovered);
}
//===========================================================================
quest GetLastCreatedQuestBJ(){
    return bj_lastCreatedQuest;
}
//===========================================================================
questitem CreateQuestItemBJ(quest whichQuest, string description){
    bj_lastCreatedQuestItem = QuestCreateItem(whichQuest);
    QuestItemSetDescription(bj_lastCreatedQuestItem, description);
    QuestItemSetCompleted(bj_lastCreatedQuestItem, false);
    return bj_lastCreatedQuestItem;
}
//===========================================================================
void QuestItemSetDescriptionBJ(questitem whichQuestItem, string description){
    QuestItemSetDescription(whichQuestItem, description);
}
//===========================================================================
void QuestItemSetCompletedBJ(questitem whichQuestItem, boolean completed){
    QuestItemSetCompleted(whichQuestItem, completed);
}
//===========================================================================
questitem GetLastCreatedQuestItemBJ(){
    return bj_lastCreatedQuestItem;
}
//===========================================================================
defeatcondition CreateDefeatConditionBJ(string description){
    bj_lastCreatedDefeatCondition = CreateDefeatCondition();
    DefeatConditionSetDescription(bj_lastCreatedDefeatCondition, description);
    return bj_lastCreatedDefeatCondition;
}
//===========================================================================
void DestroyDefeatConditionBJ(defeatcondition whichCondition){
    DestroyDefeatCondition(whichCondition);
}
//===========================================================================
void DefeatConditionSetDescriptionBJ(defeatcondition whichCondition, string description){
    DefeatConditionSetDescription(whichCondition, description);
}
//===========================================================================
defeatcondition GetLastCreatedDefeatConditionBJ(){
    return bj_lastCreatedDefeatCondition;
}
//===========================================================================
void FlashQuestDialogButtonBJ(){
    FlashQuestDialogButton();
}
void QuestMessageBJ(force f, integer messageType, string message){
        if ((messageType == bj_QUESTMESSAGE_DISCOVERED)) {
            UIDisplayMessage( f, c_messageAreaDebug, StringExternal(" "));
            UIDisplayMessage( f, c_messageAreaDebug, StringExternal(message));
            StartSound(bj_questDiscoveredSound);
            FlashQuestDialogButton();
        }else if ((messageType == bj_QUESTMESSAGE_UPDATED)) {
            UIDisplayMessage( f, c_messageAreaDebug, StringExternal(" "));
            UIDisplayMessage( f, c_messageAreaDebug, StringExternal(message));
            StartSound(bj_questUpdatedSound);
            FlashQuestDialogButton();
        }else if ((messageType == bj_QUESTMESSAGE_COMPLETED)) {
            UIDisplayMessage( f, c_messageAreaDebug, StringExternal(" "));
            UIDisplayMessage( f, c_messageAreaDebug, StringExternal(message));
            StartSound(bj_questCompletedSound);
            FlashQuestDialogButton();
        }else if ((messageType == bj_QUESTMESSAGE_FAILED)) {
            UIDisplayMessage( f, c_messageAreaDebug, StringExternal(" "));
            UIDisplayMessage( f, c_messageAreaDebug, StringExternal(message));
            StartSound(bj_questFailedSound);
            FlashQuestDialogButton();
        }else if ((messageType == bj_QUESTMESSAGE_REQUIREMENT)) {
            UIDisplayMessage( f, c_messageAreaDebug, StringExternal(message));
        }else if ((messageType == bj_QUESTMESSAGE_MISSIONFAILED)) {
            UIDisplayMessage( f, c_messageAreaDebug, StringExternal(" "));
            UIDisplayMessage( f, c_messageAreaDebug, StringExternal(message));
            StartSound(bj_questFailedSound);
        }else if ((messageType == bj_QUESTMESSAGE_HINT)) {
            UIDisplayMessage( f, c_messageAreaSubtitle, StringExternal(" "));
            UIDisplayMessage( f, c_messageAreaSubtitle, StringExternal(message));
            StartSound(bj_questHintSound);
        }else if ((messageType == bj_QUESTMESSAGE_ALWAYSHINT)) {
            UIDisplayMessage( f, c_messageAreaSubtitle, StringExternal(" "));
            UIDisplayMessage( f, c_messageAreaSubtitle, StringExternal(message));
            StartSound(bj_questHintSound);
        }else if ((messageType == bj_QUESTMESSAGE_SECRET)) {
            UIDisplayMessage( f, c_messageAreaSubtitle, StringExternal(" "));
            UIDisplayMessage( f, c_messageAreaSubtitle, StringExternal(message));
            StartSound(bj_questSecretSound);
        }else if ((messageType == bj_QUESTMESSAGE_UNITACQUIRED)) {
            UIDisplayMessage( f, c_messageAreaSubtitle, StringExternal(" "));
            UIDisplayMessage( f, c_messageAreaSubtitle, StringExternal(message));
            StartSound(bj_questHintSound);
        }else if ((messageType == bj_QUESTMESSAGE_UNITAVAILABLE)) {
            UIDisplayMessage( f, c_messageAreaSubtitle, StringExternal(" "));
            UIDisplayMessage( f, c_messageAreaSubtitle, StringExternal(message));
            StartSound(bj_questHintSound);
        }else if ((messageType == bj_QUESTMESSAGE_ITEMACQUIRED)) {
            UIDisplayMessage( f, c_messageAreaSubtitle, StringExternal(" "));
            UIDisplayMessage( f, c_messageAreaSubtitle, StringExternal(message));
            StartSound(bj_questItemAcquiredSound);
        }else if ((messageType == bj_QUESTMESSAGE_WARNING)) {
            UIDisplayMessage( f, c_messageAreaSubtitle, StringExternal(" "));
            UIDisplayMessage( f, c_messageAreaSubtitle, StringExternal(message));
            StartSound(bj_questWarningSound);
        }else{
            // Unrecognized message type - ignore the request.
        }
}
//***************************************************************************
//*
//*  Event Registration Utility Functions
//*
//***************************************************************************
//===========================================================================
event TriggerRegisterTimerEventPeriodic(trigger trig, real timeout){
    return TriggerRegisterTimerEvent(trig, timeout, true);;
}
//===========================================================================
event TriggerRegisterTimerEventSingle(trigger trig, real timeout){
    return TriggerRegisterTimerEvent(trig, timeout, false);;
}
//===========================================================================
event TriggerRegisterTimerExpireEventBJ(trigger trig, timer t){
    return TriggerRegisterTimerExpireEvent(trig, t);;
}
//===========================================================================
void SetSpeechVolumeGroupsImmediateBJ(){
    //Unused
    VolumeGroupSetVolume(SOUND_VOLUMEGROUP_UNITMOVEMENT,  bj_SPEECH_VOLUME_UNITMOVEMENT);
    VolumeGroupSetVolume(SOUND_VOLUMEGROUP_UNITSOUNDS,    bj_SPEECH_VOLUME_UNITSOUNDS);
    VolumeGroupSetVolume(SOUND_VOLUMEGROUP_COMBAT,        bj_SPEECH_VOLUME_COMBAT);
    VolumeGroupSetVolume(SOUND_VOLUMEGROUP_SPELLS,        bj_SPEECH_VOLUME_SPELLS);
    VolumeGroupSetVolume(SOUND_VOLUMEGROUP_UI,            bj_SPEECH_VOLUME_UI);
    VolumeGroupSetVolume(SOUND_VOLUMEGROUP_MUSIC,         bj_SPEECH_VOLUME_MUSIC);
    VolumeGroupSetVolume(SOUND_VOLUMEGROUP_AMBIENTSOUNDS, bj_SPEECH_VOLUME_AMBIENTSOUNDS);
    VolumeGroupSetVolume(SOUND_VOLUMEGROUP_FIRE,          bj_SPEECH_VOLUME_FIRE);
}
//===========================================================================
void SetSpeechVolumeGroupsBJ(){
    libNtve_gf_SetAllSoundChannelVolumes(1, PlayerGroupAll(), 0.0);
    //Old Scripts Unused
}
//===========================================================================
void UnitAddIndicatorBJ(unit whichUnit, real red, real green, real blue, real transparency){
    AddIndicator(whichUnit, PercentTo255(red), PercentTo255(green), PercentTo255(blue), PercentTo255(100.0-transparency));
}
//===========================================================================
void DestructableAddIndicatorBJ(destructable whichDestructable, real red, real green, real blue, real transparency){
    AddIndicator(whichDestructable, PercentTo255(red), PercentTo255(green), PercentTo255(blue), PercentTo255(100.0-transparency));
}
//===========================================================================
void ItemAddIndicatorBJ(item whichItem, real red, real green, real blue, real transparency){
    AddIndicator(whichItem, PercentTo255(red), PercentTo255(green), PercentTo255(blue), PercentTo255(100.0-transparency));
}
//===========================================================================
void PingMinimapForForceEx(force whichForce, real x, real y, real duration, integer style, real red, real green, real blue){
        if ((style == bj_MINIMAPPINGSTYLE_SIMPLE)) {
            PingCreate(whichForce, "PingSimple", Point(x,y), ColorWithAlpha(red, green, blue, 100.0), duration);
        }else if ((style == bj_MINIMAPPINGSTYLE_FLASHY)) {
             PingCreate(whichForce, "PingAlert", Point(x,y), ColorWithAlpha(red, green, blue, 100.0), duration);
        }else if ((style == bj_MINIMAPPINGSTYLE_ATTACK)) {
            PingCreate(whichForce, "PingBaseAttack", Point(x,y), ColorWithAlpha(100, 0, 0, 100.0), duration);
        }else{
            // Unrecognized ping style - ignore the request.
        }
}
//===========================================================================
void PingMinimapLocForForceEx(force whichForce, location loc, real duration, integer style, real red, real green, real blue){
    PingMinimapForForceEx(whichForce, GetLocationX(loc), GetLocationY(loc), duration, style, red, green, blue);
}
//===========================================================================
void PingMinimapForForce(force whichForce, real x, real y, real duration){
    PingCreate(whichForce, "PingSimple", Point(x,y), ColorWithAlpha(0, 100, 0, 100.0), duration);
}
//===========================================================================
void PingMinimapLocForForce(force whichForce, location loc, real duration){
    PingMinimapForForce(whichForce, GetLocationX(loc), GetLocationY(loc), duration);
}
//===========================================================================
void SetCameraQuickPositionForPlayer(player whichPlayer, real x, real y){
    UIAlertPoint("Trigger", whichPlayer, StringToText(""), null, Point(x,y));
}
//===========================================================================
void SetCameraQuickPositionLocForPlayer(player whichPlayer, location loc){
    UIAlertPoint("Trigger", whichPlayer, StringToText(""), null, loc);
}
//===========================================================================
void SetCameraQuickPositionLoc(location loc){
    SetCameraQuickPosition(GetLocationX(loc), GetLocationY(loc));
}
//===========================================================================
void SmartCameraPanBJ(player whichPlayer, location loc, real duration){
    CameraPan(whichPlayer, loc,duration, -1, 10.0, true);
}
//***************************************************************************
//*
//*  Timer Utility Functions
//*
//***************************************************************************
//===========================================================================
timer StartTimerBJ(timer t, boolean periodic, real timeout){
    bj_lastStartedTimer = t;
    cj_TimerStart(t, timeout, periodic, null);
    return bj_lastStartedTimer;
}
//===========================================================================
timer CreateTimerBJ(boolean periodic, real timeout){
    bj_lastStartedTimer = CreateTimer();
    cj_TimerStart(bj_lastStartedTimer, timeout, periodic, null);
    return bj_lastStartedTimer;
}
//===========================================================================
void DestroyTimerBJ(timer whichTimer){
    DestroyTimer(whichTimer);
}
//===========================================================================
void PauseTimerBJ(boolean pause, timer whichTimer){
    if (pause) {
        PauseTimer(whichTimer);
    }else{
        ResumeTimer(whichTimer);
    }
}
void RescueUnitBJ(unit whichUnit, player rescuer, boolean changeColor){
    libNtve_gf_RescueUnit(whichUnit, rescuer, changeColor);
}
//===========================================================================
// Returns true if (every unit of the group is dead.
//
boolean IsUnitGroupDeadBJ(group g){
    // if (the user wants the group destroyed, remember that fact && clear
    // the flag, in case it is used again in the callback.
    boolean wantDestroy = bj_wantDestroyGroup;
    bj_wantDestroyGroup = false;
    bj_isUnitGroupDeadResult = libNtve_gf_UnitGroupIsDead(g);
    // if (the user wants the group destroyed, do so now.
    if ((wantDestroy)) {
        DestroyGroup(g);
    }
    return bj_isUnitGroupDeadResult;
}
//===========================================================================
event TriggerRegisterShowSkillEventBJ(trigger trig){
    return TriggerRegisterGameEvent(trig, EVENT_GAME_SHOW_SKILL);;
}
//===========================================================================
integer GetLearnedSkillBJ(){
    return GetLearnedSkill();;
}
//===========================================================================
item CreateItemLoc(integer itemId, location loc){
    bj_lastCreatedItem = CreateItem(itemId, GetLocationX(loc), GetLocationY(loc));
    return bj_lastCreatedItem;
}
//===========================================================================
item GetLastCreatedItem(){
    return bj_lastCreatedItem;
}
//===========================================================================
item GetLastRemovedItem(){
    return bj_lastRemovedItem;
}
//===========================================================================
void SetItemPositionLoc(item whichItem, location loc){
    SetItemPosition(whichItem, GetLocationX(loc), GetLocationY(loc));
}
//===========================================================================
void SetUnitLifeBJ(unit whichUnit, real newValue){
    SetUnitState(whichUnit, UNIT_STATE_LIFE, RMaxBJ(0,newValue));
}
//===========================================================================
void SetUnitManaBJ(unit whichUnit, real newValue){
    SetUnitState(whichUnit, UNIT_STATE_MANA, RMaxBJ(0,newValue));
}
//===========================================================================
real GetUnitStateSwap(unitstate whichState, unit whichUnit){
    return GetUnitState(whichUnit, whichState);;
}
//===========================================================================
// Translates 0-based slot indices to 1-based slot indices.
//
item UnitItemInSlotBJ(unit whichUnit, integer itemSlot){
    return UnitItemInSlot(whichUnit, itemSlot-1);;
}
//===========================================================================
// Translates 0-based slot indices to 1-based slot indices.
//
integer GetInventoryIndexOfItemTypeBJ(unit whichUnit, integer itemId){
    integer index;
    item    indexItem;
    index = 0;
    while(true){
        indexItem = UnitItemInSlot(whichUnit, index);
        if ((indexItem != null) && (GetItemTypeId(indexItem) == itemId)) {
            return index + 1;
        }
        index = index + 1;
        if (index >= bj_MAX_INVENTORY){break;}
    }
    return 0;
}
//===========================================================================
item GetItemOfTypeFromUnitBJ(unit whichUnit, integer itemId){
    integer index = GetInventoryIndexOfItemTypeBJ(whichUnit, itemId);
    if ((index == 0)) {
        return null;
    }else{
        return UnitItemInSlot(whichUnit, index - 1);;
    }
}
//===========================================================================
boolean UnitHasItemOfTypeBJ(unit whichUnit, integer itemId){
    return GetInventoryIndexOfItemTypeBJ(whichUnit, itemId) > 0;
}
//===========================================================================
integer bj_UnitInventoryCount(unit whichUnit){
    integer index = 0;
    integer count = 0;
    while(true){
        if ((UnitItemInSlot(whichUnit, index) != null)) {
            count = count + 1;
        }
        index = index + 1;
        if (index >= bj_MAX_INVENTORY){break;}
    }
    return count;
}
//===========================================================================
integer UnitInventorySizeBJ(unit whichUnit){
    return UnitInventorySize(whichUnit);;
}
//===========================================================================
void UnitWakeUpBJ(unit whichUnit){
    UnitWakeUp(whichUnit);
}
//===========================================================================
boolean UnitIsSleepingBJ(unit whichUnit){
    return UnitIsSleeping(whichUnit);;
}
//===========================================================================
real GetTimeOfDay(){
    return GAw3_TODToTODHour(GameTimeOfDayGet());
}

//--------------------------------------------------------------------------------------------------
// Custom Script: BJInit
//--------------------------------------------------------------------------------------------------
//===========================================================================
void DelayedSuspendDecayCreate(){
    //bj_delayedSuspendDecayTrig = TriggerCreate("DelayedSuspendDecay");
    //TriggerRegisterTimerExpireEvent(bj_delayedSuspendDecayTrig, bj_delayedSuspendDecayTimer);
}
//===========================================================================
boolean IsUnitDeadBJ(unit whichUnit){
    return UnitTestState(whichUnit,c_unitStateIsDead);
}
//===========================================================================
boolean IsUnitAliveBJ(unit whichUnit){
    return ! IsUnitDeadBJ(whichUnit);;
}
//===========================================================================
boolean IsUnitHiddenBJ(unit whichUnit){
    return IsUnitHidden(whichUnit);;
}
//===========================================================================
void ShowUnitHide(unit whichUnit){
    ShowUnit(whichUnit, false);
}
//===========================================================================
void ShowUnitShow(unit whichUnit){
    // Prevent dead heroes from being unhidden.
    if ((IsUnitType(whichUnit, UNIT_TYPE_HERO) && IsUnitDeadBJ(whichUnit))) {
        return;
    }
    ShowUnit(whichUnit, true);
}
//===========================================================================
boolean LivingPlayerUnitsOfTypeIdFilter(){
    unit filterUnit = GetFilterUnit();
    return (IsUnitAliveBJ(filterUnit)) && (GetUnitTypeId(filterUnit) == bj_livingPlayerUnitsTypeId);
}
//===========================================================================
boolean MeleeTrainedUnitIsHeroBJFilter(){
    return IsUnitType(GetFilterUnit(), UNIT_TYPE_HERO);;
}
//===========================================================================
boolean IssueHauntOrderAtLocBJFilter(){
    return GetUnitTypeId(GetFilterUnit()) == 'ngol';
}
//===========================================================================
boolean EnumDestructablesInCircleBJFilter(){
    location destLoc = GetDestructableLoc(GetFilterDestructable());
    boolean result;
    result = DistanceBetweenPoints(destLoc, bj_enumDestructableCenter) <= bj_enumDestructableRadius;
    RemoveLocation(destLoc);
    return result;
}
//===========================================================================
void InitBlizzardGlobals(){
    integer index;
    integer userControlledPlayers;
    version v;
    // Init filter function vars
    filterIssueHauntOrderAtLocBJ = Filter(IssueHauntOrderAtLocBJFilter);
    filterEnumDestructablesInCircleBJ = Filter(EnumDestructablesInCircleBJFilter);
    filterGetUnitsInRectOfPlayer = Filter(GetUnitsInRectOfPlayerFilter);
    filterGetUnitsOfTypeIdAll = Filter(GetUnitsOfTypeIdAllFilter);
    filterGetUnitsOfPlayerAndTypeId = Filter(GetUnitsOfPlayerAndTypeIdFilter);
    filterMeleeTrainedUnitIsHeroBJ = Filter(MeleeTrainedUnitIsHeroBJFilter);
    filterLivingPlayerUnitsOfTypeId = Filter(LivingPlayerUnitsOfTypeIdFilter);
    // Init force presets
    index = 0;
    while(true){
        if (index == bj_MAX_PLAYER_SLOTS){break;}
        bj_FORCE_PLAYER[index] = CreateForce();
        ForceAddPlayer(bj_FORCE_PLAYER[index], Player(index));
        index = index + 1;
    }
    bj_FORCE_ALL_PLAYERS = CreateForce();
    bj_FORCE_ALL_PLAYERS = PlayerGroupAll();
    //ForceEnumPlayers(bj_FORCE_ALL_PLAYERS, null);
    // Init Cinematic Mode history
    bj_cineModePriorSpeed = GetGameSpeed();
    bj_cineModePriorFogSetting = IsFogEnabled();
    bj_cineModePriorMaskSetting = IsFogMaskEnabled();
    // Init Trigger Queue
    index = 0;
    while(true){
        if (index >= bj_MAX_QUEUED_TRIGGERS){break;}
        bj_queuedExecTriggers[index] = null;
        bj_queuedExecUseConds[index] = false;
        index = index + 1;
    }
    // Init singleplayer check
    bj_isSinglePlayer = false;
    userControlledPlayers = 0;
    index = 0;
    while(true){
        if (index >= bj_MAX_PLAYERS){break;}
        if (((GetPlayerController(Player(index)) == MAP_CONTROL_USER) && (GetPlayerSlotState(Player(index)) == PLAYER_SLOT_STATE_PLAYING))) {
            userControlledPlayers = userControlledPlayers + 1;
        }
        index = index + 1;
    }
    bj_isSinglePlayer = (userControlledPlayers == 1);
    // Init sounds
    //set bj_pingMinimapSound = CreateSoundFromLabel("AutoCastButtonClick", false, false, false, 10000, 10000);
    bj_rescueSound = CreateSoundFromLabel("Rescue", false, false, false, 10000, 10000);
    bj_questDiscoveredSound = CreateSoundFromLabel("QuestNew", false, false, false, 10000, 10000);
    bj_questUpdatedSound = CreateSoundFromLabel("QuestUpdate", false, false, false, 10000, 10000);
    bj_questCompletedSound = CreateSoundFromLabel("QuestCompleted", false, false, false, 10000, 10000);
    bj_questFailedSound = CreateSoundFromLabel("QuestFailed", false, false, false, 10000, 10000);
    bj_questHintSound = CreateSoundFromLabel("Hint", false, false, false, 10000, 10000);
    bj_questSecretSound = CreateSoundFromLabel("SecretFound", false, false, false, 10000, 10000);
    bj_questItemAcquiredSound = CreateSoundFromLabel("ItemReward", false, false, false, 10000, 10000);
    bj_questWarningSound = CreateSoundFromLabel("Warning", false, false, false, 10000, 10000);
    bj_victoryDialogSound = CreateSoundFromLabel("QuestCompleted", false, false, false, 10000, 10000);
    bj_defeatDialogSound = CreateSoundFromLabel("QuestFailed", false, false, false, 10000, 10000);
    // Init corpse creation triggers.
    DelayedSuspendDecayCreate();
    // Init version-specific data
    v = VersionGet();
    if ((v == VERSION_REIGN_OF_CHAOS)) {
        bj_MELEE_MAX_TWINKED_HEROES = bj_MELEE_MAX_TWINKED_HEROES_V0;
    }else{
        bj_MELEE_MAX_TWINKED_HEROES = bj_MELEE_MAX_TWINKED_HEROES_V1;
    }
}
//===========================================================================
void InitQueuedTriggers(){
    bj_queuedExecTimeout = TriggerCreate("QueuedTriggerDoneBJ");
    TriggerRegisterTimerExpireEvent(bj_queuedExecTimeout, bj_queuedExecTimeoutTimer);
}

//--------------------------------------------------------------------------------------------------
// Custom Script: Regions
//--------------------------------------------------------------------------------------------------
region gg_rct_EndCin_Medivh_Waits_Here = RegionFromName("EndCin Medivh Waits Here");
region gg_rct_EndCinThrall = RegionFromName("EndCinThrall");
region gg_rct_Ending_Rain = RegionFromName("Ending Rain");
region gg_rct_FlagExplore03A = RegionFromName("FlagExplore03A");
region gg_rct_FlagExplore03B = RegionFromName("FlagExplore03B");
region gg_rct_FlagExplore03C = RegionFromName("FlagExplore03C");
region gg_rct_GnollGroupRegion = RegionFromName("GnollGroupRegion");
region gg_rct_GruntMove1 = RegionFromName("GruntMove1");
region gg_rct_GruntMove2 = RegionFromName("GruntMove2");
region gg_rct_GruntMove3 = RegionFromName("GruntMove3");
region gg_rct_Hidden_Item_TripwireA = RegionFromName("Hidden Item TripwireA");
region gg_rct_Hidden_Item_TripwireB = RegionFromName("Hidden Item TripwireB");
region gg_rct_LakeLoop01 = RegionFromName("LakeLoop01");
region gg_rct_LakeLoop02 = RegionFromName("LakeLoop02");
region gg_rct_LakeLoop03 = RegionFromName("LakeLoop03");
region gg_rct_LakeLoop04 = RegionFromName("LakeLoop04");
region gg_rct_LakeLoop05 = RegionFromName("LakeLoop05");
region gg_rct_LakeLoop06 = RegionFromName("LakeLoop06");
region gg_rct_LakeLoop07 = RegionFromName("LakeLoop07");
region gg_rct_LakeLoop08 = RegionFromName("LakeLoop08");
region gg_rct_Lightnin = RegionFromName("Lightnin");
region gg_rct_Lightning1 = RegionFromName("Lightning1");
region gg_rct_Lightning2 = RegionFromName("Lightning2");
region gg_rct_Lightning3 = RegionFromName("Lightning3");
region gg_rct_Lightning4 = RegionFromName("Lightning4");
region gg_rct_Medivh_Look_At = RegionFromName("Medivh Look At");
region gg_rct_Medivh_Move_to = RegionFromName("Medivh Move to");
region gg_rct_MedivhFlight01 = RegionFromName("MedivhFlight01");
region gg_rct_MedivhFlight02 = RegionFromName("MedivhFlight02");
region gg_rct_MedivhFlight03 = RegionFromName("MedivhFlight03");
region gg_rct_MedivhFlight04 = RegionFromName("MedivhFlight04");
region gg_rct_MedivhFlight05 = RegionFromName("MedivhFlight05");
region gg_rct_MedivhFlight06 = RegionFromName("MedivhFlight06");
region gg_rct_MedivhFlight07 = RegionFromName("MedivhFlight07");
region gg_rct_MedivhFlight08 = RegionFromName("MedivhFlight08");
region gg_rct_MedivhFlight09 = RegionFromName("MedivhFlight09");
region gg_rct_MedivhFlight10 = RegionFromName("MedivhFlight10");
region gg_rct_MedivhFlight11 = RegionFromName("MedivhFlight11");
region gg_rct_MedivhFlight12 = RegionFromName("MedivhFlight12");
region gg_rct_MedivhRunHereDepart = RegionFromName("MedivhRunHereDepart");
region gg_rct_Murloc_Falls = RegionFromName("Murloc Falls");
region gg_rct_Murloc_Falls_Tripwire = RegionFromName("Murloc Falls Tripwire");
region gg_rct_MurlocGroupRegion = RegionFromName("MurlocGroupRegion");
region gg_rct_Spot01 = RegionFromName("Spot01");
region gg_rct_Spot02 = RegionFromName("Spot02");
region gg_rct_Spot03 = RegionFromName("Spot03");
region gg_rct_Spot04 = RegionFromName("Spot04");
region gg_rct_Spot05 = RegionFromName("Spot05");
region gg_rct_Spot06 = RegionFromName("Spot06");
region gg_rct_Spot07 = RegionFromName("Spot07");
region gg_rct_Spot08 = RegionFromName("Spot08");
region gg_rct_Spot09 = RegionFromName("Spot09");
region gg_rct_Spot10 = RegionFromName("Spot10");
region gg_rct_Spot11 = RegionFromName("Spot11");
region gg_rct_Spot12 = RegionFromName("Spot12");
region gg_rct_SpotBypass01A = RegionFromName("SpotBypass01A");
region gg_rct_SpotBypass01B = RegionFromName("SpotBypass01B");
region gg_rct_SpotBypass01C = RegionFromName("SpotBypass01C");
region gg_rct_SpotBypass01D = RegionFromName("SpotBypass01D");
region gg_rct_SpotBypass02A = RegionFromName("SpotBypass02A");
region gg_rct_SpotBypass02B = RegionFromName("SpotBypass02B");
region gg_rct_SpotBypass03A = RegionFromName("SpotBypass03A");
region gg_rct_SpotBypass03B = RegionFromName("SpotBypass03B");
region gg_rct_SpotBypass04A = RegionFromName("SpotBypass04A");
region gg_rct_SpotBypass04B = RegionFromName("SpotBypass04B");
region gg_rct_SpotBypass04C = RegionFromName("SpotBypass04C");
region gg_rct_SpotBypass04D = RegionFromName("SpotBypass04D");
region gg_rct_SpotBypass05A = RegionFromName("SpotBypass05A");
region gg_rct_SpotBypass05B = RegionFromName("SpotBypass05B");
region gg_rct_SpotBypass06A = RegionFromName("SpotBypass06A");
region gg_rct_SpotBypass06B = RegionFromName("SpotBypass06B");
region gg_rct_SpotBypass08A = RegionFromName("SpotBypass08A");
region gg_rct_SpotBypass08B = RegionFromName("SpotBypass08B");
region gg_rct_SpotBypass09A = RegionFromName("SpotBypass09A");
region gg_rct_SpotBypass09B = RegionFromName("SpotBypass09B");
region gg_rct_SpotBypassVictoryA = RegionFromName("SpotBypassVictoryA");
region gg_rct_SpotBypassVictoryB = RegionFromName("SpotBypassVictoryB");
region gg_rct_SpotBypassVictoryC = RegionFromName("SpotBypassVictoryC");
region gg_rct_SpotTripwire08A = RegionFromName("SpotTripwire08A");
region gg_rct_SpotTripwire08B = RegionFromName("SpotTripwire08B");
region gg_rct_SpotTripwire08C = RegionFromName("SpotTripwire08C");
region gg_rct_SpotTripwire10A = RegionFromName("SpotTripwire10A");
region gg_rct_SpotTripwire10B = RegionFromName("SpotTripwire10B");
region gg_rct_SpotTripwire10C = RegionFromName("SpotTripwire10C");
region gg_rct_SpotTripwire11A = RegionFromName("SpotTripwire11A");
region gg_rct_SpotTripwire11B = RegionFromName("SpotTripwire11B");
region gg_rct_SpotTripwire11C = RegionFromName("SpotTripwire11C");
region gg_rct_SpotTripwire12A = RegionFromName("SpotTripwire12A");
region gg_rct_SpotVictory = RegionFromName("SpotVictory");
region gg_rct_Starting_Area_Rain = RegionFromName("Starting Area Rain");
region gg_rct_Thrall_Move_to = RegionFromName("Thrall Move to");
region gg_rct_TrollGroupRegion = RegionFromName("TrollGroupRegion");
region gg_rct_Visibility01 = RegionFromName("Visibility01");
region gg_rct_Visibility02 = RegionFromName("Visibility02");
region gg_rct_Visibility03 = RegionFromName("Visibility03");
region gg_rct_Visibility04 = RegionFromName("Visibility04");
region gg_rct_Visibility05 = RegionFromName("Visibility05");
region gg_rct_West_Falls = RegionFromName("West Falls");
region gg_rct_West_Falls_Tripwire = RegionFromName("West Falls Tripwire");
region gg_rct_SpeakingAnchor06 = RegionFromName("SpeakingAnchor06");
region gg_rct_SpeakingAnchor05 = RegionFromName("SpeakingAnchor05");
region gg_rct_SpeakingAnchor10 = RegionFromName("SpeakingAnchor10");
region gg_rct_SpeakingAnchor11 = RegionFromName("SpeakingAnchor11");
region gg_rct_SpeakingAnchor12 = RegionFromName("SpeakingAnchor12");
region gg_rct_EndCin_Medivh = RegionFromName("EndCin Medivh");
region gg_rct_Thrall01 = RegionFromName("Thrall01");
region gg_rct_Thrall00 = RegionFromName("Thrall00");
region gg_rct_MedivhStart01 = RegionFromName("MedivhStart01");
region gg_rct_MedivhStart02 = RegionFromName("MedivhStart02");
region gg_rct_MedivhStart03 = RegionFromName("MedivhStart03");
region gg_rct_Thrall02 = RegionFromName("Thrall02");
region gg_rct_ThrallLookHere = RegionFromName("ThrallLookHere");
region gg_rct_Lightnin02 = RegionFromName("Lightnin02");
region gg_rct_Lightning5 = RegionFromName("Lightning5");
region gg_rct_Lightning6 = RegionFromName("Lightning6");

//--------------------------------------------------------------------------------------------------
// Custom Script: Sounds
//--------------------------------------------------------------------------------------------------
soundhandle gg_snd_BattleNetWindStereoLoop1 = "GlueScreenBnetWind";
soundhandle gg_snd_DoorSlam1 = "DoorSlamSound";
soundhandle gg_snd_DruidOfTheTalonMorph1 = "DruidOfTheTalonMorph";
soundhandle gg_snd_DruidOfTheTalonMorphedWarcry1 = "DruidOfTheTalonMorphedWarcry";
soundhandle gg_snd_GoodJob = "GoodJob";
soundhandle gg_snd_LightningBolt = "LightningBolt";
soundhandle gg_snd_RainAmbience = "AmbientSoundRain";
soundhandle gg_snd_RollingThunder1 = "RollingThunderSound";
soundhandle gg_snd_T01Grunt22 = "T01Grunt22";
soundhandle gg_snd_T01Grunt39 = "T01Grunt39";
soundhandle gg_snd_T01Medivh02 = "T01Medivh02";
soundhandle gg_snd_T01Medivh59 = "T01Medivh59";
soundhandle gg_snd_T01Medivh61 = "T01Medivh61";
soundhandle gg_snd_T01Medivh63 = "T01Medivh63";
soundhandle gg_snd_T01Medivh65 = "T01Medivh65";
soundhandle gg_snd_T01Medivh67 = "T01Medivh67";
soundhandle gg_snd_T01Narrator10 = "T01Narrator10";
soundhandle gg_snd_T01Narrator11 = "T01Narrator11";
soundhandle gg_snd_T01Narrator12 = "T01Narrator12";
soundhandle gg_snd_T01Narrator14 = "T01Narrator14";
soundhandle gg_snd_T01Narrator15 = "T01Narrator15";
soundhandle gg_snd_T01Narrator16 = "T01Narrator16";
soundhandle gg_snd_T01Narrator18 = "T01Narrator18";
soundhandle gg_snd_T01Narrator20 = "T01Narrator20";
soundhandle gg_snd_T01Narrator2401 = "T01Narrator24";
soundhandle gg_snd_T01Narrator26 = "T01Narrator26";
soundhandle gg_snd_T01Narrator30 = "T01Narrator30";
soundhandle gg_snd_T01Narrator32 = "T01Narrator32";
soundhandle gg_snd_T01Narrator33 = "T01Narrator33";
soundhandle gg_snd_T01Narrator35 = "T01Narrator35";
soundhandle gg_snd_T01Narrator36 = "T01Narrator36";
soundhandle gg_snd_T01Narrator37 = "T01Narrator37";
soundhandle gg_snd_T01Narrator3801 = "T01Narrator38";
soundhandle gg_snd_T01Narrator40 = "T01Narrator40";
soundhandle gg_snd_T01Narrator41 = "T01Narrator41";
soundhandle gg_snd_T01Narrator43 = "T01Narrator43";
soundhandle gg_snd_T01Narrator44 = "T01Narrator44";
soundhandle gg_snd_T01Narrator45 = "T01Narrator45";
soundhandle gg_snd_T01Narrator47 = "T01Narrator47";
soundhandle gg_snd_T01Narrator49 = "T01Narrator49";
soundhandle gg_snd_T01Narrator54 = "T01Narrator54";
soundhandle gg_snd_T01Narrator58 = "T01Narrator58";
soundhandle gg_snd_T01Thrall01 = "T01Thrall01";
soundhandle gg_snd_T01Thrall03 = "T01Thrall03";
soundhandle gg_snd_T01Thrall21 = "T01Thrall21";
soundhandle gg_snd_T01Thrall28 = "T01Thrall28";
soundhandle gg_snd_T01Thrall31 = "T01Thrall31";
soundhandle gg_snd_T01Thrall48 = "T01Thrall48";
soundhandle gg_snd_T01Thrall51 = "T01Thrall51";
soundhandle gg_snd_T01Thrall53 = "T01Thrall53";
soundhandle gg_snd_T01Thrall56 = "T01Thrall56";
soundhandle gg_snd_T01Thrall60 = "T01Thrall60";
soundhandle gg_snd_T01Thrall62 = "T01Thrall62";
soundhandle gg_snd_T01Thrall64 = "T01Thrall64";
soundhandle gg_snd_T01Thrall66 = "T01Thrall66";
soundhandle gg_snd_T01Thrall68 = "T01Thrall68";
soundhandle gg_snd_WaterLakeLoop1 = "LakeLoop";
soundhandle gg_snd_WindLoopStereo = "AmbientSoundTestWind";

//--------------------------------------------------------------------------------------------------
// Custom Script: Cameras
//--------------------------------------------------------------------------------------------------
camerainfo gg_cam_End_Alternate = CameraInfoFromId(10001);
camerainfo gg_cam_EndCin1 = CameraInfoFromId(10002);
camerainfo gg_cam_EndCin2 = CameraInfoFromId(10003);
camerainfo gg_cam_Intro_Skipped = CameraInfoFromId(10004);
camerainfo gg_cam_Intro01 = CameraInfoFromId(10005);
camerainfo gg_cam_Intro02 = CameraInfoFromId(10006);
camerainfo gg_cam_Intro03 = CameraInfoFromId(10007);
camerainfo gg_cam_Intro04A = CameraInfoFromId(10008);
camerainfo gg_cam_Intro04B = CameraInfoFromId(10009);
camerainfo gg_cam_Intro05A = CameraInfoFromId(10010);
camerainfo gg_cam_Intro05B = CameraInfoFromId(10011);
camerainfo gg_cam_Intro06 = CameraInfoFromId(10012);
camerainfo gg_cam_Medivh_Human_02 = CameraInfoFromId(10013);
camerainfo gg_cam_Medivh_Human_Line = CameraInfoFromId(10014);
camerainfo gg_cam_Medivh_Transform = CameraInfoFromId(10015);
camerainfo gg_cam_OldIntro1 = CameraInfoFromId(10016);
camerainfo gg_cam_OldIntro2 = CameraInfoFromId(10017);
camerainfo gg_cam_OldIntro3 = CameraInfoFromId(10018);
 

//--------------------------------------------------------------------------------------------------
// Custom Script: Unit
//--------------------------------------------------------------------------------------------------
//unit gg_unit_Othr_0024 = UnitFromId(35);
    unit  gg_unit_ogru_0023 = UnitFromId(19);
    unit  gg_unit_ogru_0025 = UnitFromId(20);
    unit  gg_unit_ngno_0060 = UnitFromId(23);
    unit  gg_unit_ogru_0022 = UnitFromId(26);
    unit  gg_unit_ngno_0027 = UnitFromId(28);
    unit  gg_unit_ngno_0028 = UnitFromId(29);
    unit  gg_unit_ngna_0029 = UnitFromId(30);
    unit  gg_unit_Othr_0024 = UnitFromId(35);
    unit  gg_unit_nogr_0036 = UnitFromId(36);
    unit  gg_unit_nmdm_0019 = UnitFromId(40);
    unit  gg_unit_nC00_0013 = UnitFromId(39);
//***************************************************************************
//*
//*  Unit Creation
//*
//***************************************************************************
//===========================================================================
void CreateUnitsForPlayer0(){
    SelectHeroSkill( gg_unit_Othr_0024, 'AOfs' );
}

//--------------------------------------------------------------------------------------------------
// Custom Script: Globals
//--------------------------------------------------------------------------------------------------
    unit  udg_Thrall   = null;
    unit  udg_Medivh   = null;
    boolean    udg_IntroSkipped;
    player     udg_APlayer01     = 0;
    quest udg_QUESTFindProphet  = 0;
    fogmodifier    udg_BannerVisibilityMod    = null;
    soundhandle udg_GoodJobSound  = null;
    unit  udg_Grunt1   = null;
    unit  udg_Grunt2   = null;
    unit  udg_Grunt3   = null;
    integer    udg_NarratorPortrait;
    group udg_GnollGroup    = null;
    group udg_MurlocGroup   = null;
    boolean    udg_EndSkipped;
    group udg_TrollsGroup   = null;
    fogmodifier    udg_WMurlocFallsVis   = null;
    fogmodifier    udg_WWestFallsVis = null;
    player     udg_APlayer04_Rescuables   = 0;
    boolean    udg_QuestProphetCreated;
    boolean    udg_MedivhCanCircle;
    player     udg_APlayer03_TheProphet   = 0;
    real  udg_FlagVisRadius;
    real  udg_ActAbortPostDelay;
    real  udg_ActAbortPreDelay;
    real  udg_ActAbortDoneDelay;
    real  udg_HintDelay;
    real  udg_QuestDelay;
    fogmodifier    udg_Visibility01  = null;
    fogmodifier    udg_Visibility02  = null;
    fogmodifier    udg_Visibility03  = null;
    fogmodifier    udg_Visibility04  = null;
    fogmodifier    udg_Visibility05  = null;
    fogmodifier    udg_Visibility06  = null;
    fogmodifier    udg_Visibility07  = null;
    fogmodifier    udg_Visibility08  = null;
    real  udg_PingTime;
    group udg_RescuableGrunts   = null;
    timer udg_R1RescueTimer = null;
    real  udg_HeyLookA;
    real  udg_HeyLookB;
    real  udg_HeyLookG;
    real  udg_HeyLookR;
    unit  udg_Circle01 = null;
    timer udg_H1HeroLevelTimer  = null;
    group udg_YourUnits     = null;
    boolean    udg_GameOver;
    integer    udg_HeroPointsAvailable;
    boolean    udg_M_FoundMurlocsDone;
    boolean    udg_H_SpendPointDone;
    integer    udg_TempUnitsInArea;
    boolean    udg_I_ManaPotionDone;
    fogmodifier    udg_Visibility09  = null;
    fogmodifier    udg_Visibility10  = null;
    real  udg_SpeakingDistance;
    fogmodifier    udg_Visibility11  = null;
    unit  udg_Golem    = null;
    unit  udg_Ogre     = null;
    fogmodifier    udg_Visibility12  = null;
    boolean    udg_SlowNightAllowed;
    unit  udg_Gnoll    = null;
    boolean    udg_SlowDayAllowed;
    fogmodifier    udg_VisibilityVictory = null;
    unit  udg_Circle02 = null;
    unit  udg_Circle03 = null;
    unit  udg_Circle04 = null;
    unit  udg_Circle05 = null;
    unit  udg_Circle09 = null;
    unit  udg_CircleVictory = null;
    player     udg_APlayer05_Circles = 0;
void InitGlobalsWc3(){
    udg_IntroSkipped    = false;
    udg_APlayer01   = Player(0);
    udg_GoodJobSound    = null;
    udg_Grunt1 = null;
    udg_Grunt2 = null;
    udg_Grunt3 = null;
    udg_NarratorPortrait     = 0;
    udg_GnollGroup      = CreateGroup();
    udg_MurlocGroup     = CreateGroup();
    udg_EndSkipped      = false;
    udg_TrollsGroup     = CreateGroup();
    udg_APlayer04_Rescuables     = Player(3);
    udg_QuestProphetCreated  = false;
    udg_MedivhCanCircle = false;
    udg_APlayer03_TheProphet     = Player(2);
    udg_FlagVisRadius   = 512.00;
    udg_ActAbortPostDelay    = 0.30;
    udg_ActAbortPreDelay     = 0.20;
    udg_ActAbortDoneDelay    = 0.40;
    udg_HintDelay   = bj_QUEUE_DELAY_HINT;
    udg_QuestDelay      = bj_QUEUE_DELAY_QUEST;
    udg_PingTime    = 2.00;
    udg_RescuableGrunts = CreateGroup();
    udg_R1RescueTimer   = CreateTimer();
    udg_HeyLookA    = 0.00;
    udg_HeyLookB    = 100.00;
    udg_HeyLookG    = 80.00;
    udg_HeyLookR    = 60.00;
    udg_Circle01    = null;
    udg_H1HeroLevelTimer     = CreateTimer();
    udg_YourUnits   = CreateGroup();
    udg_GameOver    = false;
    udg_HeroPointsAvailable  = 0;
    udg_M_FoundMurlocsDone   = false;
    udg_H_SpendPointDone     = false;
    udg_TempUnitsInArea = 0;
    udg_I_ManaPotionDone     = false;
    udg_SpeakingDistance     = 1600.00;
    udg_Golem  = null;
    udg_Ogre   = null;
    udg_SlowNightAllowed     = false;
    udg_Gnoll  = null;
    udg_SlowDayAllowed  = false;
    udg_Circle02    = null;
    udg_Circle03    = null;
    udg_Circle04    = null;
    udg_Circle05    = null;
    udg_Circle09    = null;
    udg_CircleVictory   = null;
    udg_APlayer05_Circles    = Player(4);
}

//--------------------------------------------------------------------------------------------------
// Custom Script: Triggers
//--------------------------------------------------------------------------------------------------
	trigger gg_trg_Initialization_Phase = null;
	boolexpr GAw3_Trig_Initialization_Phase_Conditions = BoolExpression;
	trigger gg_trg_Init_01_Timing = null;
	boolexpr GAw3_Trig_Init_01_Timing_Conditions = BoolExpression;
	trigger gg_trg_Init_02_Players = null;
	boolexpr GAw3_Trig_Init_02_Players_Conditions = BoolExpression;
	trigger gg_trg_Init_03_Units = null;
	boolexpr GAw3_Trig_Init_03_Units_Conditions = BoolExpression;
	trigger gg_trg_Init_04_Environment = null;
	boolexpr GAw3_Trig_Init_04_Environment_Conditions = BoolExpression;
	trigger gg_trg_Init_05_Visibility = null;
	boolexpr GAw3_Trig_Init_05_Visibility_Conditions = BoolExpression;
	trigger gg_trg_Init_06_Sounds = null;
	boolexpr GAw3_Trig_Init_06_Sounds_Conditions = BoolExpression;
	trigger gg_trg_Intro_Cinematic = null;
	boolexpr GAw3_Trig_Intro_Cinematic_Conditions = BoolExpression;
	trigger gg_trg_Intro_Cinematic_Skip = null;
	boolexpr GAw3_Trig_Intro_Cinematic_Skip_Conditions = BoolExpression;
	trigger gg_trg_The_Prophet_Flies_Overhead = null;
	boolexpr GAw3_Trig_The_Prophet_Flies_Overhead_Conditions = BoolExpression;
	trigger gg_trg_The_Prophet_Circles1 = null;
	boolexpr GAw3_Trig_The_Prophet_Circles1_Conditions = BoolExpression;
	trigger gg_trg_The_Prophet_Circles2 = null;
	boolexpr GAw3_Trig_The_Prophet_Circles2_Conditions = BoolExpression;
	trigger gg_trg_The_Prophet_Circles3 = null;
	boolexpr GAw3_Trig_The_Prophet_Circles3_Conditions = BoolExpression;
	trigger gg_trg_The_Prophet_Circles4 = null;
	boolexpr GAw3_Trig_The_Prophet_Circles4_Conditions = BoolExpression;
	trigger gg_trg_The_Prophet_Circles5 = null;
	boolexpr GAw3_Trig_The_Prophet_Circles5_Conditions = BoolExpression;
	trigger gg_trg_The_Prophet_Circles6 = null;
	boolexpr GAw3_Trig_The_Prophet_Circles6_Conditions = BoolExpression;
	trigger gg_trg_The_Prophet_Circles7 = null;
	boolexpr GAw3_Trig_The_Prophet_Circles7_Conditions = BoolExpression;
	trigger gg_trg_The_Prophet_Circles8 = null;
	boolexpr GAw3_Trig_The_Prophet_Circles8_Conditions = BoolExpression;
	trigger gg_trg_The_Prophet_Circles9 = null;
	boolexpr GAw3_Trig_The_Prophet_Circles9_Conditions = BoolExpression;
	trigger gg_trg_The_Prophet_Circles10 = null;
	boolexpr GAw3_Trig_The_Prophet_Circles10_Conditions = BoolExpression;
	trigger gg_trg_The_Prophet_Circles11 = null;
	boolexpr GAw3_Trig_The_Prophet_Circles11_Conditions = BoolExpression;
	trigger gg_trg_The_Prophet_Circles12 = null;
	boolexpr GAw3_Trig_The_Prophet_Circles12_Conditions = BoolExpression;
	trigger gg_trg_Medivh_Reaches_Home = null;
	boolexpr GAw3_Trig_Medivh_Reaches_Home_Conditions = BoolExpression;
	trigger gg_trg_Intro_Time_Stop = null;
	boolexpr GAw3_Trig_Intro_Time_Stop_Conditions = BoolExpression;
	trigger gg_trg_Gameplay = null;
	boolexpr GAw3_Trig_Gameplay_Conditions = BoolExpression;
	trigger gg_trg_Waste_Queue_Time = null;
	boolexpr GAw3_Trig_Waste_Queue_Time_Conditions = BoolExpression;
	trigger gg_trg_End_Cinematic = null;
	boolexpr GAw3_Trig_End_Cinematic_Conditions = BoolExpression;
	trigger gg_trg_End_Cinematic_Skip = null;
	boolexpr GAw3_Trig_End_Cinematic_Skip_Conditions = BoolExpression;
	trigger gg_trg_Next_Level_Prep = null;
	boolexpr GAw3_Trig_Next_Level_Prep_Conditions = BoolExpression;
	trigger gg_trg_Next_Level_Run = null;
	boolexpr GAw3_Trig_Next_Level_Run_Conditions = BoolExpression;
	trigger gg_trg_Victory_Cheat = null;
	boolexpr GAw3_Trig_Victory_Cheat_Conditions = BoolExpression;
	trigger gg_trg_Defeat_Cheat = null;
	boolexpr GAw3_Trig_Defeat_Cheat_Conditions = BoolExpression;
	trigger gg_trg_Victory_Found_Medivh = null;
	boolexpr GAw3_Trig_Victory_Found_Medivh_Conditions = BoolExpression;
	trigger gg_trg_Defeat_Thrall_Dies = null;
	boolexpr GAw3_Trig_Defeat_Thrall_Dies_Conditions = BoolExpression;
	trigger gg_trg_Hint_RightClickMove = null;
	boolexpr GAw3_Trig_Hint_RightClickMove_Conditions = BoolExpression;
	trigger gg_trg_Hint_Scrolling = null;
	boolexpr GAw3_Trig_Hint_Scrolling_Conditions = BoolExpression;
	trigger gg_trg_Hint_ArrowKeys = null;
	boolexpr GAw3_Trig_Hint_ArrowKeys_Conditions = BoolExpression;
	trigger gg_trg_Hint_MessageLog = null;
	boolexpr GAw3_Trig_Hint_MessageLog_Conditions = BoolExpression;
	trigger gg_trg_Hint_ClickDragSelect = null;
	boolexpr GAw3_Trig_Hint_ClickDragSelect_Conditions = BoolExpression;
	trigger gg_trg_Hint_RightClickAttack = null;
	boolexpr GAw3_Trig_Hint_RightClickAttack_Conditions = BoolExpression;
	trigger gg_trg_Hint_AttackMove = null;
	boolexpr GAw3_Trig_Hint_AttackMove_Conditions = BoolExpression;
	trigger gg_trg_Hint_AutoAttack = null;
	boolexpr GAw3_Trig_Hint_AutoAttack_Conditions = BoolExpression;
	trigger gg_trg_Hint_HeroIcon = null;
	boolexpr GAw3_Trig_Hint_HeroIcon_Conditions = BoolExpression;
	trigger gg_trg_Hint_PickUpItem = null;
	boolexpr GAw3_Trig_Hint_PickUpItem_Conditions = BoolExpression;
	trigger gg_trg_Hint_ItemTooltip = null;
	boolexpr GAw3_Trig_Hint_ItemTooltip_Conditions = BoolExpression;
	trigger gg_trg_Hint_UnitStatus = null;
	boolexpr GAw3_Trig_Hint_UnitStatus_Conditions = BoolExpression;
	trigger gg_trg_Hint_UseManaPotion = null;
	boolexpr GAw3_Trig_Hint_UseManaPotion_Conditions = BoolExpression;
	trigger gg_trg_Hint_NightVisibility = null;
	boolexpr GAw3_Trig_Hint_NightVisibility_Conditions = BoolExpression;
	trigger gg_trg_Hint_UnexploredAreas = null;
	boolexpr GAw3_Trig_Hint_UnexploredAreas_Conditions = BoolExpression;
	trigger gg_trg_Hint_SleepersWake = null;
	boolexpr GAw3_Trig_Hint_SleepersWake_Conditions = BoolExpression;
	trigger gg_trg_Hint_CreepLevel = null;
	boolexpr GAw3_Trig_Hint_CreepLevel_Conditions = BoolExpression;
	trigger gg_trg_Hint_Tomes = null;
	boolexpr GAw3_Trig_Hint_Tomes_Conditions = BoolExpression;
	trigger gg_trg_MissionFailed_ThrallDead = null;
	boolexpr GAw3_Trig_MissionFailed_ThrallDead_Conditions = BoolExpression;
	trigger gg_trg_QuestProphet_Create = null;
	boolexpr GAw3_Trig_QuestProphet_Create_Conditions = BoolExpression;
	trigger gg_trg_QuestProphet_Discover = null;
	boolexpr GAw3_Trig_QuestProphet_Discover_Conditions = BoolExpression;
	trigger gg_trg_QuestProphet_Complete = null;
	boolexpr GAw3_Trig_QuestProphet_Complete_Conditions = BoolExpression;
	trigger gg_trg_Track_Unit_Deaths = null;
	boolexpr GAw3_Trig_Track_Unit_Deaths_Conditions = BoolExpression;
	trigger gg_trg_Track_Creep_Deaths = null;
	boolexpr GAw3_Trig_Track_Creep_Deaths_Conditions = BoolExpression;
	trigger gg_trg_Thrall_Level_Limit = null;
	boolexpr GAw3_Trig_Thrall_Level_Limit_Conditions = BoolExpression;
	trigger gg_trg_Thrall_Gains_Point = null;
	boolexpr GAw3_Trig_Thrall_Gains_Point_Conditions = BoolExpression;
	trigger gg_trg_Thrall_Spends_Point = null;
	boolexpr GAw3_Trig_Thrall_Spends_Point_Conditions = BoolExpression;
	trigger gg_trg_SlowDay_StepA = null;
	boolexpr GAw3_Trig_SlowDay_StepA_Conditions = BoolExpression;
	trigger gg_trg_SlowDay_StepB = null;
	boolexpr GAw3_Trig_SlowDay_StepB_Conditions = BoolExpression;
	trigger gg_trg_SlowDay_StepC = null;
	boolexpr GAw3_Trig_SlowDay_StepC_Conditions = BoolExpression;
	trigger gg_trg_SlowDay_StepD = null;
	boolexpr GAw3_Trig_SlowDay_StepD_Conditions = BoolExpression;
	trigger gg_trg_SlowDay_StepE = null;
	boolexpr GAw3_Trig_SlowDay_StepE_Conditions = BoolExpression;
	trigger gg_trg_SlowDay_StepF = null;
	boolexpr GAw3_Trig_SlowDay_StepF_Conditions = BoolExpression;
	trigger gg_trg_SlowDay_StepG = null;
	boolexpr GAw3_Trig_SlowDay_StepG_Conditions = BoolExpression;
	trigger gg_trg_SlowNight_StepA = null;
	boolexpr GAw3_Trig_SlowNight_StepA_Conditions = BoolExpression;
	trigger gg_trg_SlowNight_StepB = null;
	boolexpr GAw3_Trig_SlowNight_StepB_Conditions = BoolExpression;
	trigger gg_trg_SlowNight_StepC = null;
	boolexpr GAw3_Trig_SlowNight_StepC_Conditions = BoolExpression;
	trigger gg_trg_SlowNight_StepD = null;
	boolexpr GAw3_Trig_SlowNight_StepD_Conditions = BoolExpression;
	trigger gg_trg_SlowNight_StepE = null;
	boolexpr GAw3_Trig_SlowNight_StepE_Conditions = BoolExpression;
	trigger gg_trg_SlowNight_StepF = null;
	boolexpr GAw3_Trig_SlowNight_StepF_Conditions = BoolExpression;
	trigger gg_trg_Check_Waterfalls = null;
	boolexpr GAw3_Trig_Check_Waterfalls_Conditions = BoolExpression;
	trigger gg_trg_Prophet_Discover_Q = null;
	boolexpr GAw3_Trig_Prophet_Discover_Q_Conditions = BoolExpression;
	trigger gg_trg_Prophet_Complete_Q = null;
	boolexpr GAw3_Trig_Prophet_Complete_Q_Conditions = BoolExpression;
	trigger gg_trg_S1_SelectThrall_Q = null;
	boolexpr GAw3_Trig_S1_SelectThrall_Q_Conditions = BoolExpression;
	trigger gg_trg_S1_SelectThrall_Abort = null;
	boolexpr GAw3_Trig_S1_SelectThrall_Abort_Conditions = BoolExpression;
	trigger gg_trg_S1_SelectThrall_Done = null;
	boolexpr GAw3_Trig_S1_SelectThrall_Done_Conditions = BoolExpression;
	trigger gg_trg_S2_MoveThrall_Q = null;
	boolexpr GAw3_Trig_S2_MoveThrall_Q_Conditions = BoolExpression;
	trigger gg_trg_S2_MoveThrall_Abort = null;
	boolexpr GAw3_Trig_S2_MoveThrall_Abort_Conditions = BoolExpression;
	trigger gg_trg_S2_MoveThrall_Done = null;
	boolexpr GAw3_Trig_S2_MoveThrall_Done_Conditions = BoolExpression;
	trigger gg_trg_S3_Scroll_Q = null;
	boolexpr GAw3_Trig_S3_Scroll_Q_Conditions = BoolExpression;
	trigger gg_trg_S3_Scroll_Abort = null;
	boolexpr GAw3_Trig_S3_Scroll_Abort_Conditions = BoolExpression;
	trigger gg_trg_S3_Scroll_Done = null;
	boolexpr GAw3_Trig_S3_Scroll_Done_Conditions = BoolExpression;
	trigger gg_trg_S4_BlackMask_Q = null;
	boolexpr GAw3_Trig_S4_BlackMask_Q_Conditions = BoolExpression;
	trigger gg_trg_S4_BlackMask_Abort = null;
	boolexpr GAw3_Trig_S4_BlackMask_Abort_Conditions = BoolExpression;
	trigger gg_trg_S4_BlackMask_Done = null;
	boolexpr GAw3_Trig_S4_BlackMask_Done_Conditions = BoolExpression;
	trigger gg_trg_S5_Unmasking_Q = null;
	boolexpr GAw3_Trig_S5_Unmasking_Q_Conditions = BoolExpression;
	trigger gg_trg_S5_Unmasking_Abort = null;
	boolexpr GAw3_Trig_S5_Unmasking_Abort_Conditions = BoolExpression;
	trigger gg_trg_S5_Unmasking_Done = null;
	boolexpr GAw3_Trig_S5_Unmasking_Done_Conditions = BoolExpression;
	trigger gg_trg_S6_MoveMore_Event = null;
	boolexpr GAw3_Trig_S6_MoveMore_Event_Conditions = BoolExpression;
	trigger gg_trg_S6_MoveMore_Q = null;
	boolexpr GAw3_Trig_S6_MoveMore_Q_Conditions = BoolExpression;
	trigger gg_trg_S6_MoveMore_Abort = null;
	boolexpr GAw3_Trig_S6_MoveMore_Abort_Conditions = BoolExpression;
	trigger gg_trg_S6_MoveMore_Done = null;
	boolexpr GAw3_Trig_S6_MoveMore_Done_Conditions = BoolExpression;
	trigger gg_trg_R1_Rescue_Q = null;
	boolexpr GAw3_Trig_R1_Rescue_Q_Conditions = BoolExpression;
	trigger gg_trg_R1_Rescue_Unhide = null;
	boolexpr GAw3_Trig_R1_Rescue_Unhide_Conditions = BoolExpression;
	trigger gg_trg_R1_Rescue_Rescue = null;
	boolexpr GAw3_Trig_R1_Rescue_Rescue_Conditions = BoolExpression;
	trigger gg_trg_R1_Rescue_Abort = null;
	boolexpr GAw3_Trig_R1_Rescue_Abort_Conditions = BoolExpression;
	trigger gg_trg_R1_Rescue_Done = null;
	boolexpr GAw3_Trig_R1_Rescue_Done_Conditions = BoolExpression;
	trigger gg_trg_R2_GroupSelect_Q = null;
	boolexpr GAw3_Trig_R2_GroupSelect_Q_Conditions = BoolExpression;
	trigger gg_trg_R2_GroupSelect_Abort = null;
	boolexpr GAw3_Trig_R2_GroupSelect_Abort_Conditions = BoolExpression;
	trigger gg_trg_R2_GroupSelect_Done = null;
	boolexpr GAw3_Trig_R2_GroupSelect_Done_Conditions = BoolExpression;
	trigger gg_trg_R3_GroupMove_Q = null;
	boolexpr GAw3_Trig_R3_GroupMove_Q_Conditions = BoolExpression;
	trigger gg_trg_R3_GroupMove_Abort = null;
	boolexpr GAw3_Trig_R3_GroupMove_Abort_Conditions = BoolExpression;
	trigger gg_trg_R3_GroupMove_Done = null;
	boolexpr GAw3_Trig_R3_GroupMove_Done_Conditions = BoolExpression;
	trigger gg_trg_A1_SingleGnoll_Q = null;
	boolexpr GAw3_Trig_A1_SingleGnoll_Q_Conditions = BoolExpression;
	trigger gg_trg_A1_SingleGnoll_OptLine = null;
	boolexpr GAw3_Trig_A1_SingleGnoll_OptLine_Conditions = BoolExpression;
	trigger gg_trg_A1_SingleGnoll_Abort = null;
	boolexpr GAw3_Trig_A1_SingleGnoll_Abort_Conditions = BoolExpression;
	trigger gg_trg_A1_SingleGnoll_DoneA = null;
	boolexpr GAw3_Trig_A1_SingleGnoll_DoneA_Conditions = BoolExpression;
	trigger gg_trg_A1_SingleGnoll_DoneB = null;
	boolexpr GAw3_Trig_A1_SingleGnoll_DoneB_Conditions = BoolExpression;
	trigger gg_trg_A2_MoreGnolls_Q = null;
	boolexpr GAw3_Trig_A2_MoreGnolls_Q_Conditions = BoolExpression;
	trigger gg_trg_A2_MoreGnolls_OptLine = null;
	boolexpr GAw3_Trig_A2_MoreGnolls_OptLine_Conditions = BoolExpression;
	trigger gg_trg_A2_MoreGnolls_Abort = null;
	boolexpr GAw3_Trig_A2_MoreGnolls_Abort_Conditions = BoolExpression;
	trigger gg_trg_A2_MoreGnolls_Done = null;
	boolexpr GAw3_Trig_A2_MoreGnolls_Done_Conditions = BoolExpression;
	trigger gg_trg_AutoAttack_Event = null;
	boolexpr GAw3_Trig_AutoAttack_Event_Conditions = BoolExpression;
	trigger gg_trg_AutoAttack_Q = null;
	boolexpr GAw3_Trig_AutoAttack_Q_Conditions = BoolExpression;
	trigger gg_trg_H1_HeroLevel_Q = null;
	boolexpr GAw3_Trig_H1_HeroLevel_Q_Conditions = BoolExpression;
	trigger gg_trg_H1_HeroLevel_Abort = null;
	boolexpr GAw3_Trig_H1_HeroLevel_Abort_Conditions = BoolExpression;
	trigger gg_trg_H1_HeroLevel_DoneA = null;
	boolexpr GAw3_Trig_H1_HeroLevel_DoneA_Conditions = BoolExpression;
	trigger gg_trg_H1_HeroLevel_DoneB = null;
	boolexpr GAw3_Trig_H1_HeroLevel_DoneB_Conditions = BoolExpression;
	trigger gg_trg_H1_HeroLevel_DoneC = null;
	boolexpr GAw3_Trig_H1_HeroLevel_DoneC_Conditions = BoolExpression;
	trigger gg_trg_H2_HeroPoints_Q = null;
	boolexpr GAw3_Trig_H2_HeroPoints_Q_Conditions = BoolExpression;
	trigger gg_trg_H2_HeroPoints_Abort = null;
	boolexpr GAw3_Trig_H2_HeroPoints_Abort_Conditions = BoolExpression;
	trigger gg_trg_H2_HeroPoints_DoneA = null;
	boolexpr GAw3_Trig_H2_HeroPoints_DoneA_Conditions = BoolExpression;
	trigger gg_trg_H2_HeroPoints_DoneB = null;
	boolexpr GAw3_Trig_H2_HeroPoints_DoneB_Conditions = BoolExpression;
	trigger gg_trg_H3_SpendPoint_Q = null;
	boolexpr GAw3_Trig_H3_SpendPoint_Q_Conditions = BoolExpression;
	trigger gg_trg_H3_SpendPoint_Abort = null;
	boolexpr GAw3_Trig_H3_SpendPoint_Abort_Conditions = BoolExpression;
	trigger gg_trg_H3_SpendPoint_Done = null;
	boolexpr GAw3_Trig_H3_SpendPoint_Done_Conditions = BoolExpression;
	trigger gg_trg_M1_FoundMurlocs_Event = null;
	boolexpr GAw3_Trig_M1_FoundMurlocs_Event_Conditions = BoolExpression;
	trigger gg_trg_M1_FoundMurlocs_Q = null;
	boolexpr GAw3_Trig_M1_FoundMurlocs_Q_Conditions = BoolExpression;
	trigger gg_trg_M1_FoundMurlocs_Abort = null;
	boolexpr GAw3_Trig_M1_FoundMurlocs_Abort_Conditions = BoolExpression;
	trigger gg_trg_M1_FoundMurlocs_Done = null;
	boolexpr GAw3_Trig_M1_FoundMurlocs_Done_Conditions = BoolExpression;
	trigger gg_trg_M2_UseChainLit_Event = null;
	boolexpr GAw3_Trig_M2_UseChainLit_Event_Conditions = BoolExpression;
	trigger gg_trg_M2_UseChainLit_Q = null;
	boolexpr GAw3_Trig_M2_UseChainLit_Q_Conditions = BoolExpression;
	trigger gg_trg_M2_UseChainLit_Abort = null;
	boolexpr GAw3_Trig_M2_UseChainLit_Abort_Conditions = BoolExpression;
	trigger gg_trg_M2_UseChainLit_Done = null;
	boolexpr GAw3_Trig_M2_UseChainLit_Done_Conditions = BoolExpression;
	trigger gg_trg_I1_PickUpItem_Q = null;
	boolexpr GAw3_Trig_I1_PickUpItem_Q_Conditions = BoolExpression;
	trigger gg_trg_I1_PickUpItem_Abort = null;
	boolexpr GAw3_Trig_I1_PickUpItem_Abort_Conditions = BoolExpression;
	trigger gg_trg_I1_PickUpItem_Done = null;
	boolexpr GAw3_Trig_I1_PickUpItem_Done_Conditions = BoolExpression;
	trigger gg_trg_I2_ManaPotion_Q = null;
	boolexpr GAw3_Trig_I2_ManaPotion_Q_Conditions = BoolExpression;
	trigger gg_trg_I2_ManaPotion_Abort = null;
	boolexpr GAw3_Trig_I2_ManaPotion_Abort_Conditions = BoolExpression;
	trigger gg_trg_I2_ManaPotion_Done = null;
	boolexpr GAw3_Trig_I2_ManaPotion_Done_Conditions = BoolExpression;
	trigger gg_trg_I3_LowMana_Event = null;
	boolexpr GAw3_Trig_I3_LowMana_Event_Conditions = BoolExpression;
	trigger gg_trg_I3_LowMana_Q = null;
	boolexpr GAw3_Trig_I3_LowMana_Q_Conditions = BoolExpression;
	trigger gg_trg_I3_LowMana_Abort = null;
	boolexpr GAw3_Trig_I3_LowMana_Abort_Conditions = BoolExpression;
	trigger gg_trg_I3_LowMana_Done = null;
	boolexpr GAw3_Trig_I3_LowMana_Done_Conditions = BoolExpression;
	trigger gg_trg_C1_Continue_Event = null;
	boolexpr GAw3_Trig_C1_Continue_Event_Conditions = BoolExpression;
	trigger gg_trg_C1_Continue_Q = null;
	boolexpr GAw3_Trig_C1_Continue_Q_Conditions = BoolExpression;
	trigger gg_trg_C1_Continue_Ping = null;
	boolexpr GAw3_Trig_C1_Continue_Ping_Conditions = BoolExpression;
	trigger gg_trg_C1_Continue_Abort = null;
	boolexpr GAw3_Trig_C1_Continue_Abort_Conditions = BoolExpression;
	trigger gg_trg_C1_Continue_Done = null;
	boolexpr GAw3_Trig_C1_Continue_Done_Conditions = BoolExpression;
	trigger gg_trg_N1_Nightfall_Event = null;
	boolexpr GAw3_Trig_N1_Nightfall_Event_Conditions = BoolExpression;
	trigger gg_trg_N1_Nightfall_Q = null;
	boolexpr GAw3_Trig_N1_Nightfall_Q_Conditions = BoolExpression;
	trigger gg_trg_N1_Nightfall_Abort = null;
	boolexpr GAw3_Trig_N1_Nightfall_Abort_Conditions = BoolExpression;
	trigger gg_trg_N1_Nightfall_Done = null;
	boolexpr GAw3_Trig_N1_Nightfall_Done_Conditions = BoolExpression;
	trigger gg_trg_Hidden_Item_Event = null;
	boolexpr GAw3_Trig_Hidden_Item_Event_Conditions = BoolExpression;
	trigger gg_trg_Hidden_Item_Q = null;
	boolexpr GAw3_Trig_Hidden_Item_Q_Conditions = BoolExpression;
	trigger gg_trg_O1_SleepingOgre_Event = null;
	boolexpr GAw3_Trig_O1_SleepingOgre_Event_Conditions = BoolExpression;
	trigger gg_trg_O1_SleepingOgre_Q = null;
	boolexpr GAw3_Trig_O1_SleepingOgre_Q_Conditions = BoolExpression;
	trigger gg_trg_O1_SleepingOgre_Abort = null;
	boolexpr GAw3_Trig_O1_SleepingOgre_Abort_Conditions = BoolExpression;
	trigger gg_trg_O1_SleepingOgre_Done = null;
	boolexpr GAw3_Trig_O1_SleepingOgre_Done_Conditions = BoolExpression;
	trigger gg_trg_G1_Golem_Event = null;
	boolexpr GAw3_Trig_G1_Golem_Event_Conditions = BoolExpression;
	trigger gg_trg_G1_Golem_Q = null;
	boolexpr GAw3_Trig_G1_Golem_Q_Conditions = BoolExpression;
	trigger gg_trg_G1_Golem_Abort = null;
	boolexpr GAw3_Trig_G1_Golem_Abort_Conditions = BoolExpression;
	trigger gg_trg_G1_Golem_Done = null;
	boolexpr GAw3_Trig_G1_Golem_Done_Conditions = BoolExpression;
	trigger gg_trg_G2_Ring_Event = null;
	boolexpr GAw3_Trig_G2_Ring_Event_Conditions = BoolExpression;
	trigger gg_trg_G2_Ring_Q = null;
	boolexpr GAw3_Trig_G2_Ring_Q_Conditions = BoolExpression;
	trigger gg_trg_T1_Trolls_Event = null;
	boolexpr GAw3_Trig_T1_Trolls_Event_Conditions = BoolExpression;
	trigger gg_trg_T1_Trolls_Q = null;
	boolexpr GAw3_Trig_T1_Trolls_Q_Conditions = BoolExpression;
	trigger gg_trg_T1_Trolls_Abort = null;
	boolexpr GAw3_Trig_T1_Trolls_Abort_Conditions = BoolExpression;
	trigger gg_trg_T1_Trolls_Done = null;
	boolexpr GAw3_Trig_T1_Trolls_Done_Conditions = BoolExpression;
	trigger gg_trg_T2_Tome_Event = null;
	boolexpr GAw3_Trig_T2_Tome_Event_Conditions = BoolExpression;
	trigger gg_trg_T2_Tome_Q = null;
	boolexpr GAw3_Trig_T2_Tome_Q_Conditions = BoolExpression;

//--------------------------------------------------------------------------------------------------
// Custom Script: Initialization
//--------------------------------------------------------------------------------------------------
//***************************************************************************
//*
//*  Triggers
//*
//***************************************************************************
//===========================================================================
// Trigger: Initialization Phase
//===========================================================================
bool Trig_Initialization_Phase_Actions(bool testConds, bool runActions){
	if (testConds){
		if (!GAw3_Trig_Initialization_Phase_Conditions()){
			return false;
		}
	}
	if (!runActions) {
		return true;
	}
    SetCampaignMenuRaceBJ( bj_CAMPAIGN_INDEX_T );
    ConditionalTriggerExecute( gg_trg_Init_01_Timing );
    ConditionalTriggerExecute( gg_trg_Init_02_Players );
    ConditionalTriggerExecute( gg_trg_Init_03_Units );
    ConditionalTriggerExecute( gg_trg_Init_04_Environment );
    ConditionalTriggerExecute( gg_trg_Init_05_Visibility );
    ConditionalTriggerExecute( gg_trg_Init_06_Sounds );
    CommentString( "Create Quests" );
    ConditionalTriggerExecute( gg_trg_QuestProphet_Create );
    ConditionalTriggerExecute( gg_trg_Intro_Cinematic );
    return true;
}
//===========================================================================
void InitTrig_Initialization_Phase(){
    //gg_trg_Initialization_Phase = CreateTrigger(  );
    gg_trg_Initialization_Phase = TriggerCreate( "Trig_Initialization_Phase_Actions" );
}
//===========================================================================
// Trigger: Init 01 Timing
//===========================================================================
bool Trig_Init_01_Timing_Actions(bool testConds, bool runActions){
	if (testConds){
		if (!GAw3_Trig_Init_01_Timing_Conditions()){
			return false;
		}
	}
	if (!runActions) {
		return true;
	}
    CommentString( "It's a tutorial - give the player a little more time" );
    udg_QuestDelay = RMaxBJ(bj_QUEUE_DELAY_QUEST, 6.00);
    udg_HintDelay = RMaxBJ(bj_QUEUE_DELAY_HINT, 6.00);
    return true;
}
//===========================================================================
void InitTrig_Init_01_Timing(){
    //gg_trg_Init_01_Timing = CreateTrigger(  );
    gg_trg_Init_01_Timing = TriggerCreate( "Trig_Init_01_Timing_Actions" );
}
//===========================================================================
// Trigger: Init 02 Players
//===========================================================================
bool Trig_Init_02_Players_Actions(bool testConds, bool runActions){
	if (testConds){
		if (!GAw3_Trig_Init_02_Players_Conditions()){
			return false;
		}
	}
	if (!runActions) {
		return true;
	}
    CommentString( "Alliances" );
    SetPlayerAllianceStateBJ( Player(PLAYER_NEUTRAL_AGGRESSIVE), udg_APlayer03_TheProphet, bj_ALLIANCE_ALLIED );
    CommentString( "Player Colors" );
    SetPlayerColorBJ( udg_APlayer03_TheProphet, GetPlayerColor(Player(PLAYER_NEUTRAL_PASSIVE)), true );
    CommentString( "Score Screen" );
    SetPlayerOnScoreScreenBJ( false, udg_APlayer03_TheProphet );
    SetPlayerOnScoreScreenBJ( false, udg_APlayer04_Rescuables );
    SetPlayerOnScoreScreenBJ( false, udg_APlayer05_Circles );
    CommentString( "Disable Bounty" );
    SetPlayerFlagBJ( PLAYER_STATE_GIVES_BOUNTY, false, Player(PLAYER_NEUTRAL_AGGRESSIVE) );
    return true;
}
//===========================================================================
void InitTrig_Init_02_Players(){
    //gg_trg_Init_02_Players = CreateTrigger(  );
    gg_trg_Init_02_Players = TriggerCreate( "Trig_Init_02_Players_Actions" );
}
//===========================================================================
// Trigger: Init 03 Units
//===========================================================================
void Trig_Init_03_Units_Func015002(){
    ShowUnitHide( GetEnumUnit() );
}
boolean Trig_Init_03_Units_Func017001002(){
    return ( IsUnitType(GetFilterUnit(), UNIT_TYPE_STRUCTURE) == true );
}
void Trig_Init_03_Units_Func017002(){
    SetUnitInvulnerable( GetEnumUnit(), true );
}
bool Trig_Init_03_Units_Actions(bool testConds, bool runActions){
	if (testConds){
		if (!GAw3_Trig_Init_03_Units_Conditions()){
			return false;
		}
	}
	if (!runActions) {
		return true;
	}
    CommentString( "Configure Heroes" );
    udg_Thrall = gg_unit_Othr_0024;
    udg_Medivh = gg_unit_nmdm_0019;
    RemoveGuardPosition( udg_Medivh );
    SetUnitInvulnerable( udg_Medivh, true );
    GroupAddUnitSimple( udg_Thrall, udg_YourUnits );
    SetPlayerHandicapXPBJ( udg_APlayer01, 300.00 );
    CommentString( "Configure Rescuables" );
    udg_Grunt1 = gg_unit_ogru_0022;
    udg_Grunt2 = gg_unit_ogru_0023;
    udg_Grunt3 = gg_unit_ogru_0025;
    GroupAddUnitSimple( udg_Grunt1, udg_RescuableGrunts );
    GroupAddUnitSimple( udg_Grunt2, udg_RescuableGrunts );
    GroupAddUnitSimple( udg_Grunt3, udg_RescuableGrunts );
    ForGroup( udg_RescuableGrunts, Trig_Init_03_Units_Func015002 );
    CommentString( "Configure Rescuables' Base" );
    ForGroup( GetUnitsOfPlayerMatching(udg_APlayer04_Rescuables, Condition(Trig_Init_03_Units_Func017001002)),  Trig_Init_03_Units_Func017002 );
    CommentString( "Configure Creep Camp Groups" );
    udg_GnollGroup = GetUnitsInRectOfPlayer(gg_rct_GnollGroupRegion, Player(PLAYER_NEUTRAL_AGGRESSIVE));
    udg_MurlocGroup = GetUnitsInRectOfPlayer(gg_rct_MurlocGroupRegion, Player(PLAYER_NEUTRAL_AGGRESSIVE));
    udg_TrollsGroup = GetUnitsInRectOfPlayer(gg_rct_TrollGroupRegion, Player(PLAYER_NEUTRAL_AGGRESSIVE));
    udg_Gnoll = gg_unit_ngno_0060;
    udg_Ogre = gg_unit_nogr_0036;
    udg_Golem = gg_unit_nC00_0013;
    return true;
}
//===========================================================================
void InitTrig_Init_03_Units(){
    //gg_trg_Init_03_Units = CreateTrigger(  );
    gg_trg_Init_03_Units = TriggerCreate( "Trig_Init_03_Units_Actions" );
}
//===========================================================================
// Trigger: Init 04 Environment
//===========================================================================
bool Trig_Init_04_Environment_Actions(bool testConds, bool runActions){
	if (testConds){
		if (!GAw3_Trig_Init_04_Environment_Conditions()){
			return false;
		}
	}
	if (!runActions) {
		return true;
	}
    CommentString( "Time of day" );
    EnableDawnDusk( false );
    SetTimeOfDayScalePercentBJ( 800.00 );
    SetTimeOfDay( 0.01 );
    EnableTrigger( gg_trg_Intro_Time_Stop );
    CommentString( "Weather" );
    SetDoodadAnimationRectBJ( "death", 'YOlb', gg_rct_Lightnin );
    SetDoodadAnimationRectBJ( "death", 'YOlb', gg_rct_Lightnin02 );
    CommentString( "Configure COPs" );
    udg_Circle01 = GroupPickRandomUnit(GetUnitsInRectOfPlayer(gg_rct_Spot01, udg_APlayer05_Circles));
    udg_Circle02 = GroupPickRandomUnit(GetUnitsInRectOfPlayer(gg_rct_Spot02, udg_APlayer05_Circles));
    udg_Circle03 = GroupPickRandomUnit(GetUnitsInRectOfPlayer(gg_rct_Spot03, udg_APlayer05_Circles));
    udg_Circle04 = GroupPickRandomUnit(GetUnitsInRectOfPlayer(gg_rct_Spot04, udg_APlayer05_Circles));
    udg_Circle05 = GroupPickRandomUnit(GetUnitsInRectOfPlayer(gg_rct_Spot05, udg_APlayer05_Circles));
    udg_Circle09 = GroupPickRandomUnit(GetUnitsInRectOfPlayer(gg_rct_Spot09, udg_APlayer05_Circles));
    udg_CircleVictory = GroupPickRandomUnit(GetUnitsInRectOfPlayer(gg_rct_SpotVictory, udg_APlayer05_Circles));
    SetUnitColor( udg_Circle01, PLAYER_COLOR_LIGHT_GRAY );
    SetUnitColor( udg_Circle02, PLAYER_COLOR_LIGHT_GRAY );
    SetUnitColor( udg_Circle03, PLAYER_COLOR_LIGHT_GRAY );
    SetUnitColor( udg_Circle04, PLAYER_COLOR_LIGHT_GRAY );
    SetUnitColor( udg_Circle05, PLAYER_COLOR_LIGHT_GRAY );
    SetUnitColor( udg_Circle09, PLAYER_COLOR_LIGHT_GRAY );
    SetUnitColor( udg_CircleVictory, PLAYER_COLOR_LIGHT_GRAY );
    return true;
}
//===========================================================================
void InitTrig_Init_04_Environment(){
    //gg_trg_Init_04_Environment = CreateTrigger(  );
    gg_trg_Init_04_Environment = TriggerCreate( "Trig_Init_04_Environment_Actions" );
}
//===========================================================================
// Trigger: Init 05 Visibility
//===========================================================================
bool Trig_Init_05_Visibility_Actions(bool testConds, bool runActions){
	if (testConds){
		if (!GAw3_Trig_Init_05_Visibility_Conditions()){
			return false;
		}
	}
	if (!runActions) {
		return true;
	}
    CommentString( "Banner VMs" );
    CreateFogModifierRadiusLocBJ( false, udg_APlayer01, FOG_OF_WAR_VISIBLE, GetRectCenter(gg_rct_Spot01), udg_FlagVisRadius );
    udg_Visibility01 = GetLastCreatedFogModifier();
    CreateFogModifierRadiusLocBJ( false, udg_APlayer01, FOG_OF_WAR_VISIBLE, GetRectCenter(gg_rct_Spot02), udg_FlagVisRadius );
    udg_Visibility02 = GetLastCreatedFogModifier();
    CreateFogModifierRadiusLocBJ( false, udg_APlayer01, FOG_OF_WAR_VISIBLE, GetRectCenter(gg_rct_Spot03), udg_FlagVisRadius );
    udg_Visibility03 = GetLastCreatedFogModifier();
    CreateFogModifierRadiusLocBJ( false, udg_APlayer01, FOG_OF_WAR_VISIBLE, GetRectCenter(gg_rct_Spot04), udg_FlagVisRadius );
    udg_Visibility04 = GetLastCreatedFogModifier();
    CreateFogModifierRadiusLocBJ( false, udg_APlayer01, FOG_OF_WAR_VISIBLE, GetRectCenter(gg_rct_Spot05), udg_FlagVisRadius );
    udg_Visibility05 = GetLastCreatedFogModifier();
    CreateFogModifierRadiusLocBJ( false, udg_APlayer01, FOG_OF_WAR_VISIBLE, GetRectCenter(gg_rct_Spot06), udg_FlagVisRadius );
    udg_Visibility06 = GetLastCreatedFogModifier();
    CreateFogModifierRadiusLocBJ( false, udg_APlayer01, FOG_OF_WAR_VISIBLE, GetRectCenter(gg_rct_Spot07), udg_FlagVisRadius );
    udg_Visibility07 = GetLastCreatedFogModifier();
    CreateFogModifierRadiusLocBJ( false, udg_APlayer01, FOG_OF_WAR_VISIBLE, GetRectCenter(gg_rct_Spot08), udg_FlagVisRadius );
    udg_Visibility08 = GetLastCreatedFogModifier();
    CreateFogModifierRadiusLocBJ( false, udg_APlayer01, FOG_OF_WAR_VISIBLE, GetRectCenter(gg_rct_Spot09), udg_FlagVisRadius );
    udg_Visibility09 = GetLastCreatedFogModifier();
    CreateFogModifierRadiusLocBJ( false, udg_APlayer01, FOG_OF_WAR_VISIBLE, GetRectCenter(gg_rct_Spot10), udg_FlagVisRadius );
    udg_Visibility10 = GetLastCreatedFogModifier();
    CreateFogModifierRadiusLocBJ( false, udg_APlayer01, FOG_OF_WAR_VISIBLE, GetRectCenter(gg_rct_Spot11), udg_FlagVisRadius );
    udg_Visibility11 = GetLastCreatedFogModifier();
    CreateFogModifierRadiusLocBJ( false, udg_APlayer01, FOG_OF_WAR_VISIBLE, GetRectCenter(gg_rct_Spot12), udg_FlagVisRadius );
    udg_Visibility12 = GetLastCreatedFogModifier();
    CreateFogModifierRadiusLocBJ( false, udg_APlayer01, FOG_OF_WAR_VISIBLE, GetRectCenter(gg_rct_SpotVictory), udg_FlagVisRadius );
    udg_VisibilityVictory = GetLastCreatedFogModifier();
    CommentString( "Waterfall VMs" );
    CreateFogModifierRadiusLocBJ( false, Player(0), FOG_OF_WAR_VISIBLE, GetRectCenter(gg_rct_West_Falls), 800.00 );
    udg_WWestFallsVis = GetLastCreatedFogModifier();
    CreateFogModifierRadiusLocBJ( false, Player(0), FOG_OF_WAR_VISIBLE, GetRectCenter(gg_rct_Murloc_Falls), 800.00 );
    udg_WMurlocFallsVis = GetLastCreatedFogModifier();
    CommentString( "Remask the map, in case any VMs left residuals" );
    CreateFogModifierRectBJ( true, udg_APlayer01, FOG_OF_WAR_MASKED, GetEntireMapRect() );
    DestroyFogModifier( GetLastCreatedFogModifier() );
    CommentString( "Visibility" );
    CreateNUnitsAtLoc( 1, 'ushd', udg_APlayer01, GetRectCenter(gg_rct_Visibility01), bj_UNIT_FACING );
    RemoveUnit( GetLastCreatedUnit() );
    CreateNUnitsAtLoc( 1, 'ushd', udg_APlayer01, GetRectCenter(gg_rct_Visibility02), bj_UNIT_FACING );
    RemoveUnit( GetLastCreatedUnit() );
    CreateNUnitsAtLoc( 1, 'ushd', udg_APlayer01, GetRectCenter(gg_rct_Visibility03), bj_UNIT_FACING );
    RemoveUnit( GetLastCreatedUnit() );
    CreateNUnitsAtLoc( 1, 'ushd', udg_APlayer01, GetRectCenter(gg_rct_Visibility04), bj_UNIT_FACING );
    RemoveUnit( GetLastCreatedUnit() );
    CreateNUnitsAtLoc( 1, 'ushd', udg_APlayer01, GetRectCenter(gg_rct_Visibility05), bj_UNIT_FACING );
    RemoveUnit( GetLastCreatedUnit() );
    return true;
}
//===========================================================================
void InitTrig_Init_05_Visibility(){
    //gg_trg_Init_05_Visibility = CreateTrigger(  );
    gg_trg_Init_05_Visibility = TriggerCreate( "Trig_Init_05_Visibility_Actions" );
}
//===========================================================================
// Trigger: Init 06 Sounds
//===========================================================================
bool Trig_Init_06_Sounds_Actions(bool testConds, bool runActions){
	if (testConds){
		if (!GAw3_Trig_Init_06_Sounds_Conditions()){
			return false;
		}
	}
	if (!runActions) {
		return true;
	}
    CommentString( "Configure Sounds" );
    udg_GoodJobSound = gg_snd_GoodJob;
    SetStackedSoundBJ( true, gg_snd_WaterLakeLoop1, gg_rct_LakeLoop01 );
    SetStackedSoundBJ( true, gg_snd_WaterLakeLoop1, gg_rct_LakeLoop02 );
    SetStackedSoundBJ( true, gg_snd_WaterLakeLoop1, gg_rct_LakeLoop03 );
    SetStackedSoundBJ( true, gg_snd_WaterLakeLoop1, gg_rct_LakeLoop04 );
    SetStackedSoundBJ( true, gg_snd_WaterLakeLoop1, gg_rct_LakeLoop05 );
    SetStackedSoundBJ( true, gg_snd_WaterLakeLoop1, gg_rct_LakeLoop06 );
    SetStackedSoundBJ( true, gg_snd_WaterLakeLoop1, gg_rct_LakeLoop07 );
    SetStackedSoundBJ( true, gg_snd_WaterLakeLoop1, gg_rct_LakeLoop08 );
    AttachSoundToUnitBJ( gg_snd_DruidOfTheTalonMorphedWarcry1, udg_Medivh );
    return true;
}
//===========================================================================
void InitTrig_Init_06_Sounds(){
    //gg_trg_Init_06_Sounds = CreateTrigger(  );
    gg_trg_Init_06_Sounds = TriggerCreate( "Trig_Init_06_Sounds_Actions" );
}

//--------------------------------------------------------------------------------------------------
// Custom Script: Intro Cinematic
//--------------------------------------------------------------------------------------------------
//===========================================================================
// Trigger: Intro Cinematic
//===========================================================================
boolean Trig_Intro_Cinematic_Func018001(){
    return ( udg_IntroSkipped == true );
}
boolean Trig_Intro_Cinematic_Func021001(){
    return ( udg_IntroSkipped == true );
}
boolean Trig_Intro_Cinematic_Func025001(){
    return ( udg_IntroSkipped == true );
}
boolean Trig_Intro_Cinematic_Func028001(){
    return ( udg_IntroSkipped == true );
}
boolean Trig_Intro_Cinematic_Func034001(){
    return ( udg_IntroSkipped == true );
}
boolean Trig_Intro_Cinematic_Func039001(){
    return ( udg_IntroSkipped == true );
}
boolean Trig_Intro_Cinematic_Func043001(){
    return ( udg_IntroSkipped == true );
}
boolean Trig_Intro_Cinematic_Func046001(){
    return ( udg_IntroSkipped == true );
}
boolean Trig_Intro_Cinematic_Func048001(){
    return ( udg_IntroSkipped == true );
}
boolean Trig_Intro_Cinematic_Func051001(){
    return ( udg_IntroSkipped == true );
}
boolean Trig_Intro_Cinematic_Func056001(){
    return ( udg_IntroSkipped == true );
}
boolean Trig_Intro_Cinematic_Func062001(){
    return ( udg_IntroSkipped == true );
}
boolean Trig_Intro_Cinematic_Func065001(){
    return ( udg_IntroSkipped == true );
}
boolean Trig_Intro_Cinematic_Func067001(){
    return ( udg_IntroSkipped == true );
}
boolean Trig_Intro_Cinematic_Func071001(){
    return ( udg_IntroSkipped == true );
}
bool Trig_Intro_Cinematic_Actions(bool testConds, bool runActions){
	if (testConds){
		if (!GAw3_Trig_Intro_Cinematic_Conditions()){
			return false;
		}
	}
	if (!runActions) {
		return true;
	}
    CinematicFadeBJ( bj_CINEFADETYPE_FADEOUT, 0.00, "ReplaceableTextures\\CameraMasks\\White_mask.tga", 0, 0, 0, 0 );
    CinematicModeBJ( true, GetPlayersAll() );
    CameraSetupApplyForPlayer( true, gg_cam_Intro01, udg_APlayer01, 0.00 );
    SetSkyModel( "Environment\\Sky\\FelwoodSky\\FelwoodSky.mdl" );
    SetUnitPositionLoc( udg_Medivh, GetRectCenter(gg_rct_MedivhStart01) );
    SetUnitPathing( udg_Thrall, false );
    SetUnitPositionLoc( udg_Thrall, GetRectCenter(gg_rct_Thrall00) );
    CommentString( "Music" );
    ClearMapMusicBJ(  );
    TriggerSleepAction( 0.01 );
    PlayThematicMusicBJ( "Sound\\Music\\mp3Music\\SadMystery.mp3" );
    SetMapMusicIndexedBJ( "music", 0 );
    TriggerSleepAction( 1.00 );
    CommentString( "CINEMATIC BEGINS - Cinematic can be skipped after this point" );
    EnableTrigger( gg_trg_Intro_Cinematic_Skip );
    CinematicFadeBJ( bj_CINEFADETYPE_FADEIN, 3.75, "ReplaceableTextures\\CameraMasks\\White_mask.tga", 0, 0, 0, 0 );
    TriggerSleepAction( 1.00 );
    if ( Trig_Intro_Cinematic_Func018001() ) {
        return true;
    }else{
        DoNothing(  );
    }
    PlaySoundBJ( gg_snd_RollingThunder1 );
    TriggerSleepAction( 0.50 );
    if ( Trig_Intro_Cinematic_Func021001() ) {
        return true;
    }else{
        DoNothing(  );
    }
    CommentString( "Thrall Exits Hut" );
    IssuePointOrderLocBJ( udg_Thrall, "move", GetRectCenter(gg_rct_Thrall01) );
    TriggerSleepAction( 0.50 );
    if ( Trig_Intro_Cinematic_Func025001() ) {
        return true;
    }else{
        DoNothing(  );
    }
    PlaySoundBJ( gg_snd_DoorSlam1 );
    TriggerSleepAction( 2.00 );
    if ( Trig_Intro_Cinematic_Func028001() ) {
        return true;
    }else{
        DoNothing(  );
    }
    SetUnitPathing( udg_Thrall, true );
    CommentString( "Thrall Line" );
    CameraSetupApplyForPlayer( true, gg_cam_Intro02, udg_APlayer01, 0.00 );
    TransmissionFromUnitWithNameBJ( GetPlayersAll(), udg_Thrall, "TRIGSTR_009", gg_snd_T01Thrall01, "TRIGSTR_010", bj_TIMETYPE_ADD, 0, false );
    WaitForSoundBJ( gg_snd_T01Thrall01, 0 );
    if ( Trig_Intro_Cinematic_Func034001() ) {
        return true;
    }else{
        DoNothing(  );
    }
    PlaySoundBJ( gg_snd_DruidOfTheTalonMorphedWarcry1 );
    SetUnitLookAt( udg_Thrall, "bone_head", udg_Medivh, 0, 0, 140.00 );
    IssuePointOrderLocBJ( udg_Medivh, "move", GetRectCenter(gg_rct_MedivhStart02) );
    TriggerSleepAction( 1.00 );
    if ( Trig_Intro_Cinematic_Func039001() ) {
        return true;
    }else{
        DoNothing(  );
    }
    CommentString( "Medivh Line" );
    CameraSetupApplyForPlayer( true, gg_cam_Intro03, udg_APlayer01, 0.00 );
    TriggerSleepAction( 4.00 );
    if ( Trig_Intro_Cinematic_Func043001() ) {
        return true;
    }else{
        DoNothing(  );
    }
    TransmissionFromUnitWithNameBJ( GetPlayersAll(), udg_Medivh, "TRIGSTR_011", gg_snd_T01Medivh02, "TRIGSTR_012", bj_TIMETYPE_ADD, 0, false );
    WaitForSoundBJ( gg_snd_T01Medivh02, 1.00 );
    if ( Trig_Intro_Cinematic_Func046001() ) {
        return true;
    }else{
        DoNothing(  );
    }
    TriggerSleepAction( 1.00 );
    if ( Trig_Intro_Cinematic_Func048001() ) {
        return true;
    }else{
        DoNothing(  );
    }
    PlaySoundBJ( gg_snd_RollingThunder1 );
    TriggerSleepAction( 1.00 );
    if ( Trig_Intro_Cinematic_Func051001() ) {
        return true;
    }else{
        DoNothing(  );
    }
    SetDoodadAnimationRectBJ( "stand", 'YOlb', gg_rct_Lightning5 );
    SetSoundVolumeBJ( gg_snd_LightningBolt, 30.00 );
    PlaySoundBJ( gg_snd_LightningBolt );
    TriggerSleepAction( 0.30 );
    if ( Trig_Intro_Cinematic_Func056001() ) {
        return true;
    }else{
        DoNothing(  );
    }
    udg_MedivhCanCircle = false;
    IssuePointOrderLocBJ( udg_Medivh, "move", GetRectCenter(gg_rct_MedivhRunHereDepart) );
    CommentString( "Thrall Line" );
    CameraSetupApplyForPlayer( true, gg_cam_Intro06, udg_APlayer01, 3.00 );
    TriggerSleepAction( 0.50 );
    if ( Trig_Intro_Cinematic_Func062001() ) {
        return true;
    }else{
        DoNothing(  );
    }
    IssuePointOrderLocBJ( udg_Thrall, "move", GetRectCenter(gg_rct_Thrall02) );
    TriggerSleepAction( 1.50 );
    if ( Trig_Intro_Cinematic_Func065001() ) {
        return true;
    }else{
        DoNothing(  );
    }
    ResetUnitLookAt( udg_Thrall );
    if ( Trig_Intro_Cinematic_Func067001() ) {
        return true;
    }else{
        DoNothing(  );
    }
    TransmissionFromUnitWithNameBJ( GetPlayersAll(), udg_Thrall, "TRIGSTR_013", gg_snd_T01Thrall03, "TRIGSTR_014", bj_TIMETYPE_ADD, 0, false );
    WaitForSoundBJ( gg_snd_T01Thrall03, 0.00 );
    TriggerSleepAction( 1.00 );
    if ( Trig_Intro_Cinematic_Func071001() ) {
        return true;
    }else{
        DoNothing(  );
    }
    CommentString( "CINEMATIC ENDS - Cinematic can no longer be skipped" );
    DisableTrigger( gg_trg_Intro_Cinematic_Skip );
    CommentString( "General cleanup" );
    CinematicFadeBJ( bj_CINEFADETYPE_FADEOUT, 2, "ReplaceableTextures\\CameraMasks\\White_mask.tga", 0, 0, 0, 0 );
    TriggerSleepAction( 2 );
    ResetToGameCameraForPlayer( udg_APlayer01, 0.00 );
    PanCameraToTimedLocForPlayer( udg_APlayer01, CameraSetupGetDestPositionLoc(gg_cam_Intro_Skipped), 0 );
    CinematicModeBJ( false, GetPlayersAll() );
    CameraResetSmoothingFactorBJ(  );
    SetSkyModel( null );
    CinematicFadeBJ( bj_CINEFADETYPE_FADEIN, 1.00, "ReplaceableTextures\\CameraMasks\\White_mask.tga", 0, 0, 0, 0 );
    TriggerSleepAction( 1.00 );
    CommentString( "Level-specific cleanup" );
    ConditionalTriggerExecute( gg_trg_Intro_Time_Stop );
    SetUnitPositionLocFacingBJ( udg_Medivh, GetRectCenter(gg_rct_MedivhRunHereDepart), 45.00 );
    IssuePointOrderLocBJ( udg_Medivh, "move", GetRectCenter(gg_rct_EndCin_Medivh_Waits_Here) );
    CommentString( "Gameplay" );
    ConditionalTriggerExecute( gg_trg_Gameplay );
    return true;
}
//===========================================================================
void InitTrig_Intro_Cinematic(){
    gg_trg_Intro_Cinematic = TriggerCreate( "Trig_Intro_Cinematic_Actions" );;
}
//===========================================================================
// Trigger: Intro Cinematic Skip
//===========================================================================
bool Trig_Intro_Cinematic_Skip_Actions(bool testConds, bool runActions){
	if (testConds){
		if (!GAw3_Trig_Intro_Cinematic_Skip_Conditions()){
			return false;
		}
	}
	if (!runActions) {
		return true;
	}
    DisableTrigger( GetTriggeringTrigger() );
    DisableTrigger( gg_trg_The_Prophet_Flies_Overhead );
    udg_IntroSkipped = true;
    CommentString( "Fade out" );
    CinematicFadeBJ( bj_CINEFADETYPE_FADEOUT, 0.50, "ReplaceableTextures\\CameraMasks\\White_mask.tga", 0, 0, 0, 0 );
    TriggerSleepAction( 0.60 );
    CommentString( "General cleanup" );
    CinematicModeBJ( false, GetPlayersAll() );
    CameraResetSmoothingFactorBJ(  );
    ResetToGameCameraForPlayer( udg_APlayer01, 0.00 );
    PanCameraToTimedLocForPlayer( udg_APlayer01, CameraSetupGetDestPositionLoc(gg_cam_Intro_Skipped), 0 );
    SetSkyModel( null );
    CommentString( "Level-specific cleanup" );
    ConditionalTriggerExecute( gg_trg_Intro_Time_Stop );
    udg_MedivhCanCircle = false;
    ResetUnitLookAt( udg_Thrall );
    SetUnitPositionLocFacingBJ( udg_Medivh, GetRectCenter(gg_rct_MedivhRunHereDepart), 45.00 );
    IssuePointOrderLocBJ( udg_Medivh, "move", GetRectCenter(gg_rct_EndCin_Medivh_Waits_Here) );
    SetUnitPositionLoc( udg_Thrall, GetRectCenter(gg_rct_Thrall02) );
    SetUnitFacingTimed( udg_Thrall, 45.00, 0 );
    SetUnitPathing( udg_Thrall, true );
    CommentString( "Fade in" );
    CinematicFadeBJ( bj_CINEFADETYPE_FADEIN, 0.50, "ReplaceableTextures\\CameraMasks\\White_mask.tga", 0, 0, 0, 0 );
    TriggerSleepAction( 0.50 );
    CommentString( "Gameplay" );
    ConditionalTriggerExecute( gg_trg_Gameplay );
    return true;
}
//===========================================================================
void InitTrig_Intro_Cinematic_Skip(){
    gg_trg_Intro_Cinematic_Skip = TriggerCreate( "Trig_Intro_Cinematic_Skip_Actions" );;
    DisableTrigger( gg_trg_Intro_Cinematic_Skip );
    TriggerRegisterPlayerEventEndCinematic( gg_trg_Intro_Cinematic_Skip, Player(0) );
}
//===========================================================================
// Trigger: The Prophet Flies Overhead
//===========================================================================
boolean Trig_The_Prophet_Flies_Overhead_Conditions(){
    if ( ! ( GetEnteringUnit() == udg_Medivh ) ) {
        return false;
    }
    return true;
}
boolean Trig_The_Prophet_Flies_Overhead_Func008001(){
    return ( udg_IntroSkipped == true );
}
boolean Trig_The_Prophet_Flies_Overhead_Func011001(){
    return ( udg_IntroSkipped == true );
}
bool Trig_The_Prophet_Flies_Overhead_Actions(bool testConds, bool runActions){
	if (testConds){
		if (!GAw3_Trig_The_Prophet_Flies_Overhead_Conditions()){
			return false;
		}
	}
	if (!runActions) {
		return true;
	}
    DisableTrigger( GetTriggeringTrigger() );
    CameraSetupApplyForPlayer( true, gg_cam_Intro04A, udg_APlayer01, 0 );
    CameraSetupApplyForPlayer( true, gg_cam_Intro04B, udg_APlayer01, 3.00 );
    SetUnitPositionLoc( udg_Medivh, GetRectCenter(gg_rct_MedivhStart03) );
    SetUnitFacingToFaceLocTimed( udg_Medivh, GetRectCenter(gg_rct_MedivhFlight06), 0 );
    IssuePointOrderLocBJ( udg_Medivh, "move", GetRectCenter(gg_rct_MedivhFlight02) );
    TriggerSleepAction( 1.00 );
    if ( Trig_The_Prophet_Flies_Overhead_Func008001() ) {
        return true;
    }else{
        DoNothing(  );
    }
    udg_MedivhCanCircle = true;
    TriggerSleepAction( 1.00 );
    if ( Trig_The_Prophet_Flies_Overhead_Func011001() ) {
        return true;
    }else{
        DoNothing(  );
    }
    CameraSetupApplyForPlayer( true, gg_cam_Intro05A, udg_APlayer01, 0.00 );
    ResetUnitLookAt( udg_Thrall );
    CameraSetupApplyForPlayer( true, gg_cam_Intro05B, udg_APlayer01, 20.00 );
    TriggerSleepAction( 1.00 );
    SetUnitFacingToFaceLocTimed( udg_Thrall, GetRectCenter(gg_rct_ThrallLookHere), 0.30 );
    TriggerSleepAction( 0.30 );
    SetUnitLookAt( udg_Thrall, "bone_head", udg_Medivh, 0, 0, 120.00 );
    return true;
}
//===========================================================================
void InitTrig_The_Prophet_Flies_Overhead(){
    gg_trg_The_Prophet_Flies_Overhead = TriggerCreate( "Trig_The_Prophet_Flies_Overhead_Actions" );;
    TriggerRegisterEnterRectSimple( gg_trg_The_Prophet_Flies_Overhead, gg_rct_MedivhStart02 );
    GAw3_Trig_The_Prophet_Flies_Overhead_Conditions = Trig_The_Prophet_Flies_Overhead_Conditions;
}
//===========================================================================
// Trigger: The Prophet Circles1
//===========================================================================
boolean Trig_The_Prophet_Circles1_Conditions(){
    if ( ! ( GetEnteringUnit() == udg_Medivh ) ) {
        return false;
    }
    if ( ! ( udg_MedivhCanCircle == true ) ) {
        return false;
    }
    return true;
}
bool Trig_The_Prophet_Circles1_Actions(bool testConds, bool runActions){
	if (testConds){
		if (!GAw3_Trig_The_Prophet_Circles1_Conditions()){
			return false;
		}
	}
	if (!runActions) {
		return true;
	}
    IssuePointOrderLocBJ( udg_Medivh, "move", GetRectCenter(gg_rct_MedivhFlight02) );
    return true;
}
//===========================================================================
void InitTrig_The_Prophet_Circles1(){
    gg_trg_The_Prophet_Circles1 = TriggerCreate( "Trig_The_Prophet_Circles1_Actions" );;
    TriggerRegisterEnterRectSimple( gg_trg_The_Prophet_Circles1, gg_rct_MedivhFlight01 );
    GAw3_Trig_The_Prophet_Circles1_Conditions = Trig_The_Prophet_Circles1_Conditions;
}
//===========================================================================
// Trigger: The Prophet Circles2
//===========================================================================
boolean Trig_The_Prophet_Circles2_Conditions(){
    if ( ! ( GetEnteringUnit() == udg_Medivh ) ) {
        return false;
    }
    if ( ! ( udg_MedivhCanCircle == true ) ) {
        return false;
    }
    return true;
}
bool Trig_The_Prophet_Circles2_Actions(bool testConds, bool runActions){
	if (testConds){
		if (!GAw3_Trig_The_Prophet_Circles2_Conditions()){
			return false;
		}
	}
	if (!runActions) {
		return true;
	}
    IssuePointOrderLocBJ( udg_Medivh, "move", GetRectCenter(gg_rct_MedivhFlight03) );
    return true;
}
//===========================================================================
void InitTrig_The_Prophet_Circles2(){
    gg_trg_The_Prophet_Circles2 = TriggerCreate( "Trig_The_Prophet_Circles2_Actions" );;
    TriggerRegisterEnterRectSimple( gg_trg_The_Prophet_Circles2, gg_rct_MedivhFlight02 );
    GAw3_Trig_The_Prophet_Circles2_Conditions = Trig_The_Prophet_Circles2_Conditions;
}
//===========================================================================
// Trigger: The Prophet Circles3
//===========================================================================
boolean Trig_The_Prophet_Circles3_Conditions(){
    if ( ! ( GetEnteringUnit() == udg_Medivh ) ) {
        return false;
    }
    if ( ! ( udg_MedivhCanCircle == true ) ) {
        return false;
    }
    return true;
}
bool Trig_The_Prophet_Circles3_Actions(bool testConds, bool runActions){
	if (testConds){
		if (!GAw3_Trig_The_Prophet_Circles3_Conditions()){
			return false;
		}
	}
	if (!runActions) {
		return true;
	}
    IssuePointOrderLocBJ( udg_Medivh, "move", GetRectCenter(gg_rct_MedivhFlight04) );
    return true;
}
//===========================================================================
void InitTrig_The_Prophet_Circles3(){
    gg_trg_The_Prophet_Circles3 = TriggerCreate( "Trig_The_Prophet_Circles3_Actions" );;
    TriggerRegisterEnterRectSimple( gg_trg_The_Prophet_Circles3, gg_rct_MedivhFlight03 );
    GAw3_Trig_The_Prophet_Circles3_Conditions = Trig_The_Prophet_Circles3_Conditions;
}
//===========================================================================
// Trigger: The Prophet Circles4
//===========================================================================
boolean Trig_The_Prophet_Circles4_Conditions(){
    if ( ! ( GetEnteringUnit() == udg_Medivh ) ) {
        return false;
    }
    if ( ! ( udg_MedivhCanCircle == true ) ) {
        return false;
    }
    return true;
}
bool Trig_The_Prophet_Circles4_Actions(bool testConds, bool runActions){
	if (testConds){
		if (!GAw3_Trig_The_Prophet_Circles4_Conditions()){
			return false;
		}
	}
	if (!runActions) {
		return true;
	}
    IssuePointOrderLocBJ( udg_Medivh, "move", GetRectCenter(gg_rct_MedivhFlight05) );
    return true;
}
//===========================================================================
void InitTrig_The_Prophet_Circles4(){
    gg_trg_The_Prophet_Circles4 = TriggerCreate( "Trig_The_Prophet_Circles4_Actions" );;
    TriggerRegisterEnterRectSimple( gg_trg_The_Prophet_Circles4, gg_rct_MedivhFlight04 );
    GAw3_Trig_The_Prophet_Circles4_Conditions = Trig_The_Prophet_Circles4_Conditions;
}
//===========================================================================
// Trigger: The Prophet Circles5
//===========================================================================
boolean Trig_The_Prophet_Circles5_Conditions(){
    if ( ! ( GetEnteringUnit() == udg_Medivh ) ) {
        return false;
    }
    if ( ! ( udg_MedivhCanCircle == true ) ) {
        return false;
    }
    return true;
}
bool Trig_The_Prophet_Circles5_Actions(bool testConds, bool runActions){
	if (testConds){
		if (!GAw3_Trig_The_Prophet_Circles5_Conditions()){
			return false;
		}
	}
	if (!runActions) {
		return true;
	}
    IssuePointOrderLocBJ( udg_Medivh, "move", GetRectCenter(gg_rct_MedivhFlight06) );
    return true;
}
//===========================================================================
void InitTrig_The_Prophet_Circles5(){
    gg_trg_The_Prophet_Circles5 = TriggerCreate( "Trig_The_Prophet_Circles5_Actions" );;
    TriggerRegisterEnterRectSimple( gg_trg_The_Prophet_Circles5, gg_rct_MedivhFlight05 );
    GAw3_Trig_The_Prophet_Circles5_Conditions = Trig_The_Prophet_Circles5_Conditions;
}
//===========================================================================
// Trigger: The Prophet Circles6
//===========================================================================
boolean Trig_The_Prophet_Circles6_Conditions(){
    if ( ! ( GetEnteringUnit() == udg_Medivh ) ) {
        return false;
    }
    if ( ! ( udg_MedivhCanCircle == true ) ) {
        return false;
    }
    return true;
}
bool Trig_The_Prophet_Circles6_Actions(bool testConds, bool runActions){
	if (testConds){
		if (!GAw3_Trig_The_Prophet_Circles6_Conditions()){
			return false;
		}
	}
	if (!runActions) {
		return true;
	}
    IssuePointOrderLocBJ( udg_Medivh, "move", GetRectCenter(gg_rct_MedivhFlight07) );
    return true;
}
//===========================================================================
void InitTrig_The_Prophet_Circles6(){
    gg_trg_The_Prophet_Circles6 = TriggerCreate( "Trig_The_Prophet_Circles6_Actions" );;
    TriggerRegisterEnterRectSimple( gg_trg_The_Prophet_Circles6, gg_rct_MedivhFlight06 );
    GAw3_Trig_The_Prophet_Circles6_Conditions = Trig_The_Prophet_Circles6_Conditions;
}
//===========================================================================
// Trigger: The Prophet Circles7
//===========================================================================
boolean Trig_The_Prophet_Circles7_Conditions(){
    if ( ! ( GetEnteringUnit() == udg_Medivh ) ) {
        return false;
    }
    if ( ! ( udg_MedivhCanCircle == true ) ) {
        return false;
    }
    return true;
}
bool Trig_The_Prophet_Circles7_Actions(bool testConds, bool runActions){
	if (testConds){
		if (!GAw3_Trig_The_Prophet_Circles7_Conditions()){
			return false;
		}
	}
	if (!runActions) {
		return true;
	}
    IssuePointOrderLocBJ( udg_Medivh, "move", GetRectCenter(gg_rct_MedivhFlight08) );
    return true;
}
//===========================================================================
void InitTrig_The_Prophet_Circles7(){
    gg_trg_The_Prophet_Circles7 = TriggerCreate( "Trig_The_Prophet_Circles7_Actions" );;
    TriggerRegisterEnterRectSimple( gg_trg_The_Prophet_Circles7, gg_rct_MedivhFlight07 );
    GAw3_Trig_The_Prophet_Circles7_Conditions = Trig_The_Prophet_Circles7_Conditions;
}
//===========================================================================
// Trigger: The Prophet Circles8
//===========================================================================
boolean Trig_The_Prophet_Circles8_Conditions(){
    if ( ! ( GetEnteringUnit() == udg_Medivh ) ) {
        return false;
    }
    if ( ! ( udg_MedivhCanCircle == true ) ) {
        return false;
    }
    return true;
}
bool Trig_The_Prophet_Circles8_Actions(bool testConds, bool runActions){
	if (testConds){
		if (!GAw3_Trig_The_Prophet_Circles8_Conditions()){
			return false;
		}
	}
	if (!runActions) {
		return true;
	}
    IssuePointOrderLocBJ( udg_Medivh, "move", GetRectCenter(gg_rct_MedivhFlight09) );
    return true;
}
//===========================================================================
void InitTrig_The_Prophet_Circles8(){
    gg_trg_The_Prophet_Circles8 = TriggerCreate( "Trig_The_Prophet_Circles8_Actions" );;
    TriggerRegisterEnterRectSimple( gg_trg_The_Prophet_Circles8, gg_rct_MedivhFlight08 );
    GAw3_Trig_The_Prophet_Circles8_Conditions = Trig_The_Prophet_Circles8_Conditions;
}
//===========================================================================
// Trigger: The Prophet Circles9
//===========================================================================
boolean Trig_The_Prophet_Circles9_Conditions(){
    if ( ! ( GetEnteringUnit() == udg_Medivh ) ) {
        return false;
    }
    if ( ! ( udg_MedivhCanCircle == true ) ) {
        return false;
    }
    return true;
}
bool Trig_The_Prophet_Circles9_Actions(bool testConds, bool runActions){
	if (testConds){
		if (!GAw3_Trig_The_Prophet_Circles9_Conditions()){
			return false;
		}
	}
	if (!runActions) {
		return true;
	}
    IssuePointOrderLocBJ( udg_Medivh, "move", GetRectCenter(gg_rct_MedivhFlight10) );
    return true;
}
//===========================================================================
void InitTrig_The_Prophet_Circles9(){
    gg_trg_The_Prophet_Circles9 = TriggerCreate( "Trig_The_Prophet_Circles9_Actions" );;
    TriggerRegisterEnterRectSimple( gg_trg_The_Prophet_Circles9, gg_rct_MedivhFlight09 );
    GAw3_Trig_The_Prophet_Circles9_Conditions = Trig_The_Prophet_Circles9_Conditions;
}
//===========================================================================
// Trigger: The Prophet Circles10
//===========================================================================
boolean Trig_The_Prophet_Circles10_Conditions(){
    if ( ! ( GetEnteringUnit() == udg_Medivh ) ) {
        return false;
    }
    if ( ! ( udg_MedivhCanCircle == true ) ) {
        return false;
    }
    return true;
}
bool Trig_The_Prophet_Circles10_Actions(bool testConds, bool runActions){
	if (testConds){
		if (!GAw3_Trig_The_Prophet_Circles10_Conditions()){
			return false;
		}
	}
	if (!runActions) {
		return true;
	}
    IssuePointOrderLocBJ( udg_Medivh, "move", GetRectCenter(gg_rct_MedivhFlight11) );
    return true;
}
//===========================================================================
void InitTrig_The_Prophet_Circles10(){
    gg_trg_The_Prophet_Circles10 = TriggerCreate( "Trig_The_Prophet_Circles10_Actions" );;
    TriggerRegisterEnterRectSimple( gg_trg_The_Prophet_Circles10, gg_rct_MedivhFlight10 );
    GAw3_Trig_The_Prophet_Circles10_Conditions = Trig_The_Prophet_Circles10_Conditions;
}
//===========================================================================
// Trigger: The Prophet Circles11
//===========================================================================
boolean Trig_The_Prophet_Circles11_Conditions(){
    if ( ! ( GetEnteringUnit() == udg_Medivh ) ) {
        return false;
    }
    if ( ! ( udg_MedivhCanCircle == true ) ) {
        return false;
    }
    return true;
}
bool Trig_The_Prophet_Circles11_Actions(bool testConds, bool runActions){
	if (testConds){
		if (!GAw3_Trig_The_Prophet_Circles11_Conditions()){
			return false;
		}
	}
	if (!runActions) {
		return true;
	}
    IssuePointOrderLocBJ( udg_Medivh, "move", GetRectCenter(gg_rct_MedivhFlight12) );
    return true;
}
//===========================================================================
void InitTrig_The_Prophet_Circles11(){
    gg_trg_The_Prophet_Circles11 = TriggerCreate( "Trig_The_Prophet_Circles11_Actions" );;
    TriggerRegisterEnterRectSimple( gg_trg_The_Prophet_Circles11, gg_rct_MedivhFlight11 );
    GAw3_Trig_The_Prophet_Circles11_Conditions = Trig_The_Prophet_Circles11_Conditions;
}
//===========================================================================
// Trigger: The Prophet Circles12
//===========================================================================
boolean Trig_The_Prophet_Circles12_Conditions(){
    if ( ! ( GetEnteringUnit() == udg_Medivh ) ) {
        return false;
    }
    if ( ! ( udg_MedivhCanCircle == true ) ) {
        return false;
    }
    return true;
}
bool Trig_The_Prophet_Circles12_Actions(bool testConds, bool runActions){
	if (testConds){
		if (!GAw3_Trig_The_Prophet_Circles12_Conditions()){
			return false;
		}
	}
	if (!runActions) {
		return true;
	}
    IssuePointOrderLocBJ( udg_Medivh, "move", GetRectCenter(gg_rct_MedivhFlight01) );
    return true;
}
//===========================================================================
void InitTrig_The_Prophet_Circles12(){
    gg_trg_The_Prophet_Circles12 = TriggerCreate( "Trig_The_Prophet_Circles12_Actions" );;
    TriggerRegisterEnterRectSimple( gg_trg_The_Prophet_Circles12, gg_rct_MedivhFlight12 );
    GAw3_Trig_The_Prophet_Circles12_Conditions = Trig_The_Prophet_Circles12_Conditions;
}
//===========================================================================
// Trigger: Medivh Reaches Home
//===========================================================================
boolean Trig_Medivh_Reaches_Home_Conditions(){
    if ( ! ( GetEnteringUnit() == udg_Medivh ) ) {
        return false;
    }
    return true;
}
bool Trig_Medivh_Reaches_Home_Actions(bool testConds, bool runActions){
	if (testConds){
		if (!GAw3_Trig_Medivh_Reaches_Home_Conditions()){
			return false;
		}
	}
	if (!runActions) {
		return true;
	}
    DisableTrigger( GetTriggeringTrigger() );
    TriggerSleepAction( 1.00 );
    SetUnitFacingTimed( udg_Medivh, 315.00, 0 );
    return true;
}
//===========================================================================
void InitTrig_Medivh_Reaches_Home(){
    gg_trg_Medivh_Reaches_Home = TriggerCreate( "Trig_Medivh_Reaches_Home_Actions" );;
    TriggerRegisterEnterRectSimple( gg_trg_Medivh_Reaches_Home, gg_rct_EndCin_Medivh_Waits_Here );
    GAw3_Trig_Medivh_Reaches_Home_Conditions = Trig_Medivh_Reaches_Home_Conditions;
}
//===========================================================================
// Trigger: Intro Time Stop
//===========================================================================
boolean Trig_Intro_Time_Stop_Conditions(){
    if ( ! ( IsTriggerEnabled(GetTriggeringTrigger()) == true ) ) {
        return false;
    }
    return true;
}
bool Trig_Intro_Time_Stop_Actions(bool testConds, bool runActions){
	if (testConds){
		if (!GAw3_Trig_Intro_Time_Stop_Conditions()){
			return false;
		}
	}
	if (!runActions) {
		return true;
	}
    DisableTrigger( GetTriggeringTrigger() );
    SetTimeOfDayScalePercentBJ( 100.00 );
    SetTimeOfDay( 6.50 );
    udg_SlowDayAllowed = true;
    EnableDawnDusk( true );
    return true;
}
//===========================================================================
void InitTrig_Intro_Time_Stop(){
    gg_trg_Intro_Time_Stop = TriggerCreate( "Trig_Intro_Time_Stop_Actions" );;
    DisableTrigger( gg_trg_Intro_Time_Stop );
    TriggerRegisterGameStateEventTimeOfDay( gg_trg_Intro_Time_Stop, GREATER_THAN_OR_EQUAL, 6.50 );
    GAw3_Trig_Intro_Time_Stop_Conditions = Trig_Intro_Time_Stop_Conditions;
}
//===========================================================================
// Trigger: Gameplay
//===========================================================================
bool Trig_Gameplay_Actions(bool testConds, bool runActions){
	if (testConds){
		if (!GAw3_Trig_Gameplay_Conditions()){
			return false;
		}
	}
	if (!runActions) {
		return true;
	}
    QueuedTriggerAddBJ( gg_trg_Waste_Queue_Time, true );
    QueuedTriggerAddBJ( gg_trg_Prophet_Discover_Q, true );
    QueuedTriggerAddBJ( gg_trg_S1_SelectThrall_Q, true );
    return true;
}
//===========================================================================
void InitTrig_Gameplay(){
    gg_trg_Gameplay = TriggerCreate( "Trig_Gameplay_Actions" );;
}
//===========================================================================
// Trigger: Waste Queue Time
//
// The sole purpose of this trigger is to hold up the trigger queue for a few moments at the start of the mission.
// This prevents other triggers from filling the queue and executing, giving the user a moment to settle in and relax.
//===========================================================================
bool Trig_Waste_Queue_Time_Actions(bool testConds, bool runActions){
	if (testConds){
		if (!GAw3_Trig_Waste_Queue_Time_Conditions()){
			return false;
		}
	}
	if (!runActions) {
		return true;
	}
    TriggerSleepAction( 1.50 );
    QueuedTriggerRemoveBJ( GetTriggeringTrigger() );
    return true;
}
//===========================================================================
void InitTrig_Waste_Queue_Time(){
    gg_trg_Waste_Queue_Time = TriggerCreate( "Trig_Waste_Queue_Time_Actions" );;
}

//--------------------------------------------------------------------------------------------------
// Custom Script: End Cinematic
//--------------------------------------------------------------------------------------------------
//===========================================================================
// Trigger: End Cinematic
//===========================================================================
void Trig_End_Cinematic_Func018002() {
    ShowUnitHide( GetEnumUnit() );
}
boolean Trig_End_Cinematic_Func028001(){
    return ( udg_EndSkipped == true );
}
boolean Trig_End_Cinematic_Func037001(){
    return ( udg_EndSkipped == true );
}
boolean Trig_End_Cinematic_Func041001(){
    return ( udg_EndSkipped == true );
}
boolean Trig_End_Cinematic_Func046001(){
    return ( udg_EndSkipped == true );
}
boolean Trig_End_Cinematic_Func053001(){
    return ( udg_EndSkipped == true );
}
boolean Trig_End_Cinematic_Func057001(){
    return ( udg_EndSkipped == true );
}
boolean Trig_End_Cinematic_Func060001(){
    return ( udg_EndSkipped == true );
}
boolean Trig_End_Cinematic_Func064001(){
    return ( udg_EndSkipped == true );
}
boolean Trig_End_Cinematic_Func071001(){
    return ( udg_EndSkipped == true );
}
boolean Trig_End_Cinematic_Func078001(){
    return ( udg_EndSkipped == true );
}
boolean Trig_End_Cinematic_Func084001(){
    return ( udg_EndSkipped == true );
}
boolean Trig_End_Cinematic_Func088001(){
    return ( udg_EndSkipped == true );
}
boolean Trig_End_Cinematic_Func095001(){
    return ( udg_EndSkipped == true );
}
boolean Trig_End_Cinematic_Func101001(){
    return ( udg_EndSkipped == true );
}
boolean Trig_End_Cinematic_Func106001(){
    return ( udg_EndSkipped == true );
}
boolean Trig_End_Cinematic_Func110001(){
    return ( udg_EndSkipped == true );
}
boolean Trig_End_Cinematic_Func113001(){
    return ( udg_EndSkipped == true );
}
boolean Trig_End_Cinematic_Func120001(){
    return ( udg_EndSkipped == true );
}
boolean Trig_End_Cinematic_Func126001(){
    return ( udg_EndSkipped == true );
}
boolean Trig_End_Cinematic_Func129001(){
    return ( udg_EndSkipped == true );
}
boolean Trig_End_Cinematic_Func132001(){
    return ( udg_EndSkipped == true );
}
boolean Trig_End_Cinematic_Func151001(){
    return ( udg_EndSkipped == true );
}
bool Trig_End_Cinematic_Actions(bool testConds, bool runActions){
	if (testConds){
		if (!GAw3_Trig_End_Cinematic_Conditions()){
			return false;
		}
	}
	if (!runActions) {
		return true;
	}
    ConditionalTriggerExecute( gg_trg_Next_Level_Prep );
    CommentString( "Make sure Thrall survives" );
    SetUnitInvulnerable( udg_Thrall, true );
    UnitRemoveBuffsBJ( bj_REMOVEBUFFS_ALL, udg_Thrall );
    CommentString( "Fade out" );
    CinematicFadeBJ( bj_CINEFADETYPE_FADEOUT, 2.00, "ReplaceableTextures\\CameraMasks\\White_mask.tga", 0, 0, 0, 0 );
    TriggerSleepAction( 2.00 );
    CinematicModeBJ( true, GetPlayersAll() );
    TriggerSleepAction( 0.10 );
    CommentString( "Prep" );
    PlayThematicMusicBJ( "Sound\\Music\\mp3Music\\SadMystery.mp3" );
    SetTimeOfDay( 24.00 );
    UseTimeOfDayBJ( false );
    //SetSkyModel( "Environment\\Sky\\FelwoodSky\\FelwoodSky.mdl" );
    //AddWeatherEffectSaveLast( gg_rct_Ending_Rain, 'RLlr' );
    //EnableWeatherEffect( GetLastCreatedWeatherEffect(), true );
    ClearSelection(  );
    ForGroup( GetUnitsOfPlayerAndTypeId(udg_APlayer01, 'ogru'), Trig_End_Cinematic_Func018002 );
    SetUnitPositionLoc( udg_Medivh, GetRectCenter(gg_rct_EndCin_Medivh) );
    SetUnitPositionLoc( udg_Thrall, GetRectCenter(gg_rct_EndCinThrall) );
    IssueImmediateOrderBJ( udg_Medivh, "unravenform" );
    IssueImmediateOrderBJ( udg_Thrall, "stop" );
    SetUnitFacingToFaceUnitTimed( udg_Thrall, udg_Medivh, 0 );
    SetUnitFacingToFaceUnitTimed( udg_Medivh, udg_Thrall, 0 );
    CommentString( "NOW SKIPPABLE" );
    EnableTrigger( gg_trg_End_Cinematic_Skip );
    TriggerSleepAction( 0.10 );
    if ( Trig_End_Cinematic_Func028001() ){
   return true;
   }else{
   DoNothing(  );
    }
    CameraSetupApplyForPlayer( true, gg_cam_Medivh_Transform, udg_APlayer01, 0 );
    VolumeGroupResetBJ(  );
    VolumeGroupSetVolumeBJ( SOUND_VOLUMEGROUP_MUSIC, 55.00 );
    AttachSoundToUnitBJ( gg_snd_DruidOfTheTalonMorph1, udg_Medivh );
    PlaySoundBJ( gg_snd_DruidOfTheTalonMorph1 );
    CommentString( "Fade in" );
    CinematicFadeBJ( bj_CINEFADETYPE_FADEIN, 1.00, "ReplaceableTextures\\CameraMasks\\White_mask.tga", 0, 0, 0, 0 );
    TriggerSleepAction( 1.00 );
    if ( Trig_End_Cinematic_Func037001() ){
   return true;
   }else{
   DoNothing(  );
    }
    CommentString( "Line" );
    TransmissionFromUnitWithNameBJ( GetPlayersAll(), udg_Medivh, "TRIGSTR_219", gg_snd_T01Medivh59, "TRIGSTR_220", bj_TIMETYPE_ADD, 0, false );
    WaitForSoundBJ( gg_snd_T01Medivh59, 0 );
    if ( Trig_End_Cinematic_Func041001() ){
   return true;
   }else{
   DoNothing(  );
    }
    CameraSetupApplyForPlayer( true, gg_cam_EndCin1, udg_APlayer01, 0 );
    CommentString( "Line" );
    TransmissionFromUnitWithNameBJ( GetPlayersAll(), udg_Thrall, "TRIGSTR_221", gg_snd_T01Thrall60, "TRIGSTR_222", bj_TIMETYPE_ADD, 0, false );
    WaitForSoundBJ( gg_snd_T01Thrall60, 0 );
    if ( Trig_End_Cinematic_Func046001() ){
   return true;
   }else{
   DoNothing(  );
    }
    SetDoodadAnimationRectBJ( "stand", 'YOlb', gg_rct_Lightning2 );
    SetSoundVolumeBJ( gg_snd_LightningBolt, 30.00 );
    PlaySoundBJ( gg_snd_LightningBolt );
    SetSoundVolumeBJ( gg_snd_RollingThunder1, 60.00 );
    PlaySoundBJ( gg_snd_RollingThunder1 );
    TriggerSleepAction( 0.25 );
    if ( Trig_End_Cinematic_Func053001() ){
   return true;
   }else{
   DoNothing(  );
    }
    SetDoodadAnimationRectBJ( "stand", 'YOlb', gg_rct_Lightning4 );
    TransmissionFromUnitWithNameBJ( GetPlayersAll(), udg_Medivh, "TRIGSTR_223", gg_snd_T01Medivh61, "TRIGSTR_224", bj_TIMETYPE_ADD, 0, false );
    TriggerSleepAction( 7.45 );
    if ( Trig_End_Cinematic_Func057001() ){
   return true;
   }else{
   DoNothing(  );
    }
    CameraSetupApplyForPlayer( true, gg_cam_EndCin2, udg_APlayer01, 0 );
    WaitForSoundBJ( gg_snd_T01Medivh61, 0 );
    if ( Trig_End_Cinematic_Func060001() ){
   return true;
   }else{
   DoNothing(  );
    }
    CommentString( "Line" );
    TransmissionFromUnitWithNameBJ( GetPlayersAll(), udg_Thrall, "TRIGSTR_225", gg_snd_T01Thrall62, "TRIGSTR_226", bj_TIMETYPE_ADD, 0, false );
    WaitForSoundBJ( gg_snd_T01Thrall62, 0 );
    if ( Trig_End_Cinematic_Func064001() ){
   return true;
   }else{
   DoNothing(  );
    }
    ResetUnitLookAt( udg_Medivh );
    IssuePointOrderLocBJ( udg_Medivh, "move", GetRectCenter(gg_rct_Medivh_Move_to) );
    SetUnitFacingToFaceLocTimed( udg_Medivh, GetRectCenter(gg_rct_Medivh_Look_At), 0 );
    CameraSetupApplyForPlayer( true, gg_cam_Medivh_Human_Line, udg_APlayer01, 0 );
    SetDoodadAnimationRectBJ( "stand", 'YOlb', gg_rct_Lightning2 );
    TriggerSleepAction( 0.20 );
    if ( Trig_End_Cinematic_Func071001() ){
   return true;
   }else{
   DoNothing(  );
    }
    CommentString( "Line" );
    TransmissionFromUnitWithNameBJ( GetPlayersAll(), udg_Medivh, "TRIGSTR_227", gg_snd_T01Medivh63, "TRIGSTR_228", bj_TIMETYPE_ADD, 0, false );
    SetDoodadAnimationRectBJ( "stand", 'YOlb', gg_rct_Lightning2 );
    SetSoundVolumeBJ( gg_snd_RollingThunder1, 50.00 );
    PlaySoundBJ( gg_snd_RollingThunder1 );
    WaitForSoundBJ( gg_snd_T01Medivh63, 0 );
    if ( Trig_End_Cinematic_Func078001() ){
   return true;
   }else{
   DoNothing(  );
    }
    SetDoodadAnimationRectBJ( "stand", 'YOlb', gg_rct_Lightning3 );
    IssuePointOrderLocBJ( udg_Thrall, "move", GetRectCenter(gg_rct_Thrall_Move_to) );
    SetSoundVolumeBJ( gg_snd_RollingThunder1, 50.00 );
    PlaySoundBJ( gg_snd_RollingThunder1 );
    TriggerSleepAction( 1.00 );
    if ( Trig_End_Cinematic_Func084001() ){
   return true;
   }else{
   DoNothing(  );
    }
    CommentString( "Line" );
    TransmissionFromUnitWithNameBJ( GetPlayersAll(), udg_Thrall, "TRIGSTR_229", gg_snd_T01Thrall64, "TRIGSTR_230", bj_TIMETYPE_ADD, 0, false );
    WaitForSoundBJ( gg_snd_T01Thrall64, 0 );
    if ( Trig_End_Cinematic_Func088001() ){
   return true;
   }else{
   DoNothing(  );
    }
    SetDoodadAnimationRectBJ( "stand", 'YOlb', gg_rct_Lightning1 );
    SetSoundVolumeBJ( gg_snd_LightningBolt, 30.00 );
    PlaySoundBJ( gg_snd_LightningBolt );
    SetSoundVolumeBJ( gg_snd_RollingThunder1, 60.00 );
    PlaySoundBJ( gg_snd_RollingThunder1 );
    TriggerSleepAction( 0.20 );
    if ( Trig_End_Cinematic_Func095001() ){
   return true;
   }else{
   DoNothing(  );
    }
    SetDoodadAnimationRectBJ( "stand", 'YOlb', gg_rct_Lightning1 );
    CameraSetupApplyForPlayer( true, gg_cam_Medivh_Human_02, udg_APlayer01, 6.50 );
    CommentString( "Line" );
    TransmissionFromUnitWithNameBJ( GetPlayersAll(), udg_Medivh, "TRIGSTR_231", gg_snd_T01Medivh65, "TRIGSTR_232", bj_TIMETYPE_ADD, 0, false );
    WaitForSoundBJ( gg_snd_T01Medivh65, 0 );
    if ( Trig_End_Cinematic_Func101001() ){
   return true;
   }else{
   DoNothing(  );
    }
    SetUnitLookAt( udg_Thrall, "bone_head", udg_Medivh, 0, 0, 90 );
    CommentString( "Line" );
    TransmissionFromUnitWithNameBJ( GetPlayersAll(), udg_Thrall, "TRIGSTR_233", gg_snd_T01Thrall66, "TRIGSTR_234", bj_TIMETYPE_ADD, 0, false );
    WaitForSoundBJ( gg_snd_T01Thrall66, 0.50 );
    if ( Trig_End_Cinematic_Func106001() ){
   return true;
   }else{
   DoNothing(  );
    }
    CommentString( "Line" );
    TransmissionFromUnitWithNameBJ( GetPlayersAll(), udg_Medivh, "TRIGSTR_235", gg_snd_T01Medivh67, "TRIGSTR_236", bj_TIMETYPE_ADD, 0, false );
    TriggerSleepAction( 3.00 );
    if ( Trig_End_Cinematic_Func110001() ){
   return true;
   }else{
   DoNothing(  );
    }
    SetUnitFacingToFaceUnitTimed( udg_Medivh, udg_Thrall, 0.30 );
    WaitForSoundBJ( gg_snd_T01Medivh67, 0 );
    if ( Trig_End_Cinematic_Func113001() ){
   return true;
   }else{
   DoNothing(  );
    }
    SetDoodadAnimationRectBJ( "stand", 'YOlb', gg_rct_Lightning2 );
    SetSoundVolumeBJ( gg_snd_LightningBolt, 30.00 );
    PlaySoundBJ( gg_snd_LightningBolt );
    SetSoundVolumeBJ( gg_snd_RollingThunder1, 60.00 );
    PlaySoundBJ( gg_snd_RollingThunder1 );
    TriggerSleepAction( 0.25 );
    if ( Trig_End_Cinematic_Func120001() ){
   return true;
   }else{
   DoNothing(  );
    }
    SetDoodadAnimationRectBJ( "stand", 'YOlb', gg_rct_Lightning2 );
    IssueImmediateOrderBJ( udg_Medivh, "ravenform" );
    AttachSoundToUnitBJ( gg_snd_DruidOfTheTalonMorph1, udg_Medivh );
    PlaySoundBJ( gg_snd_DruidOfTheTalonMorph1 );
    TriggerSleepAction( 0.50 );
    if ( Trig_End_Cinematic_Func126001() ){
   return true;
   }else{
   DoNothing(  );
    }
    IssuePointOrderLocBJ( udg_Medivh, "move", GetRectCenter(gg_rct_Medivh_Look_At) );
    TriggerSleepAction( 1.75 );
    if ( Trig_End_Cinematic_Func129001() ){
   return true;
   }else{
   DoNothing(  );
    }
    SetDoodadAnimationRectBJ( "stand", 'YOlb', gg_rct_Lightning4 );
    TriggerSleepAction( 0.25 );
    if ( Trig_End_Cinematic_Func132001() ){
   return true;
   }else{
   DoNothing(  );
    }
    SetDoodadAnimationRectBJ( "stand", 'YOlb', gg_rct_Lightning4 );
    SetSoundVolumeBJ( gg_snd_RollingThunder1, 50.00 );
    PlaySoundBJ( gg_snd_RollingThunder1 );
    CameraSetupApplyForPlayer( true, gg_cam_End_Alternate, udg_APlayer01, 0.00 );
    CommentString( "Line" );
    TransmissionFromUnitWithNameBJ( GetPlayersAll(), udg_Thrall, "TRIGSTR_237", gg_snd_T01Thrall68, "TRIGSTR_238", bj_TIMETYPE_ADD, 0, false );
    SetSoundVolumeBJ( gg_snd_RollingThunder1, 50.00 );
    PlaySoundBJ( gg_snd_RollingThunder1 );
    SetStackedSoundBJ( false, gg_snd_WaterLakeLoop1, gg_rct_LakeLoop01 );
    SetStackedSoundBJ( false, gg_snd_WaterLakeLoop1, gg_rct_LakeLoop02 );
    SetStackedSoundBJ( false, gg_snd_WaterLakeLoop1, gg_rct_LakeLoop03 );
    SetStackedSoundBJ( false, gg_snd_WaterLakeLoop1, gg_rct_LakeLoop04 );
    SetStackedSoundBJ( false, gg_snd_WaterLakeLoop1, gg_rct_LakeLoop05 );
    SetStackedSoundBJ( false, gg_snd_WaterLakeLoop1, gg_rct_LakeLoop06 );
    SetStackedSoundBJ( false, gg_snd_WaterLakeLoop1, gg_rct_LakeLoop07 );
    SetStackedSoundBJ( false, gg_snd_WaterLakeLoop1, gg_rct_LakeLoop08 );
    WaitForSoundBJ( gg_snd_T01Thrall68, 0.00 );
    TriggerSleepAction( 1.00 );
    if ( Trig_End_Cinematic_Func151001() ){
   return true;
   }else{
   DoNothing(  );
    }
    CommentString( "THIS IS NO LONGER CANCELLABLE, TAKE IT MOKEY" );
    DisableTrigger( gg_trg_End_Cinematic_Skip );
    CinematicFadeBJ( bj_CINEFADETYPE_FADEOUT, 2.00, "ReplaceableTextures\\CameraMasks\\White_mask.tga", 0, 0, 0, 0 );
    TriggerSleepAction( 2 );
    ConditionalTriggerExecute( gg_trg_Next_Level_Run );
	return true;
}
//===========================================================================
void InitTrig_End_Cinematic (){
    gg_trg_End_Cinematic = TriggerCreate( "Trig_End_Cinematic_Actions" );
}
//===========================================================================
// Trigger: End Cinematic Skip
//===========================================================================
bool Trig_End_Cinematic_Skip_Actions(bool testConds, bool runActions){
	if (testConds){
		if (!GAw3_Trig_End_Cinematic_Skip_Conditions()){
			return false;
		}
	}
	if (!runActions) {
		return true;
	}
    DisableTrigger( GetTriggeringTrigger() );
    udg_EndSkipped = true;
    CinematicFadeBJ( bj_CINEFADETYPE_FADEOUT, 2.00, "ReplaceableTextures\\CameraMasks\\White_mask.tga", 0, 0, 0, 0 );
    TriggerSleepAction( 2 );
    ConditionalTriggerExecute( gg_trg_Next_Level_Run );
    return true;
}
//===========================================================================
void InitTrig_End_Cinematic_Skip(){
    gg_trg_End_Cinematic_Skip = TriggerCreate( "Trig_End_Cinematic_Skip_Actions" );;
    DisableTrigger( gg_trg_End_Cinematic_Skip );
    TriggerRegisterPlayerEventEndCinematic( gg_trg_End_Cinematic_Skip, Player(0) );
}

//--------------------------------------------------------------------------------------------------
// Custom Script: Level Data
//--------------------------------------------------------------------------------------------------
//===========================================================================
// Trigger: Next Level Prep
//===========================================================================
bool Trig_Next_Level_Prep_Actions(bool testConds, bool runActions){
	if (testConds){
		if (!GAw3_Trig_Next_Level_Prep_Conditions()){
			return false;
		}
	}
	if (!runActions) {
		return true;
	}
    CommentString( "Enable missions" );
    SetMissionAvailableBJ( true, bj_MISSION_INDEX_T01 );
    CommentString( "Save heroes" );
    InitGameCacheBJ( "Campaigns.w3v" );
    StoreUnitBJ( udg_Thrall, "Thrall", "Tutorial02", GetLastCreatedGameCacheBJ() );
    SaveGameCacheBJ( GetLastCreatedGameCacheBJ() );
    return true;
}
//===========================================================================
void InitTrig_Next_Level_Prep(){
    gg_trg_Next_Level_Prep = TriggerCreate( "Trig_Next_Level_Prep_Actions" );;
}
//===========================================================================
// Trigger: Next Level Run
//===========================================================================
bool Trig_Next_Level_Run_Actions(bool testConds, bool runActions){
	if (testConds){
		if (!GAw3_Trig_Next_Level_Run_Conditions()){
			return false;
		}
	}
	if (!runActions) {
		return true;
	}
    SetNextLevelBJ( "Maps\\Campaign\\Prologue02.w3m" );
    GameOver(1, c_gameOverVictory, false, false);
    CustomVictoryBJ( udg_APlayer01, true, true );
    return true;
}
//===========================================================================
void InitTrig_Next_Level_Run(){
    gg_trg_Next_Level_Run = TriggerCreate( "Trig_Next_Level_Run_Actions" );;
}
//===========================================================================
// Trigger: Victory Cheat
//===========================================================================
boolean Trig_Victory_Cheat_Conditions(){
    if ( ! ( udg_GameOver == false ) ) {
        return false;
    }
    return true;
}
bool Trig_Victory_Cheat_Actions(bool testConds, bool runActions){
	if (testConds){
		if (!GAw3_Trig_Victory_Cheat_Conditions()){
			return false;
		}
	}
	if (!runActions) {
		return true;
	}
    udg_GameOver = true;
    ConditionalTriggerExecute( gg_trg_Next_Level_Prep );
    ConditionalTriggerExecute( gg_trg_Next_Level_Run );
    return true;
}
//===========================================================================
void InitTrig_Victory_Cheat(){
    gg_trg_Victory_Cheat = TriggerCreate( "Trig_Victory_Cheat_Actions" );;
    TriggerRegisterPlayerEventVictory( gg_trg_Victory_Cheat, Player(0) );
    GAw3_Trig_Victory_Cheat_Conditions = Trig_Victory_Cheat_Conditions;
}
//===========================================================================
// Trigger: Defeat Cheat
//===========================================================================
boolean Trig_Defeat_Cheat_Conditions(){
    if ( ! ( udg_GameOver == false ) ) {
        return false;
    }
    return true;
}
bool Trig_Defeat_Cheat_Actions(bool testConds, bool runActions){
	if (testConds){
		if (!GAw3_Trig_Defeat_Cheat_Conditions()){
			return false;
		}
	}
	if (!runActions) {
		return true;
	}
    udg_GameOver = true;
    CustomDefeatBJ( udg_APlayer01, "TRIGSTR_212" );
    return true;
}
//===========================================================================
void InitTrig_Defeat_Cheat(){
    gg_trg_Defeat_Cheat = TriggerCreate( "Trig_Defeat_Cheat_Actions" );;
    TriggerRegisterPlayerEventDefeat( gg_trg_Defeat_Cheat, Player(0) );
    GAw3_Trig_Defeat_Cheat_Conditions = Trig_Defeat_Cheat_Conditions;
}

//--------------------------------------------------------------------------------------------------
// Custom Script: Victory
//--------------------------------------------------------------------------------------------------
//===========================================================================
// Trigger: Victory Found Medivh
//===========================================================================
boolean Trig_Victory_Found_Medivh_Conditions(){
    if ( ! ( GetOwningPlayer(GetEnteringUnit()) == udg_APlayer01 ) ) {
        return false;
    }
    if ( ! ( udg_GameOver == false ) ) {
        return false;
    }
    return true;
}
bool Trig_Victory_Found_Medivh_Actions(bool testConds, bool runActions){
	if (testConds){
		if (!GAw3_Trig_Victory_Found_Medivh_Conditions()){
			return false;
		}
	}
	if (!runActions) {
		return true;
	}
    DisableTrigger( GetTriggeringTrigger() );
    udg_GameOver = true;
    CommentString( "Make sure Thrall survives" );
    SetUnitInvulnerable( udg_Thrall, true );
    UnitRemoveBuffsBJ( bj_REMOVEBUFFS_ALL, udg_Thrall );
    CommentString( "Get rid of the last banner" );
    PlaySoundBJ( udg_GoodJobSound );
    FogModifierStop( udg_VisibilityVictory );
    SetDoodadAnimationRectBJ( "death", 'LOo2', gg_rct_SpotVictory );
    SetUnitColor( udg_CircleVictory, GetPlayerColor(Player(PLAYER_NEUTRAL_PASSIVE)) );
    TriggerSleepAction( 2 );
    QueuedTriggerAddBJ( gg_trg_Prophet_Complete_Q, true );
    QueuedTriggerAddBJ( gg_trg_End_Cinematic, true );
    return true;
}
//===========================================================================
void InitTrig_Victory_Found_Medivh(){
    gg_trg_Victory_Found_Medivh = TriggerCreate( "Trig_Victory_Found_Medivh_Actions" );;
    TriggerRegisterEnterRectSimple( gg_trg_Victory_Found_Medivh, gg_rct_SpotVictory );
    TriggerRegisterEnterRectSimple( gg_trg_Victory_Found_Medivh, gg_rct_SpotBypassVictoryA );
    TriggerRegisterEnterRectSimple( gg_trg_Victory_Found_Medivh, gg_rct_SpotBypassVictoryB );
    TriggerRegisterEnterRectSimple( gg_trg_Victory_Found_Medivh, gg_rct_SpotBypassVictoryC );
    GAw3_Trig_Victory_Found_Medivh_Conditions = Trig_Victory_Found_Medivh_Conditions;
}

//--------------------------------------------------------------------------------------------------
// Custom Script: Defeat
//--------------------------------------------------------------------------------------------------
//===========================================================================
// Trigger: Defeat Thrall Dies
//===========================================================================
boolean Trig_Defeat_Thrall_Dies_Conditions(){
    if ( ! ( GetDyingUnit() == udg_Thrall ) ) {
        return false;
    }
    if ( ! ( udg_GameOver == false ) ) {
        return false;
    }
    return true;
}
bool Trig_Defeat_Thrall_Dies_Actions(bool testConds, bool runActions){
	if (testConds){
		if (!GAw3_Trig_Defeat_Thrall_Dies_Conditions()){
			return false;
		}
	}
	if (!runActions) {
		return true;
	}
    DisableTrigger( GetTriggeringTrigger() );
    udg_GameOver = true;
    ConditionalTriggerExecute( gg_trg_MissionFailed_ThrallDead );
    TriggerSleepAction( 2 );
    CustomDefeatBJ( udg_APlayer01, "TRIGSTR_381" );
    return true;
}
//===========================================================================
void InitTrig_Defeat_Thrall_Dies(){
    gg_trg_Defeat_Thrall_Dies = TriggerCreate( "Trig_Defeat_Thrall_Dies_Actions" );;
    TriggerRegisterPlayerUnitEventSimple( gg_trg_Defeat_Thrall_Dies, Player(0), EVENT_PLAYER_UNIT_DEATH );
    GAw3_Trig_Defeat_Thrall_Dies_Conditions = Trig_Defeat_Thrall_Dies_Conditions;
}

//--------------------------------------------------------------------------------------------------
// Custom Script: Hints
//--------------------------------------------------------------------------------------------------
//===========================================================================
// Trigger: Hint RightClickMove
//===========================================================================
bool Trig_Hint_RightClickMove_Actions(bool testConds, bool runActions){
	if (testConds){
		if (!GAw3_Trig_Hint_RightClickMove_Conditions()){
			return false;
		}
	}
	if (!runActions) {
		return true;
	}
    QuestMessageBJ( GetPlayersAll(), bj_QUESTMESSAGE_ALWAYSHINT, "TRIGSTR_281" );
    return true;
}
//===========================================================================
void InitTrig_Hint_RightClickMove(){
    gg_trg_Hint_RightClickMove = TriggerCreate( "Trig_Hint_RightClickMove_Actions" );;
}
//===========================================================================
// Trigger: Hint Scrolling
//===========================================================================
bool Trig_Hint_Scrolling_Actions(bool testConds, bool runActions){
	if (testConds){
		if (!GAw3_Trig_Hint_Scrolling_Conditions()){
			return false;
		}
	}
	if (!runActions) {
		return true;
	}
    QuestMessageBJ( GetPlayersAll(), bj_QUESTMESSAGE_ALWAYSHINT, "TRIGSTR_282" );
    return true;
}
//===========================================================================
void InitTrig_Hint_Scrolling(){
    gg_trg_Hint_Scrolling = TriggerCreate( "Trig_Hint_Scrolling_Actions" );;
}
//===========================================================================
// Trigger: Hint ArrowKeys
//===========================================================================
bool Trig_Hint_ArrowKeys_Actions(bool testConds, bool runActions){
	if (testConds){
		if (!GAw3_Trig_Hint_ArrowKeys_Conditions()){
			return false;
		}
	}
	if (!runActions) {
		return true;
	}
    QuestMessageBJ( GetPlayersAll(), bj_QUESTMESSAGE_ALWAYSHINT, "TRIGSTR_459" );
    return true;
}
//===========================================================================
void InitTrig_Hint_ArrowKeys(){
    gg_trg_Hint_ArrowKeys = TriggerCreate( "Trig_Hint_ArrowKeys_Actions" );;
}
//===========================================================================
// Trigger: Hint MessageLog
//===========================================================================
bool Trig_Hint_MessageLog_Actions(bool testConds, bool runActions){
	if (testConds){
		if (!GAw3_Trig_Hint_MessageLog_Conditions()){
			return false;
		}
	}
	if (!runActions) {
		return true;
	}
    QuestMessageBJ( GetPlayersAll(), bj_QUESTMESSAGE_ALWAYSHINT, "TRIGSTR_460" );
    return true;
}
//===========================================================================
void InitTrig_Hint_MessageLog(){
    gg_trg_Hint_MessageLog = TriggerCreate( "Trig_Hint_MessageLog_Actions" );;
}
//===========================================================================
// Trigger: Hint ClickDragSelect
//===========================================================================
bool Trig_Hint_ClickDragSelect_Actions(bool testConds, bool runActions){
	if (testConds){
		if (!GAw3_Trig_Hint_ClickDragSelect_Conditions()){
			return false;
		}
	}
	if (!runActions) {
		return true;
	}
    QuestMessageBJ( GetPlayersAll(), bj_QUESTMESSAGE_ALWAYSHINT, "TRIGSTR_300" );
    return true;
}
//===========================================================================
void InitTrig_Hint_ClickDragSelect(){
    gg_trg_Hint_ClickDragSelect = TriggerCreate( "Trig_Hint_ClickDragSelect_Actions" );;
}
//===========================================================================
// Trigger: Hint RightClickAttack
//===========================================================================
bool Trig_Hint_RightClickAttack_Actions(bool testConds, bool runActions){
	if (testConds){
		if (!GAw3_Trig_Hint_RightClickAttack_Conditions()){
			return false;
		}
	}
	if (!runActions) {
		return true;
	}
    QuestMessageBJ( GetPlayersAll(), bj_QUESTMESSAGE_ALWAYSHINT, "TRIGSTR_311" );
    return true;
}
//===========================================================================
void InitTrig_Hint_RightClickAttack(){
    gg_trg_Hint_RightClickAttack = TriggerCreate( "Trig_Hint_RightClickAttack_Actions" );;
}
//===========================================================================
// Trigger: Hint AttackMove
//===========================================================================
bool Trig_Hint_AttackMove_Actions(bool testConds, bool runActions){
	if (testConds){
		if (!GAw3_Trig_Hint_AttackMove_Conditions()){
			return false;
		}
	}
	if (!runActions) {
		return true;
	}
    QuestMessageBJ( GetPlayersAll(), bj_QUESTMESSAGE_ALWAYSHINT, "TRIGSTR_320" );
    return true;
}
//===========================================================================
void InitTrig_Hint_AttackMove(){
    gg_trg_Hint_AttackMove = TriggerCreate( "Trig_Hint_AttackMove_Actions" );;
}
//===========================================================================
// Trigger: Hint AutoAttack
//===========================================================================
bool Trig_Hint_AutoAttack_Actions(bool testConds, bool runActions){
	if (testConds){
		if (!GAw3_Trig_Hint_AutoAttack_Conditions()){
			return false;
		}
	}
	if (!runActions) {
		return true;
	}
    QuestMessageBJ( GetPlayersAll(), bj_QUESTMESSAGE_ALWAYSHINT, "TRIGSTR_336" );
    return true;
}
//===========================================================================
void InitTrig_Hint_AutoAttack(){
    gg_trg_Hint_AutoAttack = TriggerCreate( "Trig_Hint_AutoAttack_Actions" );;
}
//===========================================================================
// Trigger: Hint HeroIcon
//===========================================================================
bool Trig_Hint_HeroIcon_Actions(bool testConds, bool runActions){
	if (testConds){
		if (!GAw3_Trig_Hint_HeroIcon_Conditions()){
			return false;
		}
	}
	if (!runActions) {
		return true;
	}
    QuestMessageBJ( GetPlayersAll(), bj_QUESTMESSAGE_ALWAYSHINT, "TRIGSTR_335" );
    return true;
}
//===========================================================================
void InitTrig_Hint_HeroIcon(){
    gg_trg_Hint_HeroIcon = TriggerCreate( "Trig_Hint_HeroIcon_Actions" );;
}
//===========================================================================
// Trigger: Hint PickUpItem
//===========================================================================
bool Trig_Hint_PickUpItem_Actions(bool testConds, bool runActions){
	if (testConds){
		if (!GAw3_Trig_Hint_PickUpItem_Conditions()){
			return false;
		}
	}
	if (!runActions) {
		return true;
	}
    QuestMessageBJ( GetPlayersAll(), bj_QUESTMESSAGE_ALWAYSHINT, "TRIGSTR_360" );
    return true;
}
//===========================================================================
void InitTrig_Hint_PickUpItem(){
    gg_trg_Hint_PickUpItem = TriggerCreate( "Trig_Hint_PickUpItem_Actions" );;
}
//===========================================================================
// Trigger: Hint ItemTooltip
//===========================================================================
bool Trig_Hint_ItemTooltip_Actions(bool testConds, bool runActions){
	if (testConds){
		if (!GAw3_Trig_Hint_ItemTooltip_Conditions()){
			return false;
		}
	}
	if (!runActions) {
		return true;
	}
    QuestMessageBJ( GetPlayersAll(), bj_QUESTMESSAGE_ALWAYSHINT, "TRIGSTR_365" );
    return true;
}
//===========================================================================
void InitTrig_Hint_ItemTooltip(){
    gg_trg_Hint_ItemTooltip = TriggerCreate( "Trig_Hint_ItemTooltip_Actions" );;
}
//===========================================================================
// Trigger: Hint UnitStatus
//===========================================================================
bool Trig_Hint_UnitStatus_Actions(bool testConds, bool runActions){
	if (testConds){
		if (!GAw3_Trig_Hint_UnitStatus_Conditions()){
			return false;
		}
	}
	if (!runActions) {
		return true;
	}
    QuestMessageBJ( GetPlayersAll(), bj_QUESTMESSAGE_ALWAYSHINT, "TRIGSTR_368" );
    return true;
}
//===========================================================================
void InitTrig_Hint_UnitStatus(){
    gg_trg_Hint_UnitStatus = TriggerCreate( "Trig_Hint_UnitStatus_Actions" );;
}
//===========================================================================
// Trigger: Hint UseManaPotion
//===========================================================================
bool Trig_Hint_UseManaPotion_Actions(bool testConds, bool runActions){
	if (testConds){
		if (!GAw3_Trig_Hint_UseManaPotion_Conditions()){
			return false;
		}
	}
	if (!runActions) {
		return true;
	}
    QuestMessageBJ( GetPlayersAll(), bj_QUESTMESSAGE_ALWAYSHINT, "TRIGSTR_394" );
    return true;
}
//===========================================================================
void InitTrig_Hint_UseManaPotion(){
    gg_trg_Hint_UseManaPotion = TriggerCreate( "Trig_Hint_UseManaPotion_Actions" );;
}
//===========================================================================
// Trigger: Hint NightVisibility
//===========================================================================
bool Trig_Hint_NightVisibility_Actions(bool testConds, bool runActions){
	if (testConds){
		if (!GAw3_Trig_Hint_NightVisibility_Conditions()){
			return false;
		}
	}
	if (!runActions) {
		return true;
	}
    QuestMessageBJ( GetPlayersAll(), bj_QUESTMESSAGE_ALWAYSHINT, "TRIGSTR_403" );
    return true;
}
//===========================================================================
void InitTrig_Hint_NightVisibility(){
    gg_trg_Hint_NightVisibility = TriggerCreate( "Trig_Hint_NightVisibility_Actions" );;
}
//===========================================================================
// Trigger: Hint UnexploredAreas
//===========================================================================
bool Trig_Hint_UnexploredAreas_Actions(bool testConds, bool runActions){
	if (testConds){
		if (!GAw3_Trig_Hint_UnexploredAreas_Conditions()){
			return false;
		}
	}
	if (!runActions) {
		return true;
	}
    QuestMessageBJ( GetPlayersAll(), bj_QUESTMESSAGE_ALWAYSHINT, "TRIGSTR_411" );
    return true;
}
//===========================================================================
void InitTrig_Hint_UnexploredAreas(){
    gg_trg_Hint_UnexploredAreas = TriggerCreate( "Trig_Hint_UnexploredAreas_Actions" );;
}
//===========================================================================
// Trigger: Hint SleepersWake
//===========================================================================
bool Trig_Hint_SleepersWake_Actions(bool testConds, bool runActions){
	if (testConds){
		if (!GAw3_Trig_Hint_SleepersWake_Conditions()){
			return false;
		}
	}
	if (!runActions) {
		return true;
	}
    QuestMessageBJ( GetPlayersAll(), bj_QUESTMESSAGE_ALWAYSHINT, "TRIGSTR_420" );
    return true;
}
//===========================================================================
void InitTrig_Hint_SleepersWake(){
    gg_trg_Hint_SleepersWake = TriggerCreate( "Trig_Hint_SleepersWake_Actions" );;
}
//===========================================================================
// Trigger: Hint CreepLevel
//===========================================================================
bool Trig_Hint_CreepLevel_Actions(bool testConds, bool runActions){
	if (testConds){
		if (!GAw3_Trig_Hint_CreepLevel_Conditions()){
			return false;
		}
	}
	if (!runActions) {
		return true;
	}
    QuestMessageBJ( GetPlayersAll(), bj_QUESTMESSAGE_ALWAYSHINT, "TRIGSTR_436" );
    return true;
}
//===========================================================================
void InitTrig_Hint_CreepLevel(){
    gg_trg_Hint_CreepLevel = TriggerCreate( "Trig_Hint_CreepLevel_Actions" );;
}
//===========================================================================
// Trigger: Hint Tomes
//===========================================================================
bool Trig_Hint_Tomes_Actions(bool testConds, bool runActions){
	if (testConds){
		if (!GAw3_Trig_Hint_Tomes_Conditions()){
			return false;
		}
	}
	if (!runActions) {
		return true;
	}
    QuestMessageBJ( GetPlayersAll(), bj_QUESTMESSAGE_ALWAYSHINT, "TRIGSTR_442" );
    return true;
}
//===========================================================================
void InitTrig_Hint_Tomes(){
    gg_trg_Hint_Tomes = TriggerCreate( "Trig_Hint_Tomes_Actions" );;
}

//--------------------------------------------------------------------------------------------------
// Custom Script: Quest
//--------------------------------------------------------------------------------------------------
//===========================================================================
// Trigger: MissionFailed ThrallDead
//===========================================================================
bool Trig_MissionFailed_ThrallDead_Actions(bool testConds, bool runActions){
	if (testConds){
		if (!GAw3_Trig_MissionFailed_ThrallDead_Conditions()){
			return false;
		}
	}
	if (!runActions) {
		return true;
	}
    QuestMessageBJ( GetPlayersAll(), bj_QUESTMESSAGE_MISSIONFAILED, "TRIGSTR_382" );
    return true;
}
//===========================================================================
void InitTrig_MissionFailed_ThrallDead(){
    gg_trg_MissionFailed_ThrallDead = TriggerCreate( "Trig_MissionFailed_ThrallDead_Actions" );;
}
//===========================================================================
// Trigger: QuestProphet Create
//===========================================================================
boolean Trig_QuestProphet_Create_Conditions(){
    if ( ! ( udg_QuestProphetCreated == false ) ) {
        return false;
    }
    return true;
}
bool Trig_QuestProphet_Create_Actions(bool testConds, bool runActions){
	if (testConds){
		if (!GAw3_Trig_QuestProphet_Create_Conditions()){
			return false;
		}
	}
	if (!runActions) {
		return true;
	}
    udg_QuestProphetCreated = true;
    CreateQuestBJ( bj_QUESTTYPE_REQ_UNDISCOVERED, "TRIGSTR_214", "TRIGSTR_215", "ReplaceableTextures\\CommandButtons\\BTNMedivh.tga" );
    udg_QUESTFindProphet = GetLastCreatedQuestBJ();
    CreateQuestItemBJ( GetLastCreatedQuestBJ(), "TRIGSTR_216" );
    CreateQuestItemBJ( GetLastCreatedQuestBJ(), "TRIGSTR_217" );
    return true;
}
//===========================================================================
void InitTrig_QuestProphet_Create(){
    gg_trg_QuestProphet_Create = TriggerCreate( "Trig_QuestProphet_Create_Actions" );;
    GAw3_Trig_QuestProphet_Create_Conditions = Trig_QuestProphet_Create_Conditions;
}
//===========================================================================
// Trigger: QuestProphet Discover
//===========================================================================
bool Trig_QuestProphet_Discover_Actions(bool testConds, bool runActions){
	if (testConds){
		if (!GAw3_Trig_QuestProphet_Discover_Conditions()){
			return false;
		}
	}
	if (!runActions) {
		return true;
	}
    ConditionalTriggerExecute( gg_trg_QuestProphet_Create );
    QuestSetDiscoveredBJ( udg_QUESTFindProphet, true );
    QuestMessageBJ( GetPlayersAll(), bj_QUESTMESSAGE_DISCOVERED, "TRIGSTR_218" );
    return true;
}
//===========================================================================
void InitTrig_QuestProphet_Discover(){
    gg_trg_QuestProphet_Discover = TriggerCreate( "Trig_QuestProphet_Discover_Actions" );;
}
//===========================================================================
// Trigger: QuestProphet Complete
//===========================================================================
bool Trig_QuestProphet_Complete_Actions(bool testConds, bool runActions){
	if (testConds){
		if (!GAw3_Trig_QuestProphet_Complete_Conditions()){
			return false;
		}
	}
	if (!runActions) {
		return true;
	}
    ConditionalTriggerExecute( gg_trg_QuestProphet_Create );
    QuestSetCompletedBJ( udg_QUESTFindProphet, true );
    QuestMessageBJ( GetPlayersAll(), bj_QUESTMESSAGE_COMPLETED, "TRIGSTR_283" );
    return true;
}
//===========================================================================
void InitTrig_QuestProphet_Complete(){
    gg_trg_QuestProphet_Complete = TriggerCreate( "Trig_QuestProphet_Complete_Actions" );;
}

//--------------------------------------------------------------------------------------------------
// Custom Script: Housekeeping
//--------------------------------------------------------------------------------------------------
//===========================================================================
// Trigger: Track Unit Deaths
//===========================================================================
bool Trig_Track_Unit_Deaths_Actions(bool testConds, bool runActions){
	if (testConds){
		if (!GAw3_Trig_Track_Unit_Deaths_Conditions()){
			return false;
		}
	}
	if (!runActions) {
		return true;
	}
    GroupRemoveUnitSimple( GetDyingUnit(), udg_YourUnits );
    return true;
}
//===========================================================================
void InitTrig_Track_Unit_Deaths(){
    gg_trg_Track_Unit_Deaths = TriggerCreate( "Trig_Track_Unit_Deaths_Actions" );;
    TriggerRegisterPlayerUnitEventSimple( gg_trg_Track_Unit_Deaths, Player(0), EVENT_PLAYER_UNIT_DEATH );
}
//===========================================================================
// Trigger: Track Creep Deaths
//===========================================================================
bool Trig_Track_Creep_Deaths_Actions(bool testConds, bool runActions){
	if (testConds){
		if (!GAw3_Trig_Track_Creep_Deaths_Conditions()){
			return false;
		}
	}
	if (!runActions) {
		return true;
	}
    GroupRemoveUnitSimple( GetDyingUnit(), udg_GnollGroup );
    GroupRemoveUnitSimple( GetDyingUnit(), udg_MurlocGroup );
    GroupRemoveUnitSimple( GetDyingUnit(), udg_TrollsGroup );
    return true;
}
//===========================================================================
void InitTrig_Track_Creep_Deaths(){
    gg_trg_Track_Creep_Deaths = TriggerCreate( "Trig_Track_Creep_Deaths_Actions" );;
    TriggerRegisterPlayerUnitEventSimple( gg_trg_Track_Creep_Deaths, Player(PLAYER_NEUTRAL_AGGRESSIVE), EVENT_PLAYER_UNIT_DEATH );
}
//===========================================================================
// Trigger: Thrall Level Limit
//===========================================================================
boolean Trig_Thrall_Level_Limit_Conditions(){
    if ( ! ( GetLevelingUnit() == udg_Thrall ) ) {
        return false;
    }
    return true;
}
bool Trig_Thrall_Level_Limit_Actions(bool testConds, bool runActions){
	if (testConds){
		if (!GAw3_Trig_Thrall_Level_Limit_Conditions()){
			return false;
		}
	}
	if (!runActions) {
		return true;
	}
    DisableTrigger( GetTriggeringTrigger() );
    SuspendHeroXPBJ( false, udg_Thrall );
    return true;
}
//===========================================================================
void InitTrig_Thrall_Level_Limit(){
    gg_trg_Thrall_Level_Limit = TriggerCreate( "Trig_Thrall_Level_Limit_Actions" );;
    TriggerRegisterPlayerUnitEventSimple( gg_trg_Thrall_Level_Limit, Player(0), EVENT_PLAYER_HERO_LEVEL );
    GAw3_Trig_Thrall_Level_Limit_Conditions = Trig_Thrall_Level_Limit_Conditions;
}
//===========================================================================
// Trigger: Thrall Gains Point
//===========================================================================
boolean Trig_Thrall_Gains_Point_Conditions(){
    if ( ! ( GetLevelingUnit() == udg_Thrall ) ) {
        return false;
    }
    return true;
}
bool Trig_Thrall_Gains_Point_Actions(bool testConds, bool runActions){
	if (testConds){
		if (!GAw3_Trig_Thrall_Gains_Point_Conditions()){
			return false;
		}
	}
	if (!runActions) {
		return true;
	}
    udg_HeroPointsAvailable = ( udg_HeroPointsAvailable + 1 );
    return true;
}
//===========================================================================
void InitTrig_Thrall_Gains_Point(){
    gg_trg_Thrall_Gains_Point = TriggerCreate( "Trig_Thrall_Gains_Point_Actions" );;
    TriggerRegisterPlayerUnitEventSimple( gg_trg_Thrall_Gains_Point, Player(0), EVENT_PLAYER_HERO_LEVEL );
    GAw3_Trig_Thrall_Gains_Point_Conditions = Trig_Thrall_Gains_Point_Conditions;
}
//===========================================================================
// Trigger: Thrall Spends Point
//===========================================================================
boolean Trig_Thrall_Spends_Point_Conditions(){
    if ( ! ( GetLearningUnit() == udg_Thrall ) ) {
        return false;
    }
    return true;
}
bool Trig_Thrall_Spends_Point_Actions(bool testConds, bool runActions){
	if (testConds){
		if (!GAw3_Trig_Thrall_Spends_Point_Conditions()){
			return false;
		}
	}
	if (!runActions) {
		return true;
	}
    udg_HeroPointsAvailable = ( udg_HeroPointsAvailable - 1 );
    return true;
}
//===========================================================================
void InitTrig_Thrall_Spends_Point(){
    gg_trg_Thrall_Spends_Point = TriggerCreate( "Trig_Thrall_Spends_Point_Actions" );;
    TriggerRegisterPlayerUnitEventSimple( gg_trg_Thrall_Spends_Point, Player(0), EVENT_PLAYER_HERO_SKILL );
    GAw3_Trig_Thrall_Spends_Point_Conditions = Trig_Thrall_Spends_Point_Conditions;
}

//--------------------------------------------------------------------------------------------------
// Custom Script: SlowDay
//--------------------------------------------------------------------------------------------------
//===========================================================================
// Trigger: SlowDay StepA
//===========================================================================
boolean Trig_SlowDay_StepA_Conditions(){
    if ( ! ( udg_SlowDayAllowed == true ) ) {
        return false;
    }
    if ( ! ( udg_GameOver == false ) ) {
        return false;
    }
    return true;
}
bool Trig_SlowDay_StepA_Actions(bool testConds, bool runActions){
	if (testConds){
		if (!GAw3_Trig_SlowDay_StepA_Conditions()){
			return false;
		}
	}
	if (!runActions) {
		return true;
	}
    DisableTrigger( GetTriggeringTrigger() );
    SetTimeOfDayScalePercentBJ( 80.00 );
    return true;
}
//===========================================================================
void InitTrig_SlowDay_StepA(){
    gg_trg_SlowDay_StepA = TriggerCreate( "Trig_SlowDay_StepA_Actions" );;
    TriggerRegisterGameStateEventTimeOfDay( gg_trg_SlowDay_StepA, GREATER_THAN, 10.00 );
    GAw3_Trig_SlowDay_StepA_Conditions = Trig_SlowDay_StepA_Conditions;
}
//===========================================================================
// Trigger: SlowDay StepB
//===========================================================================
boolean Trig_SlowDay_StepB_Conditions(){
    if ( ! ( udg_SlowDayAllowed == true ) ) {
        return false;
    }
    if ( ! ( udg_GameOver == false ) ) {
        return false;
    }
    return true;
}
bool Trig_SlowDay_StepB_Actions(bool testConds, bool runActions){
	if (testConds){
		if (!GAw3_Trig_SlowDay_StepB_Conditions()){
			return false;
		}
	}
	if (!runActions) {
		return true;
	}
    DisableTrigger( GetTriggeringTrigger() );
    SetTimeOfDayScalePercentBJ( 60.00 );
    return true;
}
//===========================================================================
void InitTrig_SlowDay_StepB(){
    gg_trg_SlowDay_StepB = TriggerCreate( "Trig_SlowDay_StepB_Actions" );;
    TriggerRegisterGameStateEventTimeOfDay( gg_trg_SlowDay_StepB, GREATER_THAN, 13.00 );
    GAw3_Trig_SlowDay_StepB_Conditions = Trig_SlowDay_StepB_Conditions;
}
//===========================================================================
// Trigger: SlowDay StepC
//===========================================================================
boolean Trig_SlowDay_StepC_Conditions(){
    if ( ! ( udg_SlowDayAllowed == true ) ) {
        return false;
    }
    if ( ! ( udg_GameOver == false ) ) {
        return false;
    }
    return true;
}
bool Trig_SlowDay_StepC_Actions(bool testConds, bool runActions){
	if (testConds){
		if (!GAw3_Trig_SlowDay_StepC_Conditions()){
			return false;
		}
	}
	if (!runActions) {
		return true;
	}
    DisableTrigger( GetTriggeringTrigger() );
    SetTimeOfDayScalePercentBJ( 30.00 );
    return true;
}
//===========================================================================
void InitTrig_SlowDay_StepC(){
    gg_trg_SlowDay_StepC = TriggerCreate( "Trig_SlowDay_StepC_Actions" );;
    TriggerRegisterGameStateEventTimeOfDay( gg_trg_SlowDay_StepC, GREATER_THAN, 15.00 );
    GAw3_Trig_SlowDay_StepC_Conditions = Trig_SlowDay_StepC_Conditions;
}
//===========================================================================
// Trigger: SlowDay StepD
//===========================================================================
boolean Trig_SlowDay_StepD_Conditions(){
    if ( ! ( udg_SlowDayAllowed == true ) ) {
        return false;
    }
    if ( ! ( udg_GameOver == false ) ) {
        return false;
    }
    return true;
}
bool Trig_SlowDay_StepD_Actions(bool testConds, bool runActions){
	if (testConds){
		if (!GAw3_Trig_SlowDay_StepD_Conditions()){
			return false;
		}
	}
	if (!runActions) {
		return true;
	}
    DisableTrigger( GetTriggeringTrigger() );
    SetTimeOfDayScalePercentBJ( 10.00 );
    return true;
}
//===========================================================================
void InitTrig_SlowDay_StepD(){
    gg_trg_SlowDay_StepD = TriggerCreate( "Trig_SlowDay_StepD_Actions" );;
    TriggerRegisterGameStateEventTimeOfDay( gg_trg_SlowDay_StepD, GREATER_THAN, 17.00 );
    GAw3_Trig_SlowDay_StepD_Conditions = Trig_SlowDay_StepD_Conditions;
}
//===========================================================================
// Trigger: SlowDay StepE
//===========================================================================
boolean Trig_SlowDay_StepE_Conditions(){
    if ( ! ( udg_SlowDayAllowed == true ) ) {
        return false;
    }
    if ( ! ( udg_GameOver == false ) ) {
        return false;
    }
    return true;
}
bool Trig_SlowDay_StepE_Actions(bool testConds, bool runActions){
	if (testConds){
		if (!GAw3_Trig_SlowDay_StepE_Conditions()){
			return false;
		}
	}
	if (!runActions) {
		return true;
	}
    DisableTrigger( GetTriggeringTrigger() );
    SetTimeOfDayScalePercentBJ( 1.00 );
    return true;
}
//===========================================================================
void InitTrig_SlowDay_StepE(){
    gg_trg_SlowDay_StepE = TriggerCreate( "Trig_SlowDay_StepE_Actions" );;
    TriggerRegisterGameStateEventTimeOfDay( gg_trg_SlowDay_StepE, GREATER_THAN, 17.50 );
    GAw3_Trig_SlowDay_StepE_Conditions = Trig_SlowDay_StepE_Conditions;
}
//===========================================================================
// Trigger: SlowDay StepF
//===========================================================================
boolean Trig_SlowDay_StepF_Conditions(){
    if ( ! ( udg_SlowDayAllowed == true ) ) {
        return false;
    }
    if ( ! ( udg_GameOver == false ) ) {
        return false;
    }
    return true;
}
bool Trig_SlowDay_StepF_Actions(bool testConds, bool runActions){
	if (testConds){
		if (!GAw3_Trig_SlowDay_StepF_Conditions()){
			return false;
		}
	}
	if (!runActions) {
		return true;
	}
    DisableTrigger( GetTriggeringTrigger() );
    SetTimeOfDayScalePercentBJ( 0.10 );
    return true;
}
//===========================================================================
void InitTrig_SlowDay_StepF(){
    gg_trg_SlowDay_StepF = TriggerCreate( "Trig_SlowDay_StepF_Actions" );;
    TriggerRegisterGameStateEventTimeOfDay( gg_trg_SlowDay_StepF, GREATER_THAN, 17.70 );
    GAw3_Trig_SlowDay_StepF_Conditions = Trig_SlowDay_StepF_Conditions;
}
//===========================================================================
// Trigger: SlowDay StepG
//===========================================================================
boolean Trig_SlowDay_StepG_Conditions(){
    if ( ! ( udg_SlowDayAllowed == true ) ) {
        return false;
    }
    if ( ! ( udg_GameOver == false ) ) {
        return false;
    }
    return true;
}
bool Trig_SlowDay_StepG_Actions(bool testConds, bool runActions){
	if (testConds){
		if (!GAw3_Trig_SlowDay_StepG_Conditions()){
			return false;
		}
	}
	if (!runActions) {
		return true;
	}
    DisableTrigger( GetTriggeringTrigger() );
    SetTimeOfDayScalePercentBJ( 0.01 );
    return true;
}
//===========================================================================
void InitTrig_SlowDay_StepG(){
    gg_trg_SlowDay_StepG = TriggerCreate( "Trig_SlowDay_StepG_Actions" );;
    TriggerRegisterGameStateEventTimeOfDay( gg_trg_SlowDay_StepG, GREATER_THAN, 17.80 );
    GAw3_Trig_SlowDay_StepG_Conditions = Trig_SlowDay_StepG_Conditions;
}

//--------------------------------------------------------------------------------------------------
// Custom Script: SlowNight
//--------------------------------------------------------------------------------------------------
//===========================================================================
// Trigger: SlowNight StepA
//===========================================================================
boolean Trig_SlowNight_StepA_Conditions(){
    if ( ! ( udg_SlowNightAllowed == true ) ) {
        return false;
    }
    if ( ! ( udg_GameOver == false ) ) {
        return false;
    }
    return true;
}
bool Trig_SlowNight_StepA_Actions(bool testConds, bool runActions){
	if (testConds){
		if (!GAw3_Trig_SlowNight_StepA_Conditions()){
			return false;
		}
	}
	if (!runActions) {
		return true;
	}
    DisableTrigger( GetTriggeringTrigger() );
    SetTimeOfDayScalePercentBJ( 40.00 );
    return true;
}
//===========================================================================
void InitTrig_SlowNight_StepA(){
    gg_trg_SlowNight_StepA = TriggerCreate( "Trig_SlowNight_StepA_Actions" );;
    TriggerRegisterGameStateEventTimeOfDay( gg_trg_SlowNight_StepA, GREATER_THAN, 18.50 );
    GAw3_Trig_SlowNight_StepA_Conditions = Trig_SlowNight_StepA_Conditions;
}
//===========================================================================
// Trigger: SlowNight StepB
//===========================================================================
boolean Trig_SlowNight_StepB_Conditions(){
    if ( ! ( udg_SlowNightAllowed == true ) ) {
        return false;
    }
    if ( ! ( udg_GameOver == false ) ) {
        return false;
    }
    return true;
}
bool Trig_SlowNight_StepB_Actions(bool testConds, bool runActions){
	if (testConds){
		if (!GAw3_Trig_SlowNight_StepB_Conditions()){
			return false;
		}
	}
	if (!runActions) {
		return true;
	}
    DisableTrigger( GetTriggeringTrigger() );
    SetTimeOfDayScalePercentBJ( 10.00 );
    return true;
}
//===========================================================================
void InitTrig_SlowNight_StepB(){
    gg_trg_SlowNight_StepB = TriggerCreate( "Trig_SlowNight_StepB_Actions" );;
    TriggerRegisterGameStateEventTimeOfDay( gg_trg_SlowNight_StepB, GREATER_THAN, 19.50 );
    GAw3_Trig_SlowNight_StepB_Conditions = Trig_SlowNight_StepB_Conditions;
}
//===========================================================================
// Trigger: SlowNight StepC
//===========================================================================
boolean Trig_SlowNight_StepC_Conditions(){
    if ( ! ( udg_SlowNightAllowed == true ) ) {
        return false;
    }
    if ( ! ( udg_GameOver == false ) ) {
        return false;
    }
    return true;
}
bool Trig_SlowNight_StepC_Actions(bool testConds, bool runActions){
	if (testConds){
		if (!GAw3_Trig_SlowNight_StepC_Conditions()){
			return false;
		}
	}
	if (!runActions) {
		return true;
	}
    DisableTrigger( GetTriggeringTrigger() );
    SetTimeOfDayScalePercentBJ( 4.00 );
    return true;
}
//===========================================================================
void InitTrig_SlowNight_StepC(){
    gg_trg_SlowNight_StepC = TriggerCreate( "Trig_SlowNight_StepC_Actions" );;
    TriggerRegisterGameStateEventTimeOfDay( gg_trg_SlowNight_StepC, GREATER_THAN, 20.50 );
    GAw3_Trig_SlowNight_StepC_Conditions = Trig_SlowNight_StepC_Conditions;
}
//===========================================================================
// Trigger: SlowNight StepD
//===========================================================================
boolean Trig_SlowNight_StepD_Conditions(){
    if ( ! ( udg_SlowNightAllowed == true ) ) {
        return false;
    }
    if ( ! ( udg_GameOver == false ) ) {
        return false;
    }
    return true;
}
bool Trig_SlowNight_StepD_Actions(bool testConds, bool runActions){
	if (testConds){
		if (!GAw3_Trig_SlowNight_StepD_Conditions()){
			return false;
		}
	}
	if (!runActions) {
		return true;
	}
    DisableTrigger( GetTriggeringTrigger() );
    SetTimeOfDayScalePercentBJ( 1.00 );
    return true;
}
//===========================================================================
void InitTrig_SlowNight_StepD(){
    gg_trg_SlowNight_StepD = TriggerCreate( "Trig_SlowNight_StepD_Actions" );;
    TriggerRegisterGameStateEventTimeOfDay( gg_trg_SlowNight_StepD, GREATER_THAN, 21.50 );
    GAw3_Trig_SlowNight_StepD_Conditions = Trig_SlowNight_StepD_Conditions;
}
//===========================================================================
// Trigger: SlowNight StepE
//===========================================================================
boolean Trig_SlowNight_StepE_Conditions(){
    if ( ! ( udg_SlowNightAllowed == true ) ) {
        return false;
    }
    if ( ! ( udg_GameOver == false ) ) {
        return false;
    }
    return true;
}
bool Trig_SlowNight_StepE_Actions(bool testConds, bool runActions){
	if (testConds){
		if (!GAw3_Trig_SlowNight_StepE_Conditions()){
			return false;
		}
	}
	if (!runActions) {
		return true;
	}
    DisableTrigger( GetTriggeringTrigger() );
    SetTimeOfDayScalePercentBJ( 0.40 );
    return true;
}
//===========================================================================
void InitTrig_SlowNight_StepE(){
    gg_trg_SlowNight_StepE = TriggerCreate( "Trig_SlowNight_StepE_Actions" );;
    TriggerRegisterGameStateEventTimeOfDay( gg_trg_SlowNight_StepE, GREATER_THAN, 22.50 );
    GAw3_Trig_SlowNight_StepE_Conditions = Trig_SlowNight_StepE_Conditions;
}
//===========================================================================
// Trigger: SlowNight StepF
//===========================================================================
boolean Trig_SlowNight_StepF_Conditions(){
    if ( ! ( udg_SlowNightAllowed == true ) ) {
        return false;
    }
    if ( ! ( udg_GameOver == false ) ) {
        return false;
    }
    return true;
}
bool Trig_SlowNight_StepF_Actions(bool testConds, bool runActions){
	if (testConds){
		if (!GAw3_Trig_SlowNight_StepF_Conditions()){
			return false;
		}
	}
	if (!runActions) {
		return true;
	}
    DisableTrigger( GetTriggeringTrigger() );
    SetTimeOfDayScalePercentBJ( 0.10 );
    return true;
}
//===========================================================================
void InitTrig_SlowNight_StepF(){
    gg_trg_SlowNight_StepF = TriggerCreate( "Trig_SlowNight_StepF_Actions" );;
    TriggerRegisterGameStateEventTimeOfDay( gg_trg_SlowNight_StepF, GREATER_THAN, 23.50 );
    GAw3_Trig_SlowNight_StepF_Conditions = Trig_SlowNight_StepF_Conditions;
}

//--------------------------------------------------------------------------------------------------
// Custom Script: Waterfalls
//--------------------------------------------------------------------------------------------------
//===========================================================================
// Trigger: Check Waterfalls
//
// Gratuitous Waterfall Shots
//===========================================================================
boolean Trig_Check_Waterfalls_Func002002001002001(){
    return ( GetOwningPlayer(GetFilterUnit()) == udg_APlayer01 );
}
boolean Trig_Check_Waterfalls_Func002002001002002(){
    return ( IsUnitAliveBJ(GetFilterUnit()) == true );
}
boolean Trig_Check_Waterfalls_Func002002001002(){
    return GetBooleanAnd( Trig_Check_Waterfalls_Func002002001002001(), Trig_Check_Waterfalls_Func002002001002002() );
}
boolean Trig_Check_Waterfalls_Func003001(){
    return ( udg_TempUnitsInArea > 0 );
}
boolean Trig_Check_Waterfalls_Func004002001002001(){
    return ( GetOwningPlayer(GetFilterUnit()) == udg_APlayer01 );
}
boolean Trig_Check_Waterfalls_Func004002001002002(){
    return ( IsUnitAliveBJ(GetFilterUnit()) == true );
}
boolean Trig_Check_Waterfalls_Func004002001002(){
    return GetBooleanAnd( Trig_Check_Waterfalls_Func004002001002001(), Trig_Check_Waterfalls_Func004002001002002() );
}
boolean Trig_Check_Waterfalls_Func005001(){
    return ( udg_TempUnitsInArea > 0 );
}
bool Trig_Check_Waterfalls_Actions(bool testConds, bool runActions){
	if (testConds){
		if (!GAw3_Trig_Check_Waterfalls_Conditions()){
			return false;
		}
	}
	if (!runActions) {
		return true;
	}
    udg_TempUnitsInArea = CountUnitsInGroup(GetUnitsInRectMatching(gg_rct_West_Falls_Tripwire, Condition(Trig_Check_Waterfalls_Func002002001002)));
    if ( Trig_Check_Waterfalls_Func003001() ) {
        FogModifierStart( udg_WWestFallsVis );
    }else{
        FogModifierStop( udg_WWestFallsVis );
    }
    udg_TempUnitsInArea = CountUnitsInGroup(GetUnitsInRectMatching(gg_rct_Murloc_Falls_Tripwire, Condition(Trig_Check_Waterfalls_Func004002001002)));
    if ( Trig_Check_Waterfalls_Func005001() ) {
        FogModifierStart( udg_WMurlocFallsVis );
    }else{
        FogModifierStop( udg_WMurlocFallsVis );
    }
    return true;
}
//===========================================================================
void InitTrig_Check_Waterfalls(){
    gg_trg_Check_Waterfalls = TriggerCreate( "Trig_Check_Waterfalls_Actions" );;
    TriggerRegisterTimerEventPeriodic( gg_trg_Check_Waterfalls, 1.00 );
}

//--------------------------------------------------------------------------------------------------
// Custom Script: Prophet Quest
//--------------------------------------------------------------------------------------------------
//===========================================================================
// Trigger: Prophet Discover Q
//===========================================================================
bool Trig_Prophet_Discover_Q_Actions(bool testConds, bool runActions){
	if (testConds){
		if (!GAw3_Trig_Prophet_Discover_Q_Conditions()){
			return false;
		}
	}
	if (!runActions) {
		return true;
	}
    ConditionalTriggerExecute( gg_trg_QuestProphet_Discover );
    TriggerSleepAction( udg_QuestDelay );
    QueuedTriggerRemoveBJ( GetTriggeringTrigger() );
    return true;
}
//===========================================================================
void InitTrig_Prophet_Discover_Q(){
    gg_trg_Prophet_Discover_Q = TriggerCreate( "Trig_Prophet_Discover_Q_Actions" );;
}
//===========================================================================
// Trigger: Prophet Complete Q
//===========================================================================
bool Trig_Prophet_Complete_Q_Actions(bool testConds, bool runActions){
	if (testConds){
		if (!GAw3_Trig_Prophet_Complete_Q_Conditions()){
			return false;
		}
	}
	if (!runActions) {
		return true;
	}
    ConditionalTriggerExecute( gg_trg_QuestProphet_Complete );
    TriggerSleepAction( udg_QuestDelay );
    QueuedTriggerRemoveBJ( GetTriggeringTrigger() );
    return true;
}
//===========================================================================
void InitTrig_Prophet_Complete_Q(){
    gg_trg_Prophet_Complete_Q = TriggerCreate( "Trig_Prophet_Complete_Q_Actions" );;
}

//--------------------------------------------------------------------------------------------------
// Custom Script: Select and Move
//--------------------------------------------------------------------------------------------------
//===========================================================================
// Trigger: S1 SelectThrall Q
//===========================================================================
boolean Trig_S1_SelectThrall_Q_Conditions(){
    if ( ! ( IsTriggerEnabled(GetTriggeringTrigger()) == true ) ) {
        return false;
    }
    if ( ! ( udg_GameOver == false ) ) {
        return false;
    }
    return true;
}
boolean Trig_S1_SelectThrall_Q_Func005001(){
    return ( IsTriggerEnabled(GetTriggeringTrigger()) == false );
}
boolean Trig_S1_SelectThrall_Q_Func008001(){
    return ( IsTriggerEnabled(GetTriggeringTrigger()) == false );
}
boolean Trig_S1_SelectThrall_Q_Func011001(){
    return ( IsTriggerEnabled(GetTriggeringTrigger()) == false );
}
bool Trig_S1_SelectThrall_Q_Actions(bool testConds, bool runActions){
	if (testConds){
		if (!GAw3_Trig_S1_SelectThrall_Q_Conditions()){
			return false;
		}
	}
	if (!runActions) {
		return true;
	}
    SetSpeechVolumeGroupsBJ(  );
    CommentString( "Line" );
    TransmissionFromUnitTypeWithNameBJ( GetPlayersAll(), Player(2), udg_NarratorPortrait, "TRIGSTR_239", GetUnitLoc(udg_Thrall), gg_snd_T01Narrator10, "TRIGSTR_240", bj_TIMETYPE_ADD, 0, false );
    TriggerSleepAction( 1.00 );
    if ( Trig_S1_SelectThrall_Q_Func005001() ) {
        return true;
    }else{
        DoNothing(  );
    }
    UnitAddIndicatorBJ( udg_Thrall, udg_HeyLookR, udg_HeyLookG, udg_HeyLookB, udg_HeyLookA );
    TriggerSleepAction( 1.00 );
    if ( Trig_S1_SelectThrall_Q_Func008001() ) {
		return true;
    }else{
        DoNothing(  );
    }
    UnitAddIndicatorBJ( udg_Thrall, udg_HeyLookR, udg_HeyLookG, udg_HeyLookB, udg_HeyLookA );
    WaitForSoundBJ( gg_snd_T01Narrator10, 0 );
    if ( Trig_S1_SelectThrall_Q_Func011001() ) {
		return true;
    }else{
        DoNothing(  );
    }
    VolumeGroupResetBJ(  );
    CommentString( "Done" );
    QueuedTriggerRemoveBJ( GetTriggeringTrigger() );
    return true;
}
//===========================================================================
void InitTrig_S1_SelectThrall_Q(){
    gg_trg_S1_SelectThrall_Q = TriggerCreate( "Trig_S1_SelectThrall_Q_Actions" );;
    GAw3_Trig_S1_SelectThrall_Q_Conditions = Trig_S1_SelectThrall_Q_Conditions;
}
//===========================================================================
// Trigger: S1 SelectThrall Abort
//===========================================================================
bool Trig_S1_SelectThrall_Abort_Actions(bool testConds, bool runActions){
	if (testConds){
		if (!GAw3_Trig_S1_SelectThrall_Abort_Conditions()){
			return false;
		}
	}
	if (!runActions) {
		return true;
	}
    DisableTrigger( gg_trg_S1_SelectThrall_Q );
    CommentString( "Stop potentially playing sounds" );
    TriggerSleepAction( udg_ActAbortPreDelay );
    StopSoundBJ( gg_snd_T01Narrator10, true );
    VolumeGroupResetBJ(  );
    CommentString( "Free the Q" );
    TriggerSleepAction( udg_ActAbortPostDelay );
    QueuedTriggerRemoveBJ( gg_trg_S1_SelectThrall_Q );
    return true;
}
//===========================================================================
void InitTrig_S1_SelectThrall_Abort(){
    gg_trg_S1_SelectThrall_Abort = TriggerCreate( "Trig_S1_SelectThrall_Abort_Actions" );;
}
//===========================================================================
// Trigger: S1 SelectThrall Done
//===========================================================================
boolean Trig_S1_SelectThrall_Done_Conditions(){
    if ( ! ( GetTriggerUnit() == udg_Thrall ) ) {
        return false;
    }
    if ( ! ( IsTriggerEnabled(GetTriggeringTrigger()) == true ) ) {
        return false;
    }
    return true;
}
bool Trig_S1_SelectThrall_Done_Actions(bool testConds, bool runActions){
	if (testConds){
		if (!GAw3_Trig_S1_SelectThrall_Done_Conditions()){
			return false;
		}
	}
	if (!runActions) {
		return true;
	}
    DisableTrigger( GetTriggeringTrigger() );
    CommentString( "Abort and prep next Q" );
    ConditionalTriggerExecute( gg_trg_S1_SelectThrall_Abort );
    TriggerSleepAction( udg_ActAbortDoneDelay );
    QueuedTriggerAddBJ( gg_trg_S2_MoveThrall_Q, true );
    return true;
}
//===========================================================================
void InitTrig_S1_SelectThrall_Done(){
    gg_trg_S1_SelectThrall_Done = TriggerCreate( "Trig_S1_SelectThrall_Done_Actions" );;
    TriggerRegisterPlayerSelectionEventBJ( gg_trg_S1_SelectThrall_Done, Player(0), true );
    GAw3_Trig_S1_SelectThrall_Done_Conditions = Trig_S1_SelectThrall_Done_Conditions;
}
//===========================================================================
// Trigger: S2 MoveThrall Q
//===========================================================================
boolean Trig_S2_MoveThrall_Q_Conditions(){
    if ( ! ( IsTriggerEnabled(GetTriggeringTrigger()) == true ) ) {
        return false;
    }
    if ( ! ( udg_GameOver == false ) ) {
        return false;
    }
    return true;
}
boolean Trig_S2_MoveThrall_Q_Func006001(){
    return ( IsTriggerEnabled(GetTriggeringTrigger()) == false );
}
boolean Trig_S2_MoveThrall_Q_Func010001(){
    return ( IsTriggerEnabled(GetTriggeringTrigger()) == false );
}
boolean Trig_S2_MoveThrall_Q_Func014001(){
    return ( IsTriggerEnabled(GetTriggeringTrigger()) == false );
}
boolean Trig_S2_MoveThrall_Q_Func018001(){
    return ( IsTriggerEnabled(GetTriggeringTrigger()) == false );
}
boolean Trig_S2_MoveThrall_Q_Func021001(){
    return ( IsTriggerEnabled(GetTriggeringTrigger()) == false );
}
boolean Trig_S2_MoveThrall_Q_Func026001(){
    return ( IsTriggerEnabled(GetTriggeringTrigger()) == false );
}
bool Trig_S2_MoveThrall_Q_Actions(bool testConds, bool runActions){
	if (testConds){
		if (!GAw3_Trig_S2_MoveThrall_Q_Conditions()){
			return false;
		}
	}
	if (!runActions) {
		return true;
	}
    FogModifierStart( udg_Visibility01 );
    SetSpeechVolumeGroupsBJ(  );
    CommentString( "Line" );
    TransmissionFromUnitTypeWithNameBJ( GetPlayersAll(), Player(2), udg_NarratorPortrait, "TRIGSTR_244", GetUnitLoc(udg_Thrall), gg_snd_T01Narrator11, "TRIGSTR_245", bj_TIMETYPE_ADD, 0, false );
    WaitForSoundBJ( gg_snd_T01Narrator11, 0 );
    if ( Trig_S2_MoveThrall_Q_Func006001() ) {
        return true;
    }else{
        DoNothing(  );
    }
    CommentString( "Line" );
    TransmissionFromUnitTypeWithNameBJ( GetPlayersAll(), Player(2), udg_NarratorPortrait, "TRIGSTR_246", GetUnitLoc(udg_Thrall), gg_snd_T01Narrator12, "TRIGSTR_247", bj_TIMETYPE_ADD, 0, false );
    WaitForSoundBJ( gg_snd_T01Narrator12, 0 );
    if ( Trig_S2_MoveThrall_Q_Func010001() ) {
        return true;
    }else{
        DoNothing(  );
    }
    CommentString( "Line" );
    TransmissionFromUnitTypeWithNameBJ( GetPlayersAll(), Player(2), udg_NarratorPortrait, "TRIGSTR_248", GetUnitLoc(udg_Thrall), gg_snd_T01Narrator14, "TRIGSTR_249", bj_TIMETYPE_ADD, 0, false );
    TriggerSleepAction( 3.50 );
    if ( Trig_S2_MoveThrall_Q_Func014001() ) {
        return true;
    }else{
        DoNothing(  );
    }
    PingMinimapLocForForce( GetPlayersAll(), GetRectCenter(gg_rct_Spot01), udg_PingTime );
    UnitAddIndicatorBJ( udg_Circle01, udg_HeyLookR, udg_HeyLookG, udg_HeyLookB, udg_HeyLookA );
    TriggerSleepAction( 1.00 );
    if ( Trig_S2_MoveThrall_Q_Func018001() ) {
        return true;
    }else{
        DoNothing(  );
    }
    UnitAddIndicatorBJ( udg_Circle01, udg_HeyLookR, udg_HeyLookG, udg_HeyLookB, udg_HeyLookA );
    WaitForSoundBJ( gg_snd_T01Narrator14, 0 );
    if ( Trig_S2_MoveThrall_Q_Func021001() ) {
        return true;
    }else{
        DoNothing(  );
    }
    VolumeGroupResetBJ(  );
    CommentString( "Hint" );
    ConditionalTriggerExecute( gg_trg_Hint_RightClickMove );
    TriggerSleepAction( udg_HintDelay );
    if ( Trig_S2_MoveThrall_Q_Func026001() ) {
        return true;
    }else{
        DoNothing(  );
    }
    CommentString( "Done" );
    QueuedTriggerRemoveBJ( GetTriggeringTrigger() );
    return true;
}
//===========================================================================
void InitTrig_S2_MoveThrall_Q(){
    gg_trg_S2_MoveThrall_Q = TriggerCreate( "Trig_S2_MoveThrall_Q_Actions" );;
    GAw3_Trig_S2_MoveThrall_Q_Conditions = Trig_S2_MoveThrall_Q_Conditions;
}
//===========================================================================
// Trigger: S2 MoveThrall Abort
//===========================================================================
bool Trig_S2_MoveThrall_Abort_Actions(bool testConds, bool runActions){
	if (testConds){
		if (!GAw3_Trig_S2_MoveThrall_Abort_Conditions()){
			return false;
		}
	}
	if (!runActions) {
		return true;
	}
    DisableTrigger( gg_trg_S2_MoveThrall_Q );
    CommentString( "Stop potentially playing sounds" );
    TriggerSleepAction( udg_ActAbortPreDelay );
    StopSoundBJ( gg_snd_T01Narrator11, true );
    StopSoundBJ( gg_snd_T01Narrator12, true );
    StopSoundBJ( gg_snd_T01Narrator14, true );
    VolumeGroupResetBJ(  );
    PlaySoundBJ( udg_GoodJobSound );
    FogModifierStop( udg_Visibility01 );
    SetDoodadAnimationRectBJ( "death", 'LOo2', gg_rct_Spot01 );
    SetUnitColor( udg_Circle01, GetPlayerColor(Player(PLAYER_NEUTRAL_PASSIVE)) );
    CommentString( "Free the Q" );
    TriggerSleepAction( udg_ActAbortPostDelay );
    QueuedTriggerRemoveBJ( gg_trg_S2_MoveThrall_Q );
    return true;
}
//===========================================================================
void InitTrig_S2_MoveThrall_Abort(){
    gg_trg_S2_MoveThrall_Abort = TriggerCreate( "Trig_S2_MoveThrall_Abort_Actions" );;
}
//===========================================================================
// Trigger: S2 MoveThrall Done
//===========================================================================
boolean Trig_S2_MoveThrall_Done_Conditions(){
    if ( ! ( GetEnteringUnit() == udg_Thrall ) ) {
        return false;
    }
    if ( ! ( IsTriggerEnabled(GetTriggeringTrigger()) == true ) ) {
        return false;
    }
    return true;
}
bool Trig_S2_MoveThrall_Done_Actions(bool testConds, bool runActions){
	if (testConds){
		if (!GAw3_Trig_S2_MoveThrall_Done_Conditions()){
			return false;
		}
	}
	if (!runActions) {
		return true;
	}
    DisableTrigger( GetTriggeringTrigger() );
    CommentString( "Abort and prep next Q" );
    ConditionalTriggerExecute( gg_trg_S2_MoveThrall_Abort );
    TriggerSleepAction( udg_ActAbortDoneDelay );
    QueuedTriggerAddBJ( gg_trg_S3_Scroll_Q, true );
    return true;
}
//===========================================================================
void InitTrig_S2_MoveThrall_Done(){
    gg_trg_S2_MoveThrall_Done = TriggerCreate( "Trig_S2_MoveThrall_Done_Actions" );;
    TriggerRegisterEnterRectSimple( gg_trg_S2_MoveThrall_Done, gg_rct_Spot01 );
    TriggerRegisterEnterRectSimple( gg_trg_S2_MoveThrall_Done, gg_rct_SpotBypass01A );
    TriggerRegisterEnterRectSimple( gg_trg_S2_MoveThrall_Done, gg_rct_SpotBypass01B );
    TriggerRegisterEnterRectSimple( gg_trg_S2_MoveThrall_Done, gg_rct_SpotBypass01C );
    TriggerRegisterEnterRectSimple( gg_trg_S2_MoveThrall_Done, gg_rct_SpotBypass01D );
    GAw3_Trig_S2_MoveThrall_Done_Conditions = Trig_S2_MoveThrall_Done_Conditions;
}
//===========================================================================
// Trigger: S3 Scroll Q
//===========================================================================
boolean Trig_S3_Scroll_Q_Conditions(){
    if ( ! ( IsTriggerEnabled(GetTriggeringTrigger()) == true ) ) {
        return false;
    }
    if ( ! ( udg_GameOver == false ) ) {
        return false;
    }
    return true;
}
boolean Trig_S3_Scroll_Q_Func007001(){
    return ( IsTriggerEnabled(GetTriggeringTrigger()) == false );
}
boolean Trig_S3_Scroll_Q_Func011001(){
    return ( IsTriggerEnabled(GetTriggeringTrigger()) == false );
}
boolean Trig_S3_Scroll_Q_Func016001(){
    return ( IsTriggerEnabled(GetTriggeringTrigger()) == false );
}
boolean Trig_S3_Scroll_Q_Func020001(){
    return ( IsTriggerEnabled(GetTriggeringTrigger()) == false );
}
bool Trig_S3_Scroll_Q_Actions(bool testConds, bool runActions){
	if (testConds){
		if (!GAw3_Trig_S3_Scroll_Q_Conditions()){
			return false;
		}
	}
	if (!runActions) {
		return true;
	}
    SetCameraQuickPositionLocForPlayer( udg_APlayer01, GetRectCenter(gg_rct_Spot01) );
    FogModifierStart( udg_Visibility02 );
    SetSpeechVolumeGroupsBJ(  );
    CommentString( "Line" );
    TransmissionFromUnitTypeWithNameBJ( GetPlayersAll(), Player(2), udg_NarratorPortrait, "TRIGSTR_261", GetUnitLoc(udg_Thrall), gg_snd_T01Narrator15, "TRIGSTR_262", bj_TIMETYPE_ADD, 0, false );
    TriggerSleepAction( 6.00 );
    if ( Trig_S3_Scroll_Q_Func007001() ) {
        return true;
    }else{
        DoNothing(  );
    }
    PingMinimapLocForForce( GetPlayersAll(), GetRectCenter(gg_rct_Spot02), udg_PingTime );
    SetCameraQuickPositionLocForPlayer( udg_APlayer01, GetRectCenter(gg_rct_Spot02) );
    WaitForSoundBJ( gg_snd_T01Narrator15, 0 );
    if ( Trig_S3_Scroll_Q_Func011001() ) {
        return true;
    }else{
        DoNothing(  );
    }
    VolumeGroupResetBJ(  );
    CommentString( "Hint" );
    ConditionalTriggerExecute( gg_trg_Hint_Scrolling );
    TriggerSleepAction( udg_HintDelay );
    if ( Trig_S3_Scroll_Q_Func016001() ) {
        return true;
    }else{
        DoNothing(  );
    }
    CommentString( "Hint" );
    ConditionalTriggerExecute( gg_trg_Hint_ArrowKeys );
    TriggerSleepAction( udg_HintDelay );
    if ( Trig_S3_Scroll_Q_Func020001() ) {
        return true;
    }else{
        DoNothing(  );
    }
    CommentString( "Done" );
    QueuedTriggerRemoveBJ( GetTriggeringTrigger() );
    return true;
}
//===========================================================================
void InitTrig_S3_Scroll_Q(){
    gg_trg_S3_Scroll_Q = TriggerCreate( "Trig_S3_Scroll_Q_Actions" );;
    GAw3_Trig_S3_Scroll_Q_Conditions = Trig_S3_Scroll_Q_Conditions;
}
//===========================================================================
// Trigger: S3 Scroll Abort
//===========================================================================
bool Trig_S3_Scroll_Abort_Actions(bool testConds, bool runActions){
	if (testConds){
		if (!GAw3_Trig_S3_Scroll_Abort_Conditions()){
			return false;
		}
	}
	if (!runActions) {
		return true;
	}
    DisableTrigger( gg_trg_S3_Scroll_Q );
    CommentString( "Stop potentially playing sounds" );
    TriggerSleepAction( udg_ActAbortPreDelay );
    StopSoundBJ( gg_snd_T01Narrator15, true );
    VolumeGroupResetBJ(  );
    PlaySoundBJ( udg_GoodJobSound );
    FogModifierStop( udg_Visibility02 );
    SetDoodadAnimationRectBJ( "death", 'LOo2', gg_rct_Spot02 );
    SetUnitColor( udg_Circle02, GetPlayerColor(Player(PLAYER_NEUTRAL_PASSIVE)) );
    CommentString( "Free the Q" );
    TriggerSleepAction( udg_ActAbortPostDelay );
    QueuedTriggerRemoveBJ( gg_trg_S3_Scroll_Q );
    return true;
}
//===========================================================================
void InitTrig_S3_Scroll_Abort(){
    gg_trg_S3_Scroll_Abort = TriggerCreate( "Trig_S3_Scroll_Abort_Actions" );;
}
//===========================================================================
// Trigger: S3 Scroll Done
//===========================================================================
boolean Trig_S3_Scroll_Done_Conditions(){
    if ( ! ( GetEnteringUnit() == udg_Thrall ) ) {
        return false;
    }
    if ( ! ( IsTriggerEnabled(GetTriggeringTrigger()) == true ) ) {
        return false;
    }
    return true;
}
bool Trig_S3_Scroll_Done_Actions(bool testConds, bool runActions){
	if (testConds){
		if (!GAw3_Trig_S3_Scroll_Done_Conditions()){
			return false;
		}
	}
	if (!runActions) {
		return true;
	}
    DisableTrigger( GetTriggeringTrigger() );
    CommentString( "Abort and prep next Q" );
    ConditionalTriggerExecute( gg_trg_S3_Scroll_Abort );
    TriggerSleepAction( udg_ActAbortDoneDelay );
    QueuedTriggerAddBJ( gg_trg_S4_BlackMask_Q, true );
    return true;
}
//===========================================================================
void InitTrig_S3_Scroll_Done(){
    gg_trg_S3_Scroll_Done = TriggerCreate( "Trig_S3_Scroll_Done_Actions" );;
    TriggerRegisterEnterRectSimple( gg_trg_S3_Scroll_Done, gg_rct_Spot02 );
    TriggerRegisterEnterRectSimple( gg_trg_S3_Scroll_Done, gg_rct_SpotBypass02A );
    TriggerRegisterEnterRectSimple( gg_trg_S3_Scroll_Done, gg_rct_SpotBypass02B );
    GAw3_Trig_S3_Scroll_Done_Conditions = Trig_S3_Scroll_Done_Conditions;
}
//===========================================================================
// Trigger: S4 BlackMask Q
//===========================================================================
boolean Trig_S4_BlackMask_Q_Conditions(){
    if ( ! ( IsTriggerEnabled(GetTriggeringTrigger()) == true ) ) {
        return false;
    }
    if ( ! ( udg_GameOver == false ) ) {
        return false;
    }
    return true;
}
boolean Trig_S4_BlackMask_Q_Func006001(){
    return ( IsTriggerEnabled(GetTriggeringTrigger()) == false );
}
boolean Trig_S4_BlackMask_Q_Func010001(){
    return ( IsTriggerEnabled(GetTriggeringTrigger()) == false );
}
bool Trig_S4_BlackMask_Q_Actions(bool testConds, bool runActions){
	if (testConds){
		if (!GAw3_Trig_S4_BlackMask_Q_Conditions()){
			return false;
		}
	}
	if (!runActions) {
		return true;
	}
    FogModifierStart( udg_Visibility03 );
    SetSpeechVolumeGroupsBJ(  );
    CommentString( "Line" );
    TransmissionFromUnitTypeWithNameBJ( GetPlayersAll(), Player(2), udg_NarratorPortrait, "TRIGSTR_268", GetUnitLoc(udg_Thrall), gg_snd_T01Narrator16, "TRIGSTR_269", bj_TIMETYPE_ADD, 0, false );
    TriggerSleepAction( 1.70 );
    if ( Trig_S4_BlackMask_Q_Func006001() ) {
        return true;
    }else{
        DoNothing(  );
    }
    PingMinimapLocForForce( GetPlayersAll(), GetRectCenter(gg_rct_Spot03), udg_PingTime );
    SetCameraQuickPositionLocForPlayer( udg_APlayer01, GetRectCenter(gg_rct_Spot03) );
    WaitForSoundBJ( gg_snd_T01Narrator16, 0 );
    if ( Trig_S4_BlackMask_Q_Func010001() ) {
        return true;
    }else{
        DoNothing(  );
    }
    VolumeGroupResetBJ(  );
    CommentString( "Done" );
    QueuedTriggerRemoveBJ( GetTriggeringTrigger() );
    return true;
}
//===========================================================================
void InitTrig_S4_BlackMask_Q(){
    gg_trg_S4_BlackMask_Q = TriggerCreate( "Trig_S4_BlackMask_Q_Actions" );;
    GAw3_Trig_S4_BlackMask_Q_Conditions = Trig_S4_BlackMask_Q_Conditions;
}
//===========================================================================
// Trigger: S4 BlackMask Abort
//===========================================================================
bool Trig_S4_BlackMask_Abort_Actions(bool testConds, bool runActions){
	if (testConds){
		if (!GAw3_Trig_S4_BlackMask_Abort_Conditions()){
			return false;
		}
	}
	if (!runActions) {
		return true;
	}
    DisableTrigger( gg_trg_S4_BlackMask_Q );
    CommentString( "Stop potentially playing sounds" );
    TriggerSleepAction( udg_ActAbortPreDelay );
    StopSoundBJ( gg_snd_T01Narrator16, true );
    VolumeGroupResetBJ(  );
    CommentString( "Free the Q" );
    TriggerSleepAction( udg_ActAbortPostDelay );
    QueuedTriggerRemoveBJ( gg_trg_S4_BlackMask_Q );
    return true;
}
//===========================================================================
void InitTrig_S4_BlackMask_Abort(){
    gg_trg_S4_BlackMask_Abort = TriggerCreate( "Trig_S4_BlackMask_Abort_Actions" );;
}
//===========================================================================
// Trigger: S4 BlackMask Done
//===========================================================================
boolean Trig_S4_BlackMask_Done_Conditions(){
    if ( ! ( GetEnteringUnit() == udg_Thrall ) ) {
        return false;
    }
    if ( ! ( IsTriggerEnabled(GetTriggeringTrigger()) == true ) ) {
        return false;
    }
    return true;
}
bool Trig_S4_BlackMask_Done_Actions(bool testConds, bool runActions){
	if (testConds){
		if (!GAw3_Trig_S4_BlackMask_Done_Conditions()){
			return false;
		}
	}
	if (!runActions) {
		return true;
	}
    DisableTrigger( GetTriggeringTrigger() );
    CommentString( "Abort and prep next Q" );
    ConditionalTriggerExecute( gg_trg_S4_BlackMask_Abort );
    TriggerSleepAction( udg_ActAbortDoneDelay );
    QueuedTriggerAddBJ( gg_trg_S5_Unmasking_Q, true );
    return true;
}
//===========================================================================
void InitTrig_S4_BlackMask_Done(){
    gg_trg_S4_BlackMask_Done = TriggerCreate( "Trig_S4_BlackMask_Done_Actions" );;
    TriggerRegisterEnterRectSimple( gg_trg_S4_BlackMask_Done, gg_rct_FlagExplore03A );
    TriggerRegisterEnterRectSimple( gg_trg_S4_BlackMask_Done, gg_rct_FlagExplore03B );
    TriggerRegisterEnterRectSimple( gg_trg_S4_BlackMask_Done, gg_rct_FlagExplore03C );
    GAw3_Trig_S4_BlackMask_Done_Conditions = Trig_S4_BlackMask_Done_Conditions;
}
//===========================================================================
// Trigger: S5 Unmasking Q
//===========================================================================
boolean Trig_S5_Unmasking_Q_Conditions(){
    if ( ! ( IsTriggerEnabled(GetTriggeringTrigger()) == true ) ) {
        return false;
    }
    if ( ! ( udg_GameOver == false ) ) {
        return false;
    }
    return true;
}
boolean Trig_S5_Unmasking_Q_Func005001(){
    return ( IsTriggerEnabled(GetTriggeringTrigger()) == false );
}
bool Trig_S5_Unmasking_Q_Actions(bool testConds, bool runActions){
	if (testConds){
		if (!GAw3_Trig_S5_Unmasking_Q_Conditions()){
			return false;
		}
	}
	if (!runActions) {
		return true;
	}
    SetSpeechVolumeGroupsBJ(  );
    CommentString( "Line" );
    TransmissionFromUnitTypeWithNameBJ( GetPlayersAll(), Player(2), udg_NarratorPortrait, "TRIGSTR_275", GetUnitLoc(udg_Thrall), gg_snd_T01Narrator18, "TRIGSTR_276", bj_TIMETYPE_ADD, 0, false );
    WaitForSoundBJ( gg_snd_T01Narrator18, 0 );
    if ( Trig_S5_Unmasking_Q_Func005001() ) {
        return true;
    }else{
        DoNothing(  );
    }
    VolumeGroupResetBJ(  );
    CommentString( "Done" );
    QueuedTriggerRemoveBJ( GetTriggeringTrigger() );
    return true;
}
//===========================================================================
void InitTrig_S5_Unmasking_Q(){
    gg_trg_S5_Unmasking_Q = TriggerCreate( "Trig_S5_Unmasking_Q_Actions" );;
    GAw3_Trig_S5_Unmasking_Q_Conditions = Trig_S5_Unmasking_Q_Conditions;
}
//===========================================================================
// Trigger: S5 Unmasking Abort
//===========================================================================
bool Trig_S5_Unmasking_Abort_Actions(bool testConds, bool runActions){
	if (testConds){
		if (!GAw3_Trig_S5_Unmasking_Abort_Conditions()){
			return false;
		}
	}
	if (!runActions) {
		return true;
	}
    DisableTrigger( gg_trg_S5_Unmasking_Q );
    CommentString( "Stop potentially playing sounds" );
    TriggerSleepAction( udg_ActAbortPreDelay );
    StopSoundBJ( gg_snd_T01Narrator18, true );
    VolumeGroupResetBJ(  );
    CommentString( "Free the Q" );
    TriggerSleepAction( udg_ActAbortPostDelay );
    QueuedTriggerRemoveBJ( gg_trg_S5_Unmasking_Q );
    return true;
}
//===========================================================================
void InitTrig_S5_Unmasking_Abort(){
    gg_trg_S5_Unmasking_Abort = TriggerCreate( "Trig_S5_Unmasking_Abort_Actions" );;
}
//===========================================================================
// Trigger: S5 Unmasking Done
//===========================================================================
boolean Trig_S5_Unmasking_Done_Conditions(){
    if ( ! ( GetEnteringUnit() == udg_Thrall ) ) {
        return false;
    }
    if ( ! ( IsTriggerEnabled(GetTriggeringTrigger()) == true ) ) {
        return false;
    }
    return true;
}
bool Trig_S5_Unmasking_Done_Actions(bool testConds, bool runActions){
	if (testConds){
		if (!GAw3_Trig_S5_Unmasking_Done_Conditions()){
			return false;
		}
	}
	if (!runActions) {
		return true;
	}
    DisableTrigger( GetTriggeringTrigger() );
    CommentString( "Abort and prep next Q" );
    ConditionalTriggerExecute( gg_trg_S5_Unmasking_Abort );
    return true;
}
//===========================================================================
void InitTrig_S5_Unmasking_Done(){
    gg_trg_S5_Unmasking_Done = TriggerCreate( "Trig_S5_Unmasking_Done_Actions" );;
    TriggerRegisterEnterRectSimple( gg_trg_S5_Unmasking_Done, gg_rct_Spot04 );
    TriggerRegisterEnterRectSimple( gg_trg_S5_Unmasking_Done, gg_rct_SpotBypass04A );
    TriggerRegisterEnterRectSimple( gg_trg_S5_Unmasking_Done, gg_rct_SpotBypass04B );
    TriggerRegisterEnterRectSimple( gg_trg_S5_Unmasking_Done, gg_rct_SpotBypass04C );
    TriggerRegisterEnterRectSimple( gg_trg_S5_Unmasking_Done, gg_rct_SpotBypass04D );
    GAw3_Trig_S5_Unmasking_Done_Conditions = Trig_S5_Unmasking_Done_Conditions;
}
//===========================================================================
// Trigger: S6 MoveMore Event
//===========================================================================
boolean Trig_S6_MoveMore_Event_Conditions(){
    if ( ! ( GetEnteringUnit() == udg_Thrall ) ) {
        return false;
    }
    if ( ! ( IsTriggerEnabled(GetTriggeringTrigger()) == true ) ) {
        return false;
    }
    return true;
}
bool Trig_S6_MoveMore_Event_Actions(bool testConds, bool runActions){
	if (testConds){
		if (!GAw3_Trig_S6_MoveMore_Event_Conditions()){
			return false;
		}
	}
	if (!runActions) {
		return true;
	}
    DisableTrigger( GetTriggeringTrigger() );
    PlaySoundBJ( udg_GoodJobSound );
    FogModifierStop( udg_Visibility03 );
    SetDoodadAnimationRectBJ( "death", 'LOo2', gg_rct_Spot03 );
    SetUnitColor( udg_Circle03, GetPlayerColor(Player(PLAYER_NEUTRAL_PASSIVE)) );
    QueuedTriggerAddBJ( gg_trg_S6_MoveMore_Q, true );
    return true;
}
//===========================================================================
void InitTrig_S6_MoveMore_Event(){
    gg_trg_S6_MoveMore_Event = TriggerCreate( "Trig_S6_MoveMore_Event_Actions" );;
    TriggerRegisterEnterRectSimple( gg_trg_S6_MoveMore_Event, gg_rct_Spot03 );
    TriggerRegisterEnterRectSimple( gg_trg_S6_MoveMore_Event, gg_rct_SpotBypass03A );
    TriggerRegisterEnterRectSimple( gg_trg_S6_MoveMore_Event, gg_rct_SpotBypass03B );
    GAw3_Trig_S6_MoveMore_Event_Conditions = Trig_S6_MoveMore_Event_Conditions;
}
//===========================================================================
// Trigger: S6 MoveMore Q
//===========================================================================
boolean Trig_S6_MoveMore_Q_Conditions(){
    if ( ! ( IsTriggerEnabled(GetTriggeringTrigger()) == true ) ) {
        return false;
    }
    if ( ! ( udg_GameOver == false ) ) {
        return false;
    }
    return true;
}
boolean Trig_S6_MoveMore_Q_Func002001(){
    return ( IsTriggerEnabled(GetTriggeringTrigger()) == false );
}
boolean Trig_S6_MoveMore_Q_Func011001(){
    return ( IsTriggerEnabled(GetTriggeringTrigger()) == false );
}
boolean Trig_S6_MoveMore_Q_Func016001(){
    return ( IsTriggerEnabled(GetTriggeringTrigger()) == false );
}
bool Trig_S6_MoveMore_Q_Actions(bool testConds, bool runActions){
	if (testConds){
		if (!GAw3_Trig_S6_MoveMore_Q_Conditions()){
			return false;
		}
	}
	if (!runActions) {
		return true;
	}
    TriggerSleepAction( 0.50 );
    if ( Trig_S6_MoveMore_Q_Func002001() ) {
        return true;
    }else{
        DoNothing(  );
    }
    FogModifierStart( udg_Visibility04 );
    SetSpeechVolumeGroupsBJ(  );
    CommentString( "Line" );
    TransmissionFromUnitTypeWithNameBJ( GetPlayersAll(), Player(2), udg_NarratorPortrait, "TRIGSTR_279", GetUnitLoc(udg_Thrall), gg_snd_T01Narrator20, "TRIGSTR_280", bj_TIMETYPE_ADD, 0, false );
    TriggerSleepAction( 1.70 );
    PingMinimapLocForForce( GetPlayersAll(), GetRectCenter(gg_rct_Spot04), udg_PingTime );
    SetCameraQuickPositionLocForPlayer( udg_APlayer01, GetRectCenter(gg_rct_Spot04) );
    WaitForSoundBJ( gg_snd_T01Narrator20, 0 );
    if ( Trig_S6_MoveMore_Q_Func011001() ) {
        return true;
    }else{
        DoNothing(  );
    }
    VolumeGroupResetBJ(  );
    CommentString( "Hint" );
    ConditionalTriggerExecute( gg_trg_Hint_MessageLog );
    TriggerSleepAction( udg_HintDelay );
    if ( Trig_S6_MoveMore_Q_Func016001() ) {
        return true;
    }else{
        DoNothing(  );
    }
    CommentString( "Done" );
    QueuedTriggerRemoveBJ( GetTriggeringTrigger() );
    return true;
}
//===========================================================================
void InitTrig_S6_MoveMore_Q(){
    gg_trg_S6_MoveMore_Q = TriggerCreate( "Trig_S6_MoveMore_Q_Actions" );;
    GAw3_Trig_S6_MoveMore_Q_Conditions = Trig_S6_MoveMore_Q_Conditions;
}
//===========================================================================
// Trigger: S6 MoveMore Abort
//===========================================================================
bool Trig_S6_MoveMore_Abort_Actions(bool testConds, bool runActions){
	if (testConds){
		if (!GAw3_Trig_S6_MoveMore_Abort_Conditions()){
			return false;
		}
	}
	if (!runActions) {
		return true;
	}
    DisableTrigger( gg_trg_S6_MoveMore_Q );
    CommentString( "Stop potentially playing sounds" );
    TriggerSleepAction( udg_ActAbortPreDelay );
    StopSoundBJ( gg_snd_T01Narrator20, true );
    VolumeGroupResetBJ(  );
    PlaySoundBJ( udg_GoodJobSound );
    FogModifierStop( udg_Visibility04 );
    SetDoodadAnimationRectBJ( "death", 'LOo2', gg_rct_Spot04 );
    SetUnitColor( udg_Circle04, GetPlayerColor(Player(PLAYER_NEUTRAL_PASSIVE)) );
    CommentString( "Free the Q" );
    TriggerSleepAction( udg_ActAbortPostDelay );
    QueuedTriggerRemoveBJ( gg_trg_S6_MoveMore_Q );
    return true;
}
//===========================================================================
void InitTrig_S6_MoveMore_Abort(){
    gg_trg_S6_MoveMore_Abort = TriggerCreate( "Trig_S6_MoveMore_Abort_Actions" );;
}
//===========================================================================
// Trigger: S6 MoveMore Done
//===========================================================================
boolean Trig_S6_MoveMore_Done_Conditions(){
    if ( ! ( GetEnteringUnit() == udg_Thrall ) ) {
        return false;
    }
    if ( ! ( IsTriggerEnabled(GetTriggeringTrigger()) == true ) ) {
        return false;
    }
    return true;
}
bool Trig_S6_MoveMore_Done_Actions(bool testConds, bool runActions){
	if (testConds){
		if (!GAw3_Trig_S6_MoveMore_Done_Conditions()){
			return false;
		}
	}
	if (!runActions) {
		return true;
	}
    DisableTrigger( GetTriggeringTrigger() );
    CommentString( "Abort and prep next Q" );
    ConditionalTriggerExecute( gg_trg_S6_MoveMore_Abort );
    TriggerSleepAction( udg_ActAbortDoneDelay );
    QueuedTriggerAddBJ( gg_trg_R1_Rescue_Q, true );
    return true;
}
//===========================================================================
void InitTrig_S6_MoveMore_Done(){
    gg_trg_S6_MoveMore_Done = TriggerCreate( "Trig_S6_MoveMore_Done_Actions" );;
    TriggerRegisterEnterRectSimple( gg_trg_S6_MoveMore_Done, gg_rct_Spot04 );
    TriggerRegisterEnterRectSimple( gg_trg_S6_MoveMore_Done, gg_rct_SpotBypass04A );
    TriggerRegisterEnterRectSimple( gg_trg_S6_MoveMore_Done, gg_rct_SpotBypass04B );
    TriggerRegisterEnterRectSimple( gg_trg_S6_MoveMore_Done, gg_rct_SpotBypass04C );
    TriggerRegisterEnterRectSimple( gg_trg_S6_MoveMore_Done, gg_rct_SpotBypass04D );
    GAw3_Trig_S6_MoveMore_Done_Conditions = Trig_S6_MoveMore_Done_Conditions;
}

//--------------------------------------------------------------------------------------------------
// Custom Script: Rescue Grunts
//--------------------------------------------------------------------------------------------------
//===========================================================================
// Trigger: R1 Rescue Q
//===========================================================================
boolean Trig_R1_Rescue_Q_Conditions(){
    if ( ! ( IsTriggerEnabled(GetTriggeringTrigger()) == true ) ) {
        return false;
    }
    if ( ! ( udg_GameOver == false ) ) {
        return false;
    }
    return true;
}
boolean Trig_R1_Rescue_Q_Func010001(){
    return ( IsTriggerEnabled(GetTriggeringTrigger()) == false );
}
boolean Trig_R1_Rescue_Q_Func014001(){
    return ( IsTriggerEnabled(GetTriggeringTrigger()) == false );
}
bool Trig_R1_Rescue_Q_Actions(bool testConds, bool runActions){
	if (testConds){
		if (!GAw3_Trig_R1_Rescue_Q_Conditions()){
			return false;
		}
	}
	if (!runActions) {
		return true;
	}
    CommentString( "Rescue a few grunts" );
    SmartCameraPanBJ( udg_APlayer01, GetRectCenter(gg_rct_Spot04), 0.5 );
    ConditionalTriggerExecute( gg_trg_R1_Rescue_Unhide );
    ConditionalTriggerExecute( gg_trg_R1_Rescue_Rescue );
    EnableTrigger( gg_trg_R2_GroupSelect_Done );
    SetSpeechVolumeGroupsBJ(  );
    CommentString( "Line" );
    TransmissionFromUnitWithNameBJ( GetPlayersAll(), udg_Thrall, "TRIGSTR_288", gg_snd_T01Thrall21, "TRIGSTR_289", bj_TIMETYPE_ADD, 0, false );
    WaitForSoundBJ( gg_snd_T01Thrall21, 0 );
    if ( Trig_R1_Rescue_Q_Func010001() ) {
		return true;
    }else{
        DoNothing(  );
    }
    CommentString( "Line" );
    TransmissionFromUnitTypeWithNameBJ( GetPlayersAll(), udg_APlayer01, 'ogru', "TRIGSTR_290", GetRectCenter(gg_rct_GruntMove1), gg_snd_T01Grunt22, "TRIGSTR_291", bj_TIMETYPE_ADD, 0, false );
    WaitForSoundBJ( gg_snd_T01Grunt22, 0 );
    if ( Trig_R1_Rescue_Q_Func014001() ) {
		return true;
    }else{
        DoNothing(  );
    }
    VolumeGroupResetBJ(  );
    CommentString( "Done" );
    QueuedTriggerRemoveBJ( GetTriggeringTrigger() );
    StartTimerBJ( udg_R1RescueTimer, false, 1.00 );
    return true;
}
//===========================================================================
void InitTrig_R1_Rescue_Q(){
    gg_trg_R1_Rescue_Q = TriggerCreate( "Trig_R1_Rescue_Q_Actions" );;
    GAw3_Trig_R1_Rescue_Q_Conditions = Trig_R1_Rescue_Q_Conditions;
}
//===========================================================================
// Trigger: R1 Rescue Unhide
//===========================================================================
boolean Trig_R1_Rescue_Unhide_Conditions(){
    if ( ! ( IsTriggerEnabled(GetTriggeringTrigger()) == true ) ) {
        return false;
    }
    return true;
}
void Trig_R1_Rescue_Unhide_Func002002(){
    ShowUnitShow( GetEnumUnit() );
}
bool Trig_R1_Rescue_Unhide_Actions(bool testConds, bool runActions){
	if (testConds){
		if (!GAw3_Trig_R1_Rescue_Unhide_Conditions()){
			return false;
		}
	}
	if (!runActions) {
		return true;
	}
    DisableTrigger( GetTriggeringTrigger() );
    ForGroup( udg_RescuableGrunts, Trig_R1_Rescue_Unhide_Func002002 );
    ShowUnitShow( udg_Grunt1 );
    ShowUnitShow( udg_Grunt2 );
    ShowUnitShow( udg_Grunt3 );
    return true;
}
//===========================================================================
void InitTrig_R1_Rescue_Unhide(){
    gg_trg_R1_Rescue_Unhide = TriggerCreate( "Trig_R1_Rescue_Unhide_Actions" );;
    GAw3_Trig_R1_Rescue_Unhide_Conditions = Trig_R1_Rescue_Unhide_Conditions;
}
//===========================================================================
// Trigger: R1 Rescue Rescue
//===========================================================================
boolean Trig_R1_Rescue_Rescue_Conditions(){
    if ( ! ( IsTriggerEnabled(GetTriggeringTrigger()) == true ) ) {
        return false;
    }
    return true;
}
void Trig_R1_Rescue_Rescue_Func003002(){
    RescueUnitBJ( GetEnumUnit(), udg_APlayer01, true );
}
bool Trig_R1_Rescue_Rescue_Actions(bool testConds, bool runActions){
	if (testConds){
		if (!GAw3_Trig_R1_Rescue_Rescue_Conditions()){
			return false;
		}
	}
	if (!runActions) {
		return true;
	}
    DisableTrigger( GetTriggeringTrigger() );
    ForGroup( udg_RescuableGrunts, Trig_R1_Rescue_Rescue_Func003002 );
    IssuePointOrderLocBJ( udg_Grunt1, "move", GetRectCenter(gg_rct_GruntMove1) );
    IssuePointOrderLocBJ( udg_Grunt2, "move", GetRectCenter(gg_rct_GruntMove2) );
    IssuePointOrderLocBJ( udg_Grunt3, "move", GetRectCenter(gg_rct_GruntMove3) );
    GroupAddGroup( udg_RescuableGrunts, udg_YourUnits );
    return true;
}
//===========================================================================
void InitTrig_R1_Rescue_Rescue(){
    gg_trg_R1_Rescue_Rescue = TriggerCreate( "Trig_R1_Rescue_Rescue_Actions" );;
    GAw3_Trig_R1_Rescue_Rescue_Conditions = Trig_R1_Rescue_Rescue_Conditions;
}
//===========================================================================
// Trigger: R1 Rescue Abort
//===========================================================================
bool Trig_R1_Rescue_Abort_Actions(bool testConds, bool runActions){
	if (testConds){
		if (!GAw3_Trig_R1_Rescue_Abort_Conditions()){
			return false;
		}
	}
	if (!runActions) {
		return true;
	}
    DisableTrigger( gg_trg_R1_Rescue_Q );
    CommentString( "Stop potentially playing sounds" );
    TriggerSleepAction( udg_ActAbortPreDelay );
    StopSoundBJ( gg_snd_T01Thrall21, true );
    StopSoundBJ( gg_snd_T01Grunt22, true );
    VolumeGroupResetBJ(  );
    CommentString( "Ensure that the Grunts are given" );
    ConditionalTriggerExecute( gg_trg_R1_Rescue_Unhide );
    ConditionalTriggerExecute( gg_trg_R1_Rescue_Rescue );
    CommentString( "Free the Q" );
    TriggerSleepAction( udg_ActAbortPostDelay );
    QueuedTriggerRemoveBJ( gg_trg_R1_Rescue_Q );
    return true;
}
//===========================================================================
void InitTrig_R1_Rescue_Abort(){
    gg_trg_R1_Rescue_Abort = TriggerCreate( "Trig_R1_Rescue_Abort_Actions" );;
}
//===========================================================================
// Trigger: R1 Rescue Done
//===========================================================================
boolean Trig_R1_Rescue_Done_Conditions(){
    if ( ! ( IsTriggerEnabled(GetTriggeringTrigger()) == true ) ) {
        return false;
    }
    return true;
}
bool Trig_R1_Rescue_Done_Actions(bool testConds, bool runActions){
	if (testConds){
		if (!GAw3_Trig_R1_Rescue_Done_Conditions()){
			return false;
		}
	}
	if (!runActions) {
		return true;
	}
    DisableTrigger( GetTriggeringTrigger() );
    CommentString( "Abort and prep next Q" );
    ConditionalTriggerExecute( gg_trg_R1_Rescue_Abort );
    TriggerSleepAction( udg_ActAbortDoneDelay );
    QueuedTriggerAddBJ( gg_trg_R2_GroupSelect_Q, true );
    return true;
}
//===========================================================================
void InitTrig_R1_Rescue_Done(){
    gg_trg_R1_Rescue_Done = TriggerCreate( "Trig_R1_Rescue_Done_Actions" );;
    TriggerRegisterTimerExpireEventBJ( gg_trg_R1_Rescue_Done, udg_R1RescueTimer );
    GAw3_Trig_R1_Rescue_Done_Conditions = Trig_R1_Rescue_Done_Conditions;
}
//===========================================================================
// Trigger: R2 GroupSelect Q
//===========================================================================
boolean Trig_R2_GroupSelect_Q_Conditions(){
    if ( ! ( IsTriggerEnabled(GetTriggeringTrigger()) == true ) ) {
        return false;
    }
    if ( ! ( udg_GameOver == false ) ) {
        return false;
    }
    return true;
}
boolean Trig_R2_GroupSelect_Q_Func005001(){
    return ( IsTriggerEnabled(GetTriggeringTrigger()) == false );
}
boolean Trig_R2_GroupSelect_Q_Func008001(){
    return ( IsTriggerEnabled(GetTriggeringTrigger()) == false );
}
boolean Trig_R2_GroupSelect_Q_Func012001(){
    return ( IsTriggerEnabled(GetTriggeringTrigger()) == false );
}
bool Trig_R2_GroupSelect_Q_Actions(bool testConds, bool runActions){
	if (testConds){
		if (!GAw3_Trig_R2_GroupSelect_Q_Conditions()){
			return false;
		}
	}
	if (!runActions) {
            return true;
	}
    SetSpeechVolumeGroupsBJ(  );
    CommentString( "Line" );
    TransmissionFromUnitTypeWithNameBJ( GetPlayersAll(), Player(2), udg_NarratorPortrait, "TRIGSTR_296", GetUnitLoc(udg_Thrall), gg_snd_T01Narrator2401, "TRIGSTR_297", bj_TIMETYPE_ADD, 0, false );
    WaitForSoundBJ( gg_snd_T01Narrator2401, 0 );
    if ( Trig_R2_GroupSelect_Q_Func005001() ) {
            return true;
    }else{
        DoNothing(  );
    }
    VolumeGroupResetBJ(  );
    TriggerSleepAction( 0.50 );
    if ( Trig_R2_GroupSelect_Q_Func008001() ) {
		return true;
    }else{
        DoNothing(  );
    }
    CommentString( "Hint" );
    ConditionalTriggerExecute( gg_trg_Hint_ClickDragSelect );
    TriggerSleepAction( udg_HintDelay );
    if ( Trig_R2_GroupSelect_Q_Func012001() ) {
        return true;
    }else{
        DoNothing(  );
    }
    CommentString( "Done" );
    QueuedTriggerRemoveBJ( GetTriggeringTrigger() );
    return true;
}
//===========================================================================
void InitTrig_R2_GroupSelect_Q(){
    gg_trg_R2_GroupSelect_Q = TriggerCreate( "Trig_R2_GroupSelect_Q_Actions" );;
    GAw3_Trig_R2_GroupSelect_Q_Conditions = Trig_R2_GroupSelect_Q_Conditions;
}
//===========================================================================
// Trigger: R2 GroupSelect Abort
//===========================================================================
bool Trig_R2_GroupSelect_Abort_Actions(bool testConds, bool runActions){
	if (testConds){
		if (!GAw3_Trig_R2_GroupSelect_Abort_Conditions()){
			return false;
		}
	}
	if (!runActions) {
		return true;
	}
    DisableTrigger( gg_trg_R2_GroupSelect_Q );
    CommentString( "Stop potentially playing sounds" );
    TriggerSleepAction( udg_ActAbortPreDelay );
    StopSoundBJ( gg_snd_T01Narrator2401, true );
    VolumeGroupResetBJ(  );
    CommentString( "Free the Q" );
    TriggerSleepAction( udg_ActAbortPostDelay );
    QueuedTriggerRemoveBJ( gg_trg_R2_GroupSelect_Q );
    return true;
}
//===========================================================================
void InitTrig_R2_GroupSelect_Abort(){
    gg_trg_R2_GroupSelect_Abort = TriggerCreate( "Trig_R2_GroupSelect_Abort_Actions" );;
}
//===========================================================================
// Trigger: R2 GroupSelect Done
//
// The "Units selected by player" function doesn't seem to include the unit being selected when responding to a unit selection event.
// Delaying the check for a brief moment allows the condition to succeed.
// The check is performed periodically, as well as upon unit selection, to account for cases where a unit's death results in the player having all units selected.
//===========================================================================
boolean Trig_R2_GroupSelect_Done_Conditions(){
    if ( ! ( IsTriggerEnabled(GetTriggeringTrigger()) == true ) ) {
        return false;
    }
    return true;
}
boolean Trig_R2_GroupSelect_Done_Func005001(){
    return ( CountUnitsInGroup(GetUnitsSelectedAll(udg_APlayer01)) < CountUnitsInGroup(udg_YourUnits) );
}
boolean Trig_R2_GroupSelect_Done_Func007001(){
    return ( IsTriggerEnabled(GetTriggeringTrigger()) == false );
}
bool Trig_R2_GroupSelect_Done_Actions(bool testConds, bool runActions){
	if (testConds){
		if (!GAw3_Trig_R2_GroupSelect_Done_Conditions()){
			return false;
		}
	}
	if (!runActions) {
		return true;
	}
    TriggerSleepAction( 0.01 );
    if ( Trig_R2_GroupSelect_Done_Func005001() ) {
        return true;
    }else{
        DoNothing(  );
    }
    CommentString( "All units are selected" );
    if ( Trig_R2_GroupSelect_Done_Func007001() ) {
        return true;
    }else{
        DoNothing(  );
    }
    DisableTrigger( GetTriggeringTrigger() );
    CommentString( "Abort and prep next Q" );
    ConditionalTriggerExecute( gg_trg_R2_GroupSelect_Abort );
    TriggerSleepAction( udg_ActAbortDoneDelay );
    QueuedTriggerAddBJ( gg_trg_R3_GroupMove_Q, true );
    return true;
}
//===========================================================================
void InitTrig_R2_GroupSelect_Done(){
    gg_trg_R2_GroupSelect_Done = TriggerCreate( "Trig_R2_GroupSelect_Done_Actions" );;
    DisableTrigger( gg_trg_R2_GroupSelect_Done );
    TriggerRegisterPlayerSelectionEventBJ( gg_trg_R2_GroupSelect_Done, Player(0), true );
    TriggerRegisterTimerEventPeriodic( gg_trg_R2_GroupSelect_Done, 0.40 );
    GAw3_Trig_R2_GroupSelect_Done_Conditions = Trig_R2_GroupSelect_Done_Conditions;
}
//===========================================================================
// Trigger: R3 GroupMove Q
//===========================================================================
boolean Trig_R3_GroupMove_Q_Conditions(){
    if ( ! ( IsTriggerEnabled(GetTriggeringTrigger()) == true ) ) {
        return false;
    }
    if ( ! ( udg_GameOver == false ) ) {
        return false;
    }
    return true;
}
boolean Trig_R3_GroupMove_Q_Func006001(){
    return ( IsTriggerEnabled(GetTriggeringTrigger()) == false );
}
boolean Trig_R3_GroupMove_Q_Func010001(){
    return ( IsTriggerEnabled(GetTriggeringTrigger()) == false );
}
bool Trig_R3_GroupMove_Q_Actions(bool testConds, bool runActions){
	if (testConds){
		if (!GAw3_Trig_R3_GroupMove_Q_Conditions()){
			return false;
		}
	}
	if (!runActions) {
		return true;
	}
    FogModifierStart( udg_Visibility05 );
    SetSpeechVolumeGroupsBJ(  );
    CommentString( "Line" );
    TransmissionFromUnitTypeWithNameBJ( GetPlayersAll(), Player(2), udg_NarratorPortrait, "TRIGSTR_303", GetUnitLoc(udg_Thrall), gg_snd_T01Narrator26, "TRIGSTR_304", bj_TIMETYPE_ADD, 0, false );
    WaitForSoundBJ( gg_snd_T01Narrator26, 2.00 );
    if ( Trig_R3_GroupMove_Q_Func006001() ) {
        return true;
    }else{
        DoNothing(  );
    }
    PingMinimapLocForForce( GetPlayersAll(), GetRectCenter(gg_rct_Spot05), udg_PingTime );
    SetCameraQuickPositionLocForPlayer( udg_APlayer01, GetRectCenter(gg_rct_Spot05) );
    WaitForSoundBJ( gg_snd_T01Narrator26, 0 );
    if ( Trig_R3_GroupMove_Q_Func010001() ) {
        return true;
    }else{
        DoNothing(  );
    }
    VolumeGroupResetBJ(  );
    CommentString( "Done" );
    QueuedTriggerRemoveBJ( GetTriggeringTrigger() );
    return true;
}
//===========================================================================
void InitTrig_R3_GroupMove_Q(){
    gg_trg_R3_GroupMove_Q = TriggerCreate( "Trig_R3_GroupMove_Q_Actions" );;
    GAw3_Trig_R3_GroupMove_Q_Conditions = Trig_R3_GroupMove_Q_Conditions;
}
//===========================================================================
// Trigger: R3 GroupMove Abort
//===========================================================================
bool Trig_R3_GroupMove_Abort_Actions(bool testConds, bool runActions){
	if (testConds){
		if (!GAw3_Trig_R3_GroupMove_Abort_Conditions()){
			return false;
		}
	}
	if (!runActions) {
		return true;
	}
    DisableTrigger( gg_trg_R3_GroupMove_Q );
    CommentString( "Stop potentially playing sounds" );
    TriggerSleepAction( udg_ActAbortPreDelay );
    StopSoundBJ( gg_snd_T01Narrator26, true );
    VolumeGroupResetBJ(  );
    PlaySoundBJ( udg_GoodJobSound );
    FogModifierStop( udg_Visibility05 );
    SetDoodadAnimationRectBJ( "death", 'LOo2', gg_rct_Spot05 );
    SetUnitColor( udg_Circle05, GetPlayerColor(Player(PLAYER_NEUTRAL_PASSIVE)) );
    CommentString( "Free the Q" );
    TriggerSleepAction( udg_ActAbortPostDelay );
    QueuedTriggerRemoveBJ( gg_trg_R3_GroupMove_Q );
    return true;
}
//===========================================================================
void InitTrig_R3_GroupMove_Abort(){
    gg_trg_R3_GroupMove_Abort = TriggerCreate( "Trig_R3_GroupMove_Abort_Actions" );;
}
//===========================================================================
// Trigger: R3 GroupMove Done
//===========================================================================
boolean Trig_R3_GroupMove_Done_Conditions(){
    if ( ! ( GetOwningPlayer(GetEnteringUnit()) == udg_APlayer01 ) ) {
        return false;
    }
    if ( ! ( IsTriggerEnabled(GetTriggeringTrigger()) == true ) ) {
        return false;
    }
    return true;
}
bool Trig_R3_GroupMove_Done_Actions(bool testConds, bool runActions){
	if (testConds){
		if (!GAw3_Trig_R3_GroupMove_Done_Conditions()){
			return false;
		}
	}
	if (!runActions) {
		return true;
	}
    DisableTrigger( GetTriggeringTrigger() );
    CommentString( "Abort and prep next Q" );
    ConditionalTriggerExecute( gg_trg_R3_GroupMove_Abort );
    TriggerSleepAction( udg_ActAbortDoneDelay );
    QueuedTriggerAddBJ( gg_trg_A1_SingleGnoll_Q, true );
    return true;
}
//===========================================================================
void InitTrig_R3_GroupMove_Done(){
    gg_trg_R3_GroupMove_Done = TriggerCreate( "Trig_R3_GroupMove_Done_Actions" );;
    TriggerRegisterEnterRectSimple( gg_trg_R3_GroupMove_Done, gg_rct_Spot05 );
    TriggerRegisterEnterRectSimple( gg_trg_R3_GroupMove_Done, gg_rct_SpotBypass05A );
    TriggerRegisterEnterRectSimple( gg_trg_R3_GroupMove_Done, gg_rct_SpotBypass05B );
    GAw3_Trig_R3_GroupMove_Done_Conditions = Trig_R3_GroupMove_Done_Conditions;
}

//--------------------------------------------------------------------------------------------------
// Custom Script: Attacking Gnolls
//--------------------------------------------------------------------------------------------------
//===========================================================================
// Trigger: A1 SingleGnoll Q
//===========================================================================
boolean Trig_A1_SingleGnoll_Q_Conditions(){
    if ( ! ( IsTriggerEnabled(GetTriggeringTrigger()) == true ) ) {
        return false;
    }
    if ( ! ( udg_GameOver == false ) ) {
        return false;
    }
    return true;
}
boolean Trig_A1_SingleGnoll_Q_Func006001(){
    return ( IsTriggerEnabled(GetTriggeringTrigger()) == false );
}
boolean Trig_A1_SingleGnoll_Q_Func010001(){
    return ( IsTriggerEnabled(GetTriggeringTrigger()) == false );
}
boolean Trig_A1_SingleGnoll_Q_Func014001(){
    return ( IsTriggerEnabled(GetTriggeringTrigger()) == false );
}
boolean Trig_A1_SingleGnoll_Q_Func019001(){
    return ( IsTriggerEnabled(GetTriggeringTrigger()) == false );
}
bool Trig_A1_SingleGnoll_Q_Actions(bool testConds, bool runActions){
	if (testConds){
		if (!GAw3_Trig_A1_SingleGnoll_Q_Conditions()){
			return false;
		}
	}
	if (!runActions) {
		return true;
	}
    FogModifierStart( udg_Visibility06 );
    SetSpeechVolumeGroupsBJ(  );
    CommentString( "Line" );
    ConditionalTriggerExecute( gg_trg_A1_SingleGnoll_OptLine );
    WaitForSoundBJ( gg_snd_T01Thrall28, 1.50 );
    if ( Trig_A1_SingleGnoll_Q_Func006001() ) {
        return true;
    }else{
        DoNothing(  );
    }
    PingMinimapLocForForce( GetPlayersAll(), GetRectCenter(gg_rct_Spot06), udg_PingTime );
    SetCameraQuickPositionLocForPlayer( udg_APlayer01, GetRectCenter(gg_rct_Spot06) );
    WaitForSoundBJ( gg_snd_T01Thrall28, 0.00 );
    if ( Trig_A1_SingleGnoll_Q_Func010001() ) {
        return true;
    }else{
        DoNothing(  );
    }
    CommentString( "Line" );
    TransmissionFromUnitTypeWithNameBJ( GetPlayersAll(), Player(2), udg_NarratorPortrait, "TRIGSTR_309", GetUnitLoc(udg_Thrall), gg_snd_T01Narrator30, "TRIGSTR_310", bj_TIMETYPE_ADD, 0, false );
    WaitForSoundBJ( gg_snd_T01Narrator30, 0 );
    if ( Trig_A1_SingleGnoll_Q_Func014001() ) {
        return true;
    }else{
        DoNothing(  );
    }
    VolumeGroupResetBJ(  );
    CommentString( "Hint" );
    ConditionalTriggerExecute( gg_trg_Hint_RightClickAttack );
    TriggerSleepAction( udg_HintDelay );
    if ( Trig_A1_SingleGnoll_Q_Func019001() ) {
        return true;
    }else{
        DoNothing(  );
    }
    CommentString( "Done" );
    QueuedTriggerRemoveBJ( GetTriggeringTrigger() );
    return true;
}
//===========================================================================
void InitTrig_A1_SingleGnoll_Q(){
    gg_trg_A1_SingleGnoll_Q = TriggerCreate( "Trig_A1_SingleGnoll_Q_Actions" );;
    GAw3_Trig_A1_SingleGnoll_Q_Conditions = Trig_A1_SingleGnoll_Q_Conditions;
}
//===========================================================================
// Trigger: A1 SingleGnoll OptLine
//===========================================================================
boolean Trig_A1_SingleGnoll_OptLine_Conditions(){
    if ( ! ( DistanceBetweenPoints(GetUnitLoc(udg_Thrall), GetRectCenter(gg_rct_SpeakingAnchor05)) < udg_SpeakingDistance ) ) {
        return false;
    }
    return true;
}
bool Trig_A1_SingleGnoll_OptLine_Actions(bool testConds, bool runActions){
	if (testConds){
		if (!GAw3_Trig_A1_SingleGnoll_OptLine_Conditions()){
			return false;
		}
	}
	if (!runActions) {
		return true;
	}
    TransmissionFromUnitWithNameBJ( GetPlayersAll(), udg_Thrall, "TRIGSTR_447", gg_snd_T01Thrall28, "TRIGSTR_448", bj_TIMETYPE_ADD, 0, false );
    return true;
}
//===========================================================================
void InitTrig_A1_SingleGnoll_OptLine(){
    gg_trg_A1_SingleGnoll_OptLine = TriggerCreate( "Trig_A1_SingleGnoll_OptLine_Actions" );;
    GAw3_Trig_A1_SingleGnoll_OptLine_Conditions = Trig_A1_SingleGnoll_OptLine_Conditions;
}
//===========================================================================
// Trigger: A1 SingleGnoll Abort
//===========================================================================
bool Trig_A1_SingleGnoll_Abort_Actions(bool testConds, bool runActions){
	if (testConds){
		if (!GAw3_Trig_A1_SingleGnoll_Abort_Conditions()){
			return false;
		}
	}
	if (!runActions) {
		return true;
	}
    DisableTrigger( gg_trg_A1_SingleGnoll_Q );
    CommentString( "Stop potentially playing sounds" );
    TriggerSleepAction( udg_ActAbortPreDelay );
    StopSoundBJ( gg_snd_T01Thrall28, true );
    StopSoundBJ( gg_snd_T01Narrator30, true );
    VolumeGroupResetBJ(  );
    PlaySoundBJ( udg_GoodJobSound );
    FogModifierStop( udg_Visibility06 );
    CommentString( "Free the Q" );
    TriggerSleepAction( udg_ActAbortPostDelay );
    QueuedTriggerRemoveBJ( gg_trg_A1_SingleGnoll_Q );
    return true;
}
//===========================================================================
void InitTrig_A1_SingleGnoll_Abort(){
    gg_trg_A1_SingleGnoll_Abort = TriggerCreate( "Trig_A1_SingleGnoll_Abort_Actions" );;
}
//===========================================================================
// Trigger: A1 SingleGnoll DoneA
//===========================================================================
boolean Trig_A1_SingleGnoll_DoneA_Conditions(){
    if ( ! ( IsTriggerEnabled(GetTriggeringTrigger()) == true ) ) {
        return false;
    }
    return true;
}
bool Trig_A1_SingleGnoll_DoneA_Actions(bool testConds, bool runActions){
	if (testConds){
		if (!GAw3_Trig_A1_SingleGnoll_DoneA_Conditions()){
			return false;
		}
	}
	if (!runActions) {
		return true;
	}
    DisableTrigger( gg_trg_A1_SingleGnoll_DoneA );
    DisableTrigger( gg_trg_A1_SingleGnoll_DoneB );
    CommentString( "Abort and prep next Q" );
    ConditionalTriggerExecute( gg_trg_A1_SingleGnoll_Abort );
    TriggerSleepAction( udg_ActAbortDoneDelay );
    QueuedTriggerAddBJ( gg_trg_A2_MoreGnolls_Q, true );
    return true;
}
//===========================================================================
void InitTrig_A1_SingleGnoll_DoneA(){
    gg_trg_A1_SingleGnoll_DoneA = TriggerCreate( "Trig_A1_SingleGnoll_DoneA_Actions" );;
    TriggerRegisterUnitEvent( gg_trg_A1_SingleGnoll_DoneA, gg_unit_ngno_0060, EVENT_UNIT_DEATH );
    GAw3_Trig_A1_SingleGnoll_DoneA_Conditions = Trig_A1_SingleGnoll_DoneA_Conditions;
}
//===========================================================================
// Trigger: A1 SingleGnoll DoneB
//===========================================================================
boolean Trig_A1_SingleGnoll_DoneB_Conditions(){
    if ( ! ( GetOwningPlayer(GetEnteringUnit()) == udg_APlayer01 ) ) {
        return false;
    }
    if ( ! ( IsTriggerEnabled(GetTriggeringTrigger()) == true ) ) {
        return false;
    }
    return true;
}
bool Trig_A1_SingleGnoll_DoneB_Actions(bool testConds, bool runActions){
	if (testConds){
		if (!GAw3_Trig_A1_SingleGnoll_DoneB_Conditions()){
			return false;
		}
	}
	if (!runActions) {
		return true;
	}
    DisableTrigger( gg_trg_A1_SingleGnoll_DoneA );
    DisableTrigger( gg_trg_A1_SingleGnoll_DoneB );
    CommentString( "Abort and prep next Q" );
    ConditionalTriggerExecute( gg_trg_A1_SingleGnoll_Abort );
    TriggerSleepAction( udg_ActAbortDoneDelay );
    QueuedTriggerAddBJ( gg_trg_A2_MoreGnolls_Q, true );
    return true;
}
//===========================================================================
void InitTrig_A1_SingleGnoll_DoneB(){
    gg_trg_A1_SingleGnoll_DoneB = TriggerCreate( "Trig_A1_SingleGnoll_DoneB_Actions" );;
    TriggerRegisterEnterRectSimple( gg_trg_A1_SingleGnoll_DoneB, gg_rct_SpotBypass06A );
    TriggerRegisterEnterRectSimple( gg_trg_A1_SingleGnoll_DoneB, gg_rct_SpotBypass06B );
    GAw3_Trig_A1_SingleGnoll_DoneB_Conditions = Trig_A1_SingleGnoll_DoneB_Conditions;
}
//===========================================================================
// Trigger: A2 MoreGnolls Q
//===========================================================================
boolean Trig_A2_MoreGnolls_Q_Conditions(){
    if ( ! ( IsTriggerEnabled(GetTriggeringTrigger()) == true ) ) {
        return false;
    }
    if ( ! ( udg_GameOver == false ) ) {
        return false;
    }
    return true;
}
boolean Trig_A2_MoreGnolls_Q_Func006001(){
    return ( IsTriggerEnabled(GetTriggeringTrigger()) == false );
}
boolean Trig_A2_MoreGnolls_Q_Func010001(){
    return ( IsTriggerEnabled(GetTriggeringTrigger()) == false );
}
boolean Trig_A2_MoreGnolls_Q_Func014001(){
    return ( IsTriggerEnabled(GetTriggeringTrigger()) == false );
}
boolean Trig_A2_MoreGnolls_Q_Func019001(){
    return ( IsTriggerEnabled(GetTriggeringTrigger()) == false );
}
bool Trig_A2_MoreGnolls_Q_Actions(bool testConds, bool runActions){
	if (testConds){
		if (!GAw3_Trig_A2_MoreGnolls_Q_Conditions()){
			return false;
		}
	}
	if (!runActions) {
		return true;
	}
    FogModifierStart( udg_Visibility07 );
    SetSpeechVolumeGroupsBJ(  );
    CommentString( "Line" );
    ConditionalTriggerExecute( gg_trg_A2_MoreGnolls_OptLine );
    WaitForSoundBJ( gg_snd_T01Thrall31, 1.00 );
    if ( Trig_A2_MoreGnolls_Q_Func006001() ) {
        return true;
    }else{
        DoNothing(  );
    }
    PingMinimapLocForForce( GetPlayersAll(), GetRectCenter(gg_rct_Spot07), udg_PingTime );
    SetCameraQuickPositionLocForPlayer( udg_APlayer01, GetRectCenter(gg_rct_Spot07) );
    WaitForSoundBJ( gg_snd_T01Thrall31, 0 );
    if ( Trig_A2_MoreGnolls_Q_Func010001() ) {
        return true;
    }else{
        DoNothing(  );
    }
    CommentString( "Line" );
    TransmissionFromUnitTypeWithNameBJ( GetPlayersAll(), Player(2), udg_NarratorPortrait, "TRIGSTR_457", GetUnitLoc(udg_Thrall), gg_snd_T01Narrator32, "TRIGSTR_458", bj_TIMETYPE_ADD, 0, false );
    WaitForSoundBJ( gg_snd_T01Narrator32, 0 );
    if ( Trig_A2_MoreGnolls_Q_Func014001() ) {
        return true;
    }else{
        DoNothing(  );
    }
    VolumeGroupResetBJ(  );
    CommentString( "Hint" );
    ConditionalTriggerExecute( gg_trg_Hint_AttackMove );
    TriggerSleepAction( udg_HintDelay );
    if ( Trig_A2_MoreGnolls_Q_Func019001() ) {
        return true;
    }else{
        DoNothing(  );
    }
    CommentString( "Done" );
    QueuedTriggerRemoveBJ( GetTriggeringTrigger() );
    return true;
}
//===========================================================================
void InitTrig_A2_MoreGnolls_Q(){
    gg_trg_A2_MoreGnolls_Q = TriggerCreate( "Trig_A2_MoreGnolls_Q_Actions" );;
    GAw3_Trig_A2_MoreGnolls_Q_Conditions = Trig_A2_MoreGnolls_Q_Conditions;
}
//===========================================================================
// Trigger: A2 MoreGnolls OptLine
//===========================================================================
boolean Trig_A2_MoreGnolls_OptLine_Conditions(){
    if ( ! ( DistanceBetweenPoints(GetUnitLoc(udg_Thrall), GetRectCenter(gg_rct_SpeakingAnchor06)) < udg_SpeakingDistance ) ) {
        return false;
    }
    return true;
}
bool Trig_A2_MoreGnolls_OptLine_Actions(bool testConds, bool runActions){
	if (testConds){
		if (!GAw3_Trig_A2_MoreGnolls_OptLine_Conditions()){
			return false;
		}
	}
	if (!runActions) {
		return true;
	}
    TransmissionFromUnitWithNameBJ( GetPlayersAll(), udg_Thrall, "TRIGSTR_449", gg_snd_T01Thrall31, "TRIGSTR_450", bj_TIMETYPE_ADD, 0, false );
    return true;
}
//===========================================================================
void InitTrig_A2_MoreGnolls_OptLine(){
    gg_trg_A2_MoreGnolls_OptLine = TriggerCreate( "Trig_A2_MoreGnolls_OptLine_Actions" );;
    GAw3_Trig_A2_MoreGnolls_OptLine_Conditions = Trig_A2_MoreGnolls_OptLine_Conditions;
}
//===========================================================================
// Trigger: A2 MoreGnolls Abort
//===========================================================================
bool Trig_A2_MoreGnolls_Abort_Actions(bool testConds, bool runActions){
	if (testConds){
		if (!GAw3_Trig_A2_MoreGnolls_Abort_Conditions()){
			return false;
		}
	}
	if (!runActions) {
		return true;
	}
    DisableTrigger( gg_trg_A2_MoreGnolls_Q );
    CommentString( "Stop potentially playing sounds" );
    TriggerSleepAction( udg_ActAbortPreDelay );
    StopSoundBJ( gg_snd_T01Thrall31, true );
    StopSoundBJ( gg_snd_T01Narrator32, true );
    VolumeGroupResetBJ(  );
    FogModifierStop( udg_Visibility07 );
    SetHeroLevel( udg_Thrall, 2, true );
    EnableTrigger( gg_trg_H3_SpendPoint_Done );
    CommentString( "Free the Q" );
    TriggerSleepAction( udg_ActAbortPostDelay );
    QueuedTriggerRemoveBJ( gg_trg_A2_MoreGnolls_Q );
    return true;
}
//===========================================================================
void InitTrig_A2_MoreGnolls_Abort(){
    gg_trg_A2_MoreGnolls_Abort = TriggerCreate( "Trig_A2_MoreGnolls_Abort_Actions" );;
}
//===========================================================================
// Trigger: A2 MoreGnolls Done
//===========================================================================
boolean Trig_A2_MoreGnolls_Done_Conditions(){
    Wait(0.625,0);
    if ( ! ( IsUnitGroupDeadBJ(udg_GnollGroup) == true ) ) {
        return false;
    }
    if ( ! ( IsTriggerEnabled(GetTriggeringTrigger()) == true ) ) {
        return false;
    }
    return true;
}
bool Trig_A2_MoreGnolls_Done_Actions(bool testConds, bool runActions){
	if (testConds){
		if (!GAw3_Trig_A2_MoreGnolls_Done_Conditions()){
			return false;
		}
	}
	if (!runActions) {
		return true;
	}
    DisableTrigger( GetTriggeringTrigger() );
    CommentString( "Abort and prep next Q" );
    ConditionalTriggerExecute( gg_trg_A2_MoreGnolls_Abort );
    TriggerSleepAction( udg_ActAbortDoneDelay );
    QueuedTriggerAddBJ( gg_trg_H1_HeroLevel_Q, true );
    return true;
}
//===========================================================================
void InitTrig_A2_MoreGnolls_Done(){
    gg_trg_A2_MoreGnolls_Done = TriggerCreate( "Trig_A2_MoreGnolls_Done_Actions" );;
    TriggerRegisterPlayerUnitEventSimple( gg_trg_A2_MoreGnolls_Done, Player(PLAYER_NEUTRAL_AGGRESSIVE), EVENT_PLAYER_UNIT_DEATH );
    GAw3_Trig_A2_MoreGnolls_Done_Conditions = Trig_A2_MoreGnolls_Done_Conditions;
}
//===========================================================================
// Trigger: AutoAttack Event
//===========================================================================
boolean Trig_AutoAttack_Event_Conditions(){
    if ( ! ( GetOwningPlayer(GetAttacker()) == udg_APlayer01 ) ) {
        return false;
    }
    if ( ! ( udg_GameOver == false ) ) {
        return false;
    }
    return true;
}
bool Trig_AutoAttack_Event_Actions(bool testConds, bool runActions){
	if (testConds){
		if (!GAw3_Trig_AutoAttack_Event_Conditions()){
			return false;
		}
	}
	if (!runActions) {
		return true;
	}
    DisableTrigger( GetTriggeringTrigger() );
    QueuedTriggerAddBJ( gg_trg_AutoAttack_Q, true );
    return true;
}
//===========================================================================
void InitTrig_AutoAttack_Event(){
    gg_trg_AutoAttack_Event = TriggerCreate( "Trig_AutoAttack_Event_Actions" );;
    TriggerRegisterUnitEvent( gg_trg_AutoAttack_Event, gg_unit_ngno_0027, EVENT_UNIT_ATTACKED );
    TriggerRegisterUnitEvent( gg_trg_AutoAttack_Event, gg_unit_ngno_0028, EVENT_UNIT_ATTACKED );
    TriggerRegisterUnitEvent( gg_trg_AutoAttack_Event, gg_unit_ngna_0029, EVENT_UNIT_ATTACKED );
    GAw3_Trig_AutoAttack_Event_Conditions = Trig_AutoAttack_Event_Conditions;
}
//===========================================================================
// Trigger: AutoAttack Q
//===========================================================================
boolean Trig_AutoAttack_Q_Conditions(){
    if ( ! ( IsTriggerEnabled(GetTriggeringTrigger()) == true ) ) {
        return false;
    }
    if ( ! ( udg_GameOver == false ) ) {
        return false;
    }
    return true;
}
boolean Trig_AutoAttack_Q_Func006001(){
    return ( IsTriggerEnabled(GetTriggeringTrigger()) == false );
}
bool Trig_AutoAttack_Q_Actions(bool testConds, bool runActions){
	if (testConds){
		if (!GAw3_Trig_AutoAttack_Q_Conditions()){
			return false;
		}
	}
	if (!runActions) {
		return true;
	}
    CommentString( "Hint" );
    ConditionalTriggerExecute( gg_trg_Hint_AutoAttack );
    TriggerSleepAction( udg_HintDelay );
    if ( Trig_AutoAttack_Q_Func006001() ) {
        return true;
    }else{
        DoNothing(  );
    }
    CommentString( "Done" );
    QueuedTriggerRemoveBJ( GetTriggeringTrigger() );
    return true;
}
//===========================================================================
void InitTrig_AutoAttack_Q(){
    gg_trg_AutoAttack_Q = TriggerCreate( "Trig_AutoAttack_Q_Actions" );;
    GAw3_Trig_AutoAttack_Q_Conditions = Trig_AutoAttack_Q_Conditions;
}

//--------------------------------------------------------------------------------------------------
// Custom Script: Hero Info
//--------------------------------------------------------------------------------------------------
//===========================================================================
// Trigger: H1 HeroLevel Q
//===========================================================================
boolean Trig_H1_HeroLevel_Q_Conditions(){
    if ( ! ( IsTriggerEnabled(GetTriggeringTrigger()) == true ) ) {
        return false;
    }
    if ( ! ( udg_GameOver == false ) ) {
        return false;
    }
    return true;
}
boolean Trig_H1_HeroLevel_Q_Func002001(){
    return ( IsTriggerEnabled(GetTriggeringTrigger()) == false );
}
boolean Trig_H1_HeroLevel_Q_Func007001(){
    return ( IsTriggerEnabled(GetTriggeringTrigger()) == false );
}
bool Trig_H1_HeroLevel_Q_Actions(bool testConds, bool runActions){
	if (testConds){
		if (!GAw3_Trig_H1_HeroLevel_Q_Conditions()){
			return false;
		}
	}
	if (!runActions) {
		return true;
	}
    TriggerSleepAction( 0.50 );
    if ( Trig_H1_HeroLevel_Q_Func002001() ) {
        return true;
    }else{
        DoNothing(  );
    }
    SetSpeechVolumeGroupsBJ(  );
    CommentString( "Line" );
    TransmissionFromUnitTypeWithNameBJ( GetPlayersAll(), Player(2), udg_NarratorPortrait, "TRIGSTR_325", GetUnitLoc(udg_Thrall), gg_snd_T01Narrator33, "TRIGSTR_326", bj_TIMETYPE_ADD, 0, false );
    WaitForSoundBJ( gg_snd_T01Narrator33, 0 );
    if ( Trig_H1_HeroLevel_Q_Func007001() ) {
        return true;
    }else{
        DoNothing(  );
    }
    VolumeGroupResetBJ(  );
    CommentString( "Done" );
    QueuedTriggerRemoveBJ( GetTriggeringTrigger() );
    StartTimerBJ( udg_H1HeroLevelTimer, false, 0.10 );
    return true;
}
//===========================================================================
void InitTrig_H1_HeroLevel_Q(){
    gg_trg_H1_HeroLevel_Q = TriggerCreate( "Trig_H1_HeroLevel_Q_Actions" );;
    GAw3_Trig_H1_HeroLevel_Q_Conditions = Trig_H1_HeroLevel_Q_Conditions;
}
//===========================================================================
// Trigger: H1 HeroLevel Abort
//===========================================================================
bool Trig_H1_HeroLevel_Abort_Actions(bool testConds, bool runActions){
	if (testConds){
		if (!GAw3_Trig_H1_HeroLevel_Abort_Conditions()){
			return false;
		}
	}
	if (!runActions) {
		return true;
	}
    DisableTrigger( gg_trg_H1_HeroLevel_Q );
    CommentString( "Stop potentially playing sounds" );
    TriggerSleepAction( udg_ActAbortPreDelay );
    StopSoundBJ( gg_snd_T01Narrator33, true );
    VolumeGroupResetBJ(  );
    CommentString( "Free the Q" );
    TriggerSleepAction( udg_ActAbortPostDelay );
    QueuedTriggerRemoveBJ( gg_trg_H1_HeroLevel_Q );
    return true;
}
//===========================================================================
void InitTrig_H1_HeroLevel_Abort(){
    gg_trg_H1_HeroLevel_Abort = TriggerCreate( "Trig_H1_HeroLevel_Abort_Actions" );;
}
//===========================================================================
// Trigger: H1 HeroLevel DoneA
//===========================================================================
boolean Trig_H1_HeroLevel_DoneA_Conditions(){
    if ( ! ( IsTriggerEnabled(GetTriggeringTrigger()) == true ) ) {
        return false;
    }
    return true;
}
bool Trig_H1_HeroLevel_DoneA_Actions(bool testConds, bool runActions){
	if (testConds){
		if (!GAw3_Trig_H1_HeroLevel_DoneA_Conditions()){
			return false;
		}
	}
	if (!runActions) {
		return true;
	}
    DisableTrigger( gg_trg_H1_HeroLevel_DoneA );
    DisableTrigger( gg_trg_H1_HeroLevel_DoneB );
    DisableTrigger( gg_trg_H1_HeroLevel_DoneC );
    CommentString( "Abort and prep next Q" );
    ConditionalTriggerExecute( gg_trg_H1_HeroLevel_Abort );
    TriggerSleepAction( udg_ActAbortDoneDelay );
    QueuedTriggerAddBJ( gg_trg_H2_HeroPoints_Q, true );
    return true;
}
//===========================================================================
void InitTrig_H1_HeroLevel_DoneA(){
    gg_trg_H1_HeroLevel_DoneA = TriggerCreate( "Trig_H1_HeroLevel_DoneA_Actions" );;
    TriggerRegisterTimerExpireEventBJ( gg_trg_H1_HeroLevel_DoneA, udg_H1HeroLevelTimer );
    GAw3_Trig_H1_HeroLevel_DoneA_Conditions = Trig_H1_HeroLevel_DoneA_Conditions;
}
//===========================================================================
// Trigger: H1 HeroLevel DoneB
//===========================================================================
boolean Trig_H1_HeroLevel_DoneB_Conditions(){
    if ( ! ( udg_HeroPointsAvailable > 0 ) ) {
        return false;
    }
    if ( ! ( IsTriggerEnabled(GetTriggeringTrigger()) == true ) ) {
        return false;
    }
    return true;
}
bool Trig_H1_HeroLevel_DoneB_Actions(bool testConds, bool runActions){
	if (testConds){
		if (!GAw3_Trig_H1_HeroLevel_DoneB_Conditions()){
			return false;
		}
	}
	if (!runActions) {
		return true;
	}
    DisableTrigger( gg_trg_H1_HeroLevel_DoneA );
    DisableTrigger( gg_trg_H1_HeroLevel_DoneB );
    DisableTrigger( gg_trg_H1_HeroLevel_DoneC );
    CommentString( "Abort and prep next Q" );
    ConditionalTriggerExecute( gg_trg_H1_HeroLevel_Abort );
    TriggerSleepAction( udg_ActAbortDoneDelay );
    QueuedTriggerAddBJ( gg_trg_H2_HeroPoints_Q, true );
    return true;
}
//===========================================================================
void InitTrig_H1_HeroLevel_DoneB(){
    gg_trg_H1_HeroLevel_DoneB = TriggerCreate( "Trig_H1_HeroLevel_DoneB_Actions" );;
    TriggerRegisterShowSkillEventBJ( gg_trg_H1_HeroLevel_DoneB );
    GAw3_Trig_H1_HeroLevel_DoneB_Conditions = Trig_H1_HeroLevel_DoneB_Conditions;
}
//===========================================================================
// Trigger: H1 HeroLevel DoneC
//
// This alternate "Done" trigger allows users to bypass H1, H2, H3 if they are quick enough and know what they are doing.
//===========================================================================
boolean Trig_H1_HeroLevel_DoneC_Conditions(){
    if ( ! ( GetLearnedSkillBJ() == 'AOcl' ) ) {
        
        return false;
    }
    if ( ! ( IsTriggerEnabled(GetTriggeringTrigger()) == true ) ) {
        
        return false;
    }
    return true;
}
bool Trig_H1_HeroLevel_DoneC_Actions(bool testConds, bool runActions){
	if (testConds){
		if (!GAw3_Trig_H1_HeroLevel_DoneC_Conditions()){
			return false;
		}
	}
	if (!runActions) {
		return true;
	}
    DisableTrigger( gg_trg_H1_HeroLevel_DoneA );
    DisableTrigger( gg_trg_H1_HeroLevel_DoneB );
    DisableTrigger( gg_trg_H1_HeroLevel_DoneC );
    CommentString( "Abort and prep next Q" );
    ConditionalTriggerExecute( gg_trg_H1_HeroLevel_Abort );
    TriggerSleepAction( udg_ActAbortDoneDelay );
    QueuedTriggerAddBJ( gg_trg_H2_HeroPoints_Q, true );
    return true;
}
//===========================================================================
void InitTrig_H1_HeroLevel_DoneC(){
    gg_trg_H1_HeroLevel_DoneC = TriggerCreate( "Trig_H1_HeroLevel_DoneC_Actions" );;
    TriggerRegisterPlayerUnitEventSimple( gg_trg_H1_HeroLevel_DoneC, Player(0), EVENT_PLAYER_HERO_SKILL );
    GAw3_Trig_H1_HeroLevel_DoneC_Conditions = Trig_H1_HeroLevel_DoneC_Conditions;
}
//===========================================================================
// Trigger: H2 HeroPoints Q
//===========================================================================
boolean Trig_H2_HeroPoints_Q_Conditions(){
    if ( ! ( IsTriggerEnabled(GetTriggeringTrigger()) == true ) ) {
        return false;
    }
    if ( ! ( udg_GameOver == false ) ) {
        return false;
    }
    return true;
}
boolean Trig_H2_HeroPoints_Q_Func005001(){
    return ( IsTriggerEnabled(GetTriggeringTrigger()) == false );
}
boolean Trig_H2_HeroPoints_Q_Func009001(){
    return ( IsTriggerEnabled(GetTriggeringTrigger()) == false );
}
boolean Trig_H2_HeroPoints_Q_Func014001(){
    return ( IsTriggerEnabled(GetTriggeringTrigger()) == false );
}
bool Trig_H2_HeroPoints_Q_Actions(bool testConds, bool runActions){
	if (testConds){
		if (!GAw3_Trig_H2_HeroPoints_Q_Conditions()){
			return false;
		}
	}
	if (!runActions) {
		return true;
	}
    SetSpeechVolumeGroupsBJ(  );
    CommentString( "Line" );
    TransmissionFromUnitTypeWithNameBJ( GetPlayersAll(), Player(2), udg_NarratorPortrait, "TRIGSTR_331", GetUnitLoc(udg_Thrall), gg_snd_T01Narrator35, "TRIGSTR_332", bj_TIMETYPE_ADD, 0, false );
    WaitForSoundBJ( gg_snd_T01Narrator35, 0 );
    if ( Trig_H2_HeroPoints_Q_Func005001() ) {
        return true;
    }else{
        DoNothing(  );
    }
    CommentString( "Line" );
    TransmissionFromUnitTypeWithNameBJ( GetPlayersAll(), Player(2), udg_NarratorPortrait, "TRIGSTR_333", GetUnitLoc(udg_Thrall), gg_snd_T01Narrator36, "TRIGSTR_334", bj_TIMETYPE_ADD, 0, false );
    WaitForSoundBJ( gg_snd_T01Narrator36, 0 );
    if ( Trig_H2_HeroPoints_Q_Func009001() ) {
        return true;
    }else{
        DoNothing(  );
    }
    VolumeGroupResetBJ(  );
    CommentString( "Hint" );
    ConditionalTriggerExecute( gg_trg_Hint_HeroIcon );
    TriggerSleepAction( udg_HintDelay );
    if ( Trig_H2_HeroPoints_Q_Func014001() ) {
        return true;
    }else{
        DoNothing(  );
    }
    CommentString( "Done" );
    QueuedTriggerRemoveBJ( GetTriggeringTrigger() );
    return true;
}
//===========================================================================
void InitTrig_H2_HeroPoints_Q(){
    gg_trg_H2_HeroPoints_Q = TriggerCreate( "Trig_H2_HeroPoints_Q_Actions" );;
    GAw3_Trig_H2_HeroPoints_Q_Conditions = Trig_H2_HeroPoints_Q_Conditions;
}
//===========================================================================
// Trigger: H2 HeroPoints Abort
//===========================================================================
bool Trig_H2_HeroPoints_Abort_Actions(bool testConds, bool runActions){
	if (testConds){
		if (!GAw3_Trig_H2_HeroPoints_Abort_Conditions()){
			return false;
		}
	}
	if (!runActions) {
		return true;
	}
    DisableTrigger( gg_trg_H2_HeroPoints_Q );
    CommentString( "Stop potentially playing sounds" );
    TriggerSleepAction( udg_ActAbortPreDelay );
    StopSoundBJ( gg_snd_T01Narrator35, true );
    StopSoundBJ( gg_snd_T01Narrator36, true );
    VolumeGroupResetBJ(  );
    CommentString( "Free the Q" );
    TriggerSleepAction( udg_ActAbortPostDelay );
    QueuedTriggerRemoveBJ( gg_trg_H2_HeroPoints_Q );
    return true;
}
//===========================================================================
void InitTrig_H2_HeroPoints_Abort(){
    gg_trg_H2_HeroPoints_Abort = TriggerCreate( "Trig_H2_HeroPoints_Abort_Actions" );;
}
//===========================================================================
// Trigger: H2 HeroPoints DoneA
//===========================================================================
boolean Trig_H2_HeroPoints_DoneA_Conditions(){
    if ( ! ( udg_HeroPointsAvailable > 0 ) ) {
        return false;
    }
    if ( ! ( IsTriggerEnabled(GetTriggeringTrigger()) == true ) ) {
        return false;
    }
    return true;
}
bool Trig_H2_HeroPoints_DoneA_Actions(bool testConds, bool runActions){
	if (testConds){
		if (!GAw3_Trig_H2_HeroPoints_DoneA_Conditions()){
			return false;
		}
	}
	if (!runActions) {
		return true;
	}
    DisableTrigger( gg_trg_H2_HeroPoints_DoneA );
    DisableTrigger( gg_trg_H2_HeroPoints_DoneB );
    CommentString( "Abort and prep next Q" );
    ConditionalTriggerExecute( gg_trg_H2_HeroPoints_Abort );
    TriggerSleepAction( udg_ActAbortDoneDelay );
    QueuedTriggerAddBJ( gg_trg_H3_SpendPoint_Q, true );
    return true;
}
//===========================================================================
void InitTrig_H2_HeroPoints_DoneA(){
    gg_trg_H2_HeroPoints_DoneA = TriggerCreate( "Trig_H2_HeroPoints_DoneA_Actions" );;
    TriggerRegisterShowSkillEventBJ( gg_trg_H2_HeroPoints_DoneA );
    GAw3_Trig_H2_HeroPoints_DoneA_Conditions = Trig_H2_HeroPoints_DoneA_Conditions;
}
//===========================================================================
// Trigger: H2 HeroPoints DoneB
//
// This alternate "Done" trigger allows users to bypass H2, H3 if they are quick enough and know what they are doing.
//===========================================================================
boolean Trig_H2_HeroPoints_DoneB_Conditions(){
    if ( ! ( GetLearnedSkillBJ() == 'AOcl' ) ) {
        
        return false;
    }
    if ( ! ( IsTriggerEnabled(GetTriggeringTrigger()) == true ) ) {
        
        return false;
    }
    return true;
}
bool Trig_H2_HeroPoints_DoneB_Actions(bool testConds, bool runActions){
	if (testConds){
		if (!GAw3_Trig_H2_HeroPoints_DoneB_Conditions()){
			return false;
		}
	}
	if (!runActions) {
		return true;
	}
    DisableTrigger( gg_trg_H2_HeroPoints_DoneA );
    DisableTrigger( gg_trg_H2_HeroPoints_DoneB );
    CommentString( "Abort and prep next Q" );
    ConditionalTriggerExecute( gg_trg_H2_HeroPoints_Abort );
    TriggerSleepAction( udg_ActAbortDoneDelay );
    QueuedTriggerAddBJ( gg_trg_H3_SpendPoint_Q, true );
    return true;
}
//===========================================================================
void InitTrig_H2_HeroPoints_DoneB(){
    gg_trg_H2_HeroPoints_DoneB = TriggerCreate( "Trig_H2_HeroPoints_DoneB_Actions" );;
    TriggerRegisterPlayerUnitEventSimple( gg_trg_H2_HeroPoints_DoneB, Player(0), EVENT_PLAYER_HERO_SKILL );
    GAw3_Trig_H2_HeroPoints_DoneB_Conditions = Trig_H2_HeroPoints_DoneB_Conditions;
}
//===========================================================================
// Trigger: H3 SpendPoint Q
//===========================================================================
boolean Trig_H3_SpendPoint_Q_Conditions(){
    if ( ! ( IsTriggerEnabled(GetTriggeringTrigger()) == true ) ) {
        return false;
    }
    if ( ! ( udg_GameOver == false ) ) {
        return false;
    }
    return true;
}
boolean Trig_H3_SpendPoint_Q_Func005001(){
    return ( IsTriggerEnabled(GetTriggeringTrigger()) == false );
}
boolean Trig_H3_SpendPoint_Q_Func009001(){
    return ( IsTriggerEnabled(GetTriggeringTrigger()) == false );
}
bool Trig_H3_SpendPoint_Q_Actions(bool testConds, bool runActions){
	if (testConds){
		if (!GAw3_Trig_H3_SpendPoint_Q_Conditions()){
			return false;
		}
	}
	if (!runActions) {
		return true;
	}
    SetSpeechVolumeGroupsBJ(  );
    CommentString( "Line" );
    TransmissionFromUnitTypeWithNameBJ( GetPlayersAll(), Player(2), udg_NarratorPortrait, "TRIGSTR_341", GetUnitLoc(udg_Thrall), gg_snd_T01Narrator37, "TRIGSTR_342", bj_TIMETYPE_ADD, 0, false );
    WaitForSoundBJ( gg_snd_T01Narrator37, 0 );
    if ( Trig_H3_SpendPoint_Q_Func005001() ) {
        return true;
    }else{
        DoNothing(  );
    }
    CommentString( "Line" );
    TransmissionFromUnitTypeWithNameBJ( GetPlayersAll(), Player(2), udg_NarratorPortrait, "TRIGSTR_343", GetUnitLoc(udg_Thrall), gg_snd_T01Narrator3801, "TRIGSTR_344", bj_TIMETYPE_ADD, 0, false );
    WaitForSoundBJ( gg_snd_T01Narrator3801, 0 );
    if ( Trig_H3_SpendPoint_Q_Func009001() ) {
        return true;
    }else{
        DoNothing(  );
    }
    VolumeGroupResetBJ(  );
    CommentString( "Done" );
    QueuedTriggerRemoveBJ( GetTriggeringTrigger() );
    return true;
}
//===========================================================================
void InitTrig_H3_SpendPoint_Q(){
    gg_trg_H3_SpendPoint_Q = TriggerCreate( "Trig_H3_SpendPoint_Q_Actions" );;
    GAw3_Trig_H3_SpendPoint_Q_Conditions = Trig_H3_SpendPoint_Q_Conditions;
}
//===========================================================================
// Trigger: H3 SpendPoint Abort
//===========================================================================
bool Trig_H3_SpendPoint_Abort_Actions(bool testConds, bool runActions){
	if (testConds){
		if (!GAw3_Trig_H3_SpendPoint_Abort_Conditions()){
			return false;
		}
	}
	if (!runActions) {
		return true;
	}
    DisableTrigger( gg_trg_H3_SpendPoint_Q );
    CommentString( "Stop potentially playing sounds" );
    TriggerSleepAction( udg_ActAbortPreDelay );
    StopSoundBJ( gg_snd_T01Narrator37, true );
    StopSoundBJ( gg_snd_T01Narrator3801, true );
    VolumeGroupResetBJ(  );
    CommentString( "Free the Q" );
    TriggerSleepAction( udg_ActAbortPostDelay );
    QueuedTriggerRemoveBJ( gg_trg_H3_SpendPoint_Q );
    return true;
}
//===========================================================================
void InitTrig_H3_SpendPoint_Abort(){
    gg_trg_H3_SpendPoint_Abort = TriggerCreate( "Trig_H3_SpendPoint_Abort_Actions" );;
}
//===========================================================================
// Trigger: H3 SpendPoint Done
//===========================================================================
boolean Trig_H3_SpendPoint_Done_Conditions(){
    if ( ! ( GetLearnedSkillBJ() == 'AOcl' ) ) {
        
        return false;
    }
    if ( ! ( IsTriggerEnabled(GetTriggeringTrigger()) == true ) ) {
        
        return false;
    }
    return true;
}
bool Trig_H3_SpendPoint_Done_Actions(bool testConds, bool runActions){
	if (testConds){
		if (!GAw3_Trig_H3_SpendPoint_Done_Conditions()){
			return false;
		}
	}
	if (!runActions) {
		return true;
	}
    DisableTrigger( GetTriggeringTrigger() );
    CommentString( "Abort and prep next Q" );
    ConditionalTriggerExecute( gg_trg_H3_SpendPoint_Abort );
    udg_H_SpendPointDone = true;
    return true;
}
//===========================================================================
void InitTrig_H3_SpendPoint_Done(){
    gg_trg_H3_SpendPoint_Done = TriggerCreate( "Trig_H3_SpendPoint_Done_Actions" );;
    TriggerRegisterPlayerUnitEventSimple( gg_trg_H3_SpendPoint_Done, Player(0), EVENT_PLAYER_HERO_SKILL );
    GAw3_Trig_H3_SpendPoint_Done_Conditions = Trig_H3_SpendPoint_Done_Conditions;
}

//--------------------------------------------------------------------------------------------------
// Custom Script: Murlocs
//--------------------------------------------------------------------------------------------------
//===========================================================================
// Trigger: M1 FoundMurlocs Event
//===========================================================================
boolean Trig_M1_FoundMurlocs_Event_Conditions(){
    if ( ! ( IsTriggerEnabled(GetTriggeringTrigger()) == true ) ) {
        return false;
    }
    if ( ! ( udg_GameOver == false ) ) {
        return false;
    }
    return true;
}
bool Trig_M1_FoundMurlocs_Event_Actions(bool testConds, bool runActions){
	if (testConds){
		if (!GAw3_Trig_M1_FoundMurlocs_Event_Conditions()){
			return false;
		}
	}
	if (!runActions) {
		return true;
	}
    DisableTrigger( GetTriggeringTrigger() );
    QueuedTriggerAddBJ( gg_trg_M1_FoundMurlocs_Q, true );
    return true;
}
//===========================================================================
void InitTrig_M1_FoundMurlocs_Event(){
    gg_trg_M1_FoundMurlocs_Event = TriggerCreate( "Trig_M1_FoundMurlocs_Event_Actions" );;
    TriggerRegisterEnterRectSimple( gg_trg_M1_FoundMurlocs_Event, gg_rct_SpotTripwire08A );
    TriggerRegisterEnterRectSimple( gg_trg_M1_FoundMurlocs_Event, gg_rct_SpotTripwire08B );
    TriggerRegisterEnterRectSimple( gg_trg_M1_FoundMurlocs_Event, gg_rct_SpotTripwire08C );
    GAw3_Trig_M1_FoundMurlocs_Event_Conditions = Trig_M1_FoundMurlocs_Event_Conditions;
}
//===========================================================================
// Trigger: M1 FoundMurlocs Q
//===========================================================================
boolean Trig_M1_FoundMurlocs_Q_Conditions(){
    if ( ! ( IsTriggerEnabled(GetTriggeringTrigger()) == true ) ) {
        return false;
    }
    if ( ! ( udg_GameOver == false ) ) {
        return false;
    }
    return true;
}
boolean Trig_M1_FoundMurlocs_Q_Func007001(){
    return ( IsTriggerEnabled(GetTriggeringTrigger()) == false );
}
boolean Trig_M1_FoundMurlocs_Q_Func011001(){
    return ( IsTriggerEnabled(GetTriggeringTrigger()) == false );
}
bool Trig_M1_FoundMurlocs_Q_Actions(bool testConds, bool runActions){
	if (testConds){
		if (!GAw3_Trig_M1_FoundMurlocs_Q_Conditions()){
			return false;
		}
	}
	if (!runActions) {
		return true;
	}
    FogModifierStop( udg_Visibility07 );
    FogModifierStart( udg_Visibility08 );
    SetSpeechVolumeGroupsBJ(  );
    CommentString( "Line" );
    TransmissionFromUnitTypeWithNameBJ( GetPlayersAll(), udg_APlayer01, 'ogru', "TRIGSTR_349", GetRectCenter(gg_rct_Spot08), gg_snd_T01Grunt39, "TRIGSTR_350", bj_TIMETYPE_ADD, 0, false );
    TriggerSleepAction( 1.30 );
    if ( Trig_M1_FoundMurlocs_Q_Func007001() ) {
        return true;
    }else{
        DoNothing(  );
    }
    PingMinimapLocForForce( GetPlayersAll(), GetRectCenter(gg_rct_Spot08), udg_PingTime );
    SetCameraQuickPositionLocForPlayer( udg_APlayer01, GetRectCenter(gg_rct_Spot08) );
    WaitForSoundBJ( gg_snd_T01Grunt39, 0 );
    if ( Trig_M1_FoundMurlocs_Q_Func011001() ) {
        return true;
    }else{
        DoNothing(  );
    }
    VolumeGroupResetBJ(  );
    CommentString( "Done" );
    QueuedTriggerRemoveBJ( GetTriggeringTrigger() );
    udg_M_FoundMurlocsDone = true;
    return true;
}
//===========================================================================
void InitTrig_M1_FoundMurlocs_Q(){
    gg_trg_M1_FoundMurlocs_Q = TriggerCreate( "Trig_M1_FoundMurlocs_Q_Actions" );;
    GAw3_Trig_M1_FoundMurlocs_Q_Conditions = Trig_M1_FoundMurlocs_Q_Conditions;
}
//===========================================================================
// Trigger: M1 FoundMurlocs Abort
//===========================================================================
bool Trig_M1_FoundMurlocs_Abort_Actions(bool testConds, bool runActions){
	if (testConds){
		if (!GAw3_Trig_M1_FoundMurlocs_Abort_Conditions()){
			return false;
		}
	}
	if (!runActions) {
		return true;
	}
    DisableTrigger( gg_trg_M1_FoundMurlocs_Q );
    CommentString( "Stop potentially playing sounds" );
    TriggerSleepAction( udg_ActAbortPreDelay );
    StopSoundBJ( gg_snd_T01Grunt39, true );
    VolumeGroupResetBJ(  );
    FogModifierStop( udg_Visibility08 );
    CommentString( "Free the Q" );
    TriggerSleepAction( udg_ActAbortPostDelay );
    QueuedTriggerRemoveBJ( gg_trg_M1_FoundMurlocs_Q );
    return true;
}
//===========================================================================
void InitTrig_M1_FoundMurlocs_Abort(){
    gg_trg_M1_FoundMurlocs_Abort = TriggerCreate( "Trig_M1_FoundMurlocs_Abort_Actions" );;
}
//===========================================================================
// Trigger: M1 FoundMurlocs Done
//===========================================================================
boolean Trig_M1_FoundMurlocs_Done_Conditions(){
    Wait(0.625,0);
    if ( ! ( IsUnitGroupDeadBJ(udg_MurlocGroup) == true ) ) {
        return false;
    }
    if ( ! ( IsTriggerEnabled(GetTriggeringTrigger()) == true ) ) {
        return false;
    }
    return true;
}
bool Trig_M1_FoundMurlocs_Done_Actions(bool testConds, bool runActions){
	if (testConds){
		if (!GAw3_Trig_M1_FoundMurlocs_Done_Conditions()){
			return false;
		}
	}
	if (!runActions) {
		return true;
	}
    DisableTrigger( GetTriggeringTrigger() );
    CommentString( "Abort and prep next Q" );
    ConditionalTriggerExecute( gg_trg_M1_FoundMurlocs_Abort );
    TriggerSleepAction( udg_ActAbortDoneDelay );
    QueuedTriggerAddBJ( gg_trg_I1_PickUpItem_Q, true );
    CreateItemLoc( 'pman', GetUnitLoc(GetDyingUnit()) );
    udg_M_FoundMurlocsDone = true;
    return true;
}
//===========================================================================
void InitTrig_M1_FoundMurlocs_Done(){
    gg_trg_M1_FoundMurlocs_Done = TriggerCreate( "Trig_M1_FoundMurlocs_Done_Actions" );;
    TriggerRegisterPlayerUnitEventSimple( gg_trg_M1_FoundMurlocs_Done, Player(PLAYER_NEUTRAL_AGGRESSIVE), EVENT_PLAYER_UNIT_DEATH );
    GAw3_Trig_M1_FoundMurlocs_Done_Conditions = Trig_M1_FoundMurlocs_Done_Conditions;
}
//===========================================================================
// Trigger: M2 UseChainLit Event
//
// Only queue up the "Use Chain Lightning" narration if the player has found the murlocs and has spent his skill point.
// This should work even if the player spends his skill point mid-combat with the murlocs.
//===========================================================================
boolean Trig_M2_UseChainLit_Event_Conditions(){
    if ( ! ( udg_H_SpendPointDone == true ) ) {
        return false;
    }
    if ( ! ( udg_M_FoundMurlocsDone == true ) ) {
        return false;
    }
    if ( ! ( IsTriggerEnabled(GetTriggeringTrigger()) == true ) ) {
        return false;
    }
    if ( ! ( udg_GameOver == false ) ) {
        return false;
    }
    return true;
}
bool Trig_M2_UseChainLit_Event_Actions(bool testConds, bool runActions){
	if (testConds){
		if (!GAw3_Trig_M2_UseChainLit_Event_Conditions()){
			return false;
		}
	}
	if (!runActions) {
		return true;
	}
    DisableTrigger( GetTriggeringTrigger() );
    QueuedTriggerAddBJ( gg_trg_M2_UseChainLit_Q, true );
    return true;
}
//===========================================================================
void InitTrig_M2_UseChainLit_Event(){
    gg_trg_M2_UseChainLit_Event = TriggerCreate( "Trig_M2_UseChainLit_Event_Actions" );;
    TriggerRegisterTimerEventPeriodic( gg_trg_M2_UseChainLit_Event, 0.20 );
    GAw3_Trig_M2_UseChainLit_Event_Conditions = Trig_M2_UseChainLit_Event_Conditions;
}
//===========================================================================
// Trigger: M2 UseChainLit Q
//===========================================================================
boolean Trig_M2_UseChainLit_Q_Conditions(){
    if ( ! ( IsTriggerEnabled(GetTriggeringTrigger()) == true ) ) {
        return false;
    }
    if ( ! ( udg_GameOver == false ) ) {
        return false;
    }
    return true;
}
boolean Trig_M2_UseChainLit_Q_Func007001(){
    return ( IsTriggerEnabled(GetTriggeringTrigger()) == false );
}
bool Trig_M2_UseChainLit_Q_Actions(bool testConds, bool runActions){
	if (testConds){
		if (!GAw3_Trig_M2_UseChainLit_Q_Conditions()){
			return false;
		}
	}
	if (!runActions) {
		return true;
	}
    CommentString( "Ensure that the user has enough mana to cast Chain Lightning at least once." );
    SetUnitManaBJ( udg_Thrall, RMaxBJ(140.00, GetUnitStateSwap(UNIT_STATE_MANA, udg_Thrall)) );
    SetSpeechVolumeGroupsBJ(  );
    CommentString( "Line" );
    TransmissionFromUnitTypeWithNameBJ( GetPlayersAll(), Player(2), udg_NarratorPortrait, "TRIGSTR_385", GetUnitLoc(udg_Thrall), gg_snd_T01Narrator40, "TRIGSTR_386", bj_TIMETYPE_ADD, 0, false );
    WaitForSoundBJ( gg_snd_T01Narrator40, 0 );
    if ( Trig_M2_UseChainLit_Q_Func007001() ) {
        return true;
    }else{
        DoNothing(  );
    }
    VolumeGroupResetBJ(  );
    CommentString( "Done" );
    QueuedTriggerRemoveBJ( GetTriggeringTrigger() );
    return true;
}
//===========================================================================
void InitTrig_M2_UseChainLit_Q(){
    gg_trg_M2_UseChainLit_Q = TriggerCreate( "Trig_M2_UseChainLit_Q_Actions" );;
    GAw3_Trig_M2_UseChainLit_Q_Conditions = Trig_M2_UseChainLit_Q_Conditions;
}
//===========================================================================
// Trigger: M2 UseChainLit Abort
//===========================================================================
bool Trig_M2_UseChainLit_Abort_Actions(bool testConds, bool runActions){
	if (testConds){
		if (!GAw3_Trig_M2_UseChainLit_Abort_Conditions()){
			return false;
		}
	}
	if (!runActions) {
		return true;
	}
    DisableTrigger( gg_trg_M2_UseChainLit_Q );
    CommentString( "Stop potentially playing sounds" );
    TriggerSleepAction( udg_ActAbortPreDelay );
    StopSoundBJ( gg_snd_T01Narrator40, true );
    VolumeGroupResetBJ(  );
    CommentString( "Free the Q" );
    TriggerSleepAction( udg_ActAbortPostDelay );
    QueuedTriggerRemoveBJ( gg_trg_M2_UseChainLit_Q );
    return true;
}
//===========================================================================
void InitTrig_M2_UseChainLit_Abort(){
    gg_trg_M2_UseChainLit_Abort = TriggerCreate( "Trig_M2_UseChainLit_Abort_Actions" );;
}
//===========================================================================
// Trigger: M2 UseChainLit Done
//===========================================================================
boolean Trig_M2_UseChainLit_Done_Conditions(){
    if ( ! ( IsUnitGroupDeadBJ(udg_MurlocGroup) == true ) ) {
        return false;
    }
    if ( ! ( IsTriggerEnabled(GetTriggeringTrigger()) == true ) ) {
        return false;
    }
    return true;
}
bool Trig_M2_UseChainLit_Done_Actions(bool testConds, bool runActions){
	if (testConds){
		if (!GAw3_Trig_M2_UseChainLit_Done_Conditions()){
			return false;
		}
	}
	if (!runActions) {
		return true;
	}
    DisableTrigger( GetTriggeringTrigger() );
    CommentString( "Abort and prep next Q" );
    ConditionalTriggerExecute( gg_trg_M2_UseChainLit_Abort );
    return true;
}
//===========================================================================
void InitTrig_M2_UseChainLit_Done(){
    gg_trg_M2_UseChainLit_Done = TriggerCreate( "Trig_M2_UseChainLit_Done_Actions" );;
    TriggerRegisterPlayerUnitEventSimple( gg_trg_M2_UseChainLit_Done, Player(PLAYER_NEUTRAL_AGGRESSIVE), EVENT_PLAYER_UNIT_DEATH );
    GAw3_Trig_M2_UseChainLit_Done_Conditions = Trig_M2_UseChainLit_Done_Conditions;
}

//--------------------------------------------------------------------------------------------------
// Custom Script: Item Drop
//--------------------------------------------------------------------------------------------------
//===========================================================================
// Trigger: I1 PickUpItem Q
//===========================================================================
boolean Trig_I1_PickUpItem_Q_Conditions(){
    if ( ! ( IsTriggerEnabled(GetTriggeringTrigger()) == true ) ) {
        return false;
    }
    if ( ! ( udg_GameOver == false ) ) {
        return false;
    }
    return true;
}
boolean Trig_I1_PickUpItem_Q_Func002001(){
    return ( IsTriggerEnabled(GetTriggeringTrigger()) == false );
}
boolean Trig_I1_PickUpItem_Q_Func007001(){
    return ( IsTriggerEnabled(GetTriggeringTrigger()) == false );
}
boolean Trig_I1_PickUpItem_Q_Func012001(){
    return ( IsTriggerEnabled(GetTriggeringTrigger()) == false );
}
bool Trig_I1_PickUpItem_Q_Actions(bool testConds, bool runActions){
	if (testConds){
		if (!GAw3_Trig_I1_PickUpItem_Q_Conditions()){
			return false;
		}
	}
	if (!runActions) {
		return true;
	}
    TriggerSleepAction( 0.50 );
    if ( Trig_I1_PickUpItem_Q_Func002001() ) {
        return true;
    }else{
        DoNothing(  );
    }
    SetSpeechVolumeGroupsBJ(  );
    CommentString( "Line" );
    TransmissionFromUnitTypeWithNameBJ( GetPlayersAll(), Player(2), udg_NarratorPortrait, "TRIGSTR_358", GetUnitLoc(udg_Thrall), gg_snd_T01Narrator41, "TRIGSTR_359", bj_TIMETYPE_ADD, 0, false );
    WaitForSoundBJ( gg_snd_T01Narrator41, 0 );
    if ( Trig_I1_PickUpItem_Q_Func007001() ) {
        return true;
    }else{
        DoNothing(  );
    }
    VolumeGroupResetBJ(  );
    CommentString( "Hint" );
    ConditionalTriggerExecute( gg_trg_Hint_PickUpItem );
    TriggerSleepAction( udg_HintDelay );
    if ( Trig_I1_PickUpItem_Q_Func012001() ) {
        return true;
    }else{
        DoNothing(  );
    }
    CommentString( "Done" );
    QueuedTriggerRemoveBJ( GetTriggeringTrigger() );
    return true;
}
//===========================================================================
void InitTrig_I1_PickUpItem_Q(){
    gg_trg_I1_PickUpItem_Q = TriggerCreate( "Trig_I1_PickUpItem_Q_Actions" );;
    GAw3_Trig_I1_PickUpItem_Q_Conditions = Trig_I1_PickUpItem_Q_Conditions;
}
//===========================================================================
// Trigger: I1 PickUpItem Abort
//===========================================================================
bool Trig_I1_PickUpItem_Abort_Actions(bool testConds, bool runActions){
	if (testConds){
		if (!GAw3_Trig_I1_PickUpItem_Abort_Conditions()){
			return false;
		}
	}
	if (!runActions) {
		return true;
	}
    DisableTrigger( gg_trg_I1_PickUpItem_Q );
    CommentString( "Stop potentially playing sounds" );
    TriggerSleepAction( udg_ActAbortPreDelay );
    StopSoundBJ( gg_snd_T01Narrator41, true );
    VolumeGroupResetBJ(  );
    CommentString( "Free the Q" );
    TriggerSleepAction( udg_ActAbortPostDelay );
    QueuedTriggerRemoveBJ( gg_trg_I1_PickUpItem_Q );
    return true;
}
//===========================================================================
void InitTrig_I1_PickUpItem_Abort(){
    gg_trg_I1_PickUpItem_Abort = TriggerCreate( "Trig_I1_PickUpItem_Abort_Actions" );;
}
//===========================================================================
// Trigger: I1 PickUpItem Done
//===========================================================================
boolean Trig_I1_PickUpItem_Done_Conditions(){
    if ( ! ( GetItemTypeId(GetManipulatedItem()) == 'pman' ) ) {
        return false;
    }
    if ( ! ( IsTriggerEnabled(GetTriggeringTrigger()) == true ) ) {
        return false;
    }
    return true;
}
bool Trig_I1_PickUpItem_Done_Actions(bool testConds, bool runActions){
	if (testConds){
		if (!GAw3_Trig_I1_PickUpItem_Done_Conditions()){
			return false;
		}
	}
	if (!runActions) {
		return true;
	}
    DisableTrigger( GetTriggeringTrigger() );
    CommentString( "Abort and prep next Q" );
    ConditionalTriggerExecute( gg_trg_I1_PickUpItem_Abort );
    TriggerSleepAction( udg_ActAbortDoneDelay );
    QueuedTriggerAddBJ( gg_trg_I2_ManaPotion_Q, true );
    return true;
}
//===========================================================================
void InitTrig_I1_PickUpItem_Done(){
    gg_trg_I1_PickUpItem_Done = TriggerCreate( "Trig_I1_PickUpItem_Done_Actions" );;
    TriggerRegisterPlayerUnitEventSimple( gg_trg_I1_PickUpItem_Done, Player(0), EVENT_PLAYER_UNIT_PICKUP_ITEM );
    GAw3_Trig_I1_PickUpItem_Done_Conditions = Trig_I1_PickUpItem_Done_Conditions;
}
//===========================================================================
// Trigger: I2 ManaPotion Q
//===========================================================================
boolean Trig_I2_ManaPotion_Q_Conditions(){
    if ( ! ( IsTriggerEnabled(GetTriggeringTrigger()) == true ) ) {
        return false;
    }
    if ( ! ( udg_GameOver == false ) ) {
        return false;
    }
    return true;
}
boolean Trig_I2_ManaPotion_Q_Func005001(){
    return ( IsTriggerEnabled(GetTriggeringTrigger()) == false );
}
boolean Trig_I2_ManaPotion_Q_Func009001(){
    return ( IsTriggerEnabled(GetTriggeringTrigger()) == false );
}
boolean Trig_I2_ManaPotion_Q_Func014001(){
    return ( IsTriggerEnabled(GetTriggeringTrigger()) == false );
}
bool Trig_I2_ManaPotion_Q_Actions(bool testConds, bool runActions){
	if (testConds){
		if (!GAw3_Trig_I2_ManaPotion_Q_Conditions()){
			return false;
		}
	}
	if (!runActions) {
		return true;
	}
    SetSpeechVolumeGroupsBJ(  );
    CommentString( "Line" );
    TransmissionFromUnitTypeWithNameBJ( GetPlayersAll(), Player(2), udg_NarratorPortrait, "TRIGSTR_363", GetUnitLoc(udg_Thrall), gg_snd_T01Narrator43, "TRIGSTR_364", bj_TIMETYPE_ADD, 0, false );
    WaitForSoundBJ( gg_snd_T01Narrator43, 0 );
    if ( Trig_I2_ManaPotion_Q_Func005001() ) {
        return true;
    }else{
        DoNothing(  );
    }
    CommentString( "Line" );
    TransmissionFromUnitTypeWithNameBJ( GetPlayersAll(), Player(2), udg_NarratorPortrait, "TRIGSTR_366", GetUnitLoc(udg_Thrall), gg_snd_T01Narrator44, "TRIGSTR_367", bj_TIMETYPE_ADD, 0, false );
    WaitForSoundBJ( gg_snd_T01Narrator44, 0 );
    if ( Trig_I2_ManaPotion_Q_Func009001() ) {
        return true;
    }else{
        DoNothing(  );
    }
    VolumeGroupResetBJ(  );
    CommentString( "Hint" );
    ConditionalTriggerExecute( gg_trg_Hint_ItemTooltip );
    TriggerSleepAction( udg_HintDelay );
    if ( Trig_I2_ManaPotion_Q_Func014001() ) {
        return true;
    }else{
        DoNothing(  );
    }
    CommentString( "Done" );
    QueuedTriggerRemoveBJ( GetTriggeringTrigger() );
    udg_I_ManaPotionDone = true;
    return true;
}
//===========================================================================
void InitTrig_I2_ManaPotion_Q(){
    gg_trg_I2_ManaPotion_Q = TriggerCreate( "Trig_I2_ManaPotion_Q_Actions" );;
    GAw3_Trig_I2_ManaPotion_Q_Conditions = Trig_I2_ManaPotion_Q_Conditions;
}
//===========================================================================
// Trigger: I2 ManaPotion Abort
//===========================================================================
bool Trig_I2_ManaPotion_Abort_Actions(bool testConds, bool runActions){
	if (testConds){
		if (!GAw3_Trig_I2_ManaPotion_Abort_Conditions()){
			return false;
		}
	}
	if (!runActions) {
		return true;
	}
    DisableTrigger( gg_trg_I2_ManaPotion_Q );
    CommentString( "Stop potentially playing sounds" );
    TriggerSleepAction( udg_ActAbortPreDelay );
    StopSoundBJ( gg_snd_T01Narrator43, true );
    StopSoundBJ( gg_snd_T01Narrator44, true );
    VolumeGroupResetBJ(  );
    CommentString( "Free the Q" );
    TriggerSleepAction( udg_ActAbortPostDelay );
    QueuedTriggerRemoveBJ( gg_trg_I2_ManaPotion_Q );
    return true;
}
//===========================================================================
void InitTrig_I2_ManaPotion_Abort(){
    gg_trg_I2_ManaPotion_Abort = TriggerCreate( "Trig_I2_ManaPotion_Abort_Actions" );;
}
//===========================================================================
// Trigger: I2 ManaPotion Done
//===========================================================================
boolean Trig_I2_ManaPotion_Done_Conditions(){
    if ( ! ( GetItemTypeId(GetManipulatedItem()) == 'pman' ) ) {
        return false;
    }
    if ( ! ( GetManipulatingUnit() == udg_Thrall ) ) {
        return false;
    }
    if ( ! ( IsTriggerEnabled(GetTriggeringTrigger()) == true ) ) {
        return false;
    }
    return true;
}
bool Trig_I2_ManaPotion_Done_Actions(bool testConds, bool runActions){
	if (testConds){
		if (!GAw3_Trig_I2_ManaPotion_Done_Conditions()){
			return false;
		}
	}
	if (!runActions) {
		return true;
	}
    DisableTrigger( GetTriggeringTrigger() );
    CommentString( "Abort and prep next Q" );
    ConditionalTriggerExecute( gg_trg_I2_ManaPotion_Abort );
    udg_I_ManaPotionDone = true;
    return true;
}
//===========================================================================
void InitTrig_I2_ManaPotion_Done(){
    gg_trg_I2_ManaPotion_Done = TriggerCreate( "Trig_I2_ManaPotion_Done_Actions" );;
    TriggerRegisterPlayerUnitEventSimple( gg_trg_I2_ManaPotion_Done, Player(0), EVENT_PLAYER_UNIT_USE_ITEM );
    GAw3_Trig_I2_ManaPotion_Done_Conditions = Trig_I2_ManaPotion_Done_Conditions;
}
//===========================================================================
// Trigger: I3 LowMana Event
//===========================================================================
boolean Trig_I3_LowMana_Event_Conditions(){
    if ( ! ( udg_I_ManaPotionDone == true ) ) {
        return false;
    }
    if ( ! ( GetUnitStateSwap(UNIT_STATE_MANA, udg_Thrall) < 100.00 ) ) {
        return false;
    }
    if ( ! ( UnitHasItemOfTypeBJ(udg_Thrall, 'pman') == true ) ) {
        return false;
    }
    if ( ! ( udg_GameOver == false ) ) {
        return false;
    }
    return true;
}
bool Trig_I3_LowMana_Event_Actions(bool testConds, bool runActions){
	if (testConds){
		if (!GAw3_Trig_I3_LowMana_Event_Conditions()){
			return false;
		}
	}
	if (!runActions) {
		return true;
	}
    DisableTrigger( GetTriggeringTrigger() );
    QueuedTriggerAddBJ( gg_trg_I3_LowMana_Q, true );
    return true;
}
//===========================================================================
void InitTrig_I3_LowMana_Event(){
    gg_trg_I3_LowMana_Event = TriggerCreate( "Trig_I3_LowMana_Event_Actions" );;
    TriggerRegisterTimerEventPeriodic( gg_trg_I3_LowMana_Event, 0.50 );
    GAw3_Trig_I3_LowMana_Event_Conditions = Trig_I3_LowMana_Event_Conditions;
}
//===========================================================================
// Trigger: I3 LowMana Q
//===========================================================================
boolean Trig_I3_LowMana_Q_Conditions(){
    if ( ! ( IsTriggerEnabled(GetTriggeringTrigger()) == true ) ) {
        return false;
    }
    if ( ! ( udg_GameOver == false ) ) {
        return false;
    }
    return true;
}
boolean Trig_I3_LowMana_Q_Func005001(){
    return ( IsTriggerEnabled(GetTriggeringTrigger()) == false );
}
boolean Trig_I3_LowMana_Q_Func010001(){
    return ( IsTriggerEnabled(GetTriggeringTrigger()) == false );
}
bool Trig_I3_LowMana_Q_Actions(bool testConds, bool runActions){
	if (testConds){
		if (!GAw3_Trig_I3_LowMana_Q_Conditions()){
			return false;
		}
	}
	if (!runActions) {
		return true;
	}
    SetSpeechVolumeGroupsBJ(  );
    CommentString( "Line" );
    TransmissionFromUnitTypeWithNameBJ( GetPlayersAll(), Player(2), udg_NarratorPortrait, "TRIGSTR_391", GetUnitLoc(udg_Thrall), gg_snd_T01Narrator45, "TRIGSTR_392", bj_TIMETYPE_ADD, 0, false );
    WaitForSoundBJ( gg_snd_T01Narrator45, 0 );
    if ( Trig_I3_LowMana_Q_Func005001() ) {
        return true;
    }else{
        DoNothing(  );
    }
    VolumeGroupResetBJ(  );
    CommentString( "Hint" );
    ConditionalTriggerExecute( gg_trg_Hint_UseManaPotion );
    TriggerSleepAction( udg_HintDelay );
    if ( Trig_I3_LowMana_Q_Func010001() ) {
        return true;
    }else{
        DoNothing(  );
    }
    CommentString( "Done" );
    QueuedTriggerRemoveBJ( GetTriggeringTrigger() );
    return true;
}
//===========================================================================
void InitTrig_I3_LowMana_Q(){
    gg_trg_I3_LowMana_Q = TriggerCreate( "Trig_I3_LowMana_Q_Actions" );;
    GAw3_Trig_I3_LowMana_Q_Conditions = Trig_I3_LowMana_Q_Conditions;
}
//===========================================================================
// Trigger: I3 LowMana Abort
//===========================================================================
bool Trig_I3_LowMana_Abort_Actions(bool testConds, bool runActions){
	if (testConds){
		if (!GAw3_Trig_I3_LowMana_Abort_Conditions()){
			return false;
		}
	}
	if (!runActions) {
		return true;
	}
    DisableTrigger( gg_trg_I3_LowMana_Q );
    CommentString( "Stop potentially playing sounds" );
    TriggerSleepAction( udg_ActAbortPreDelay );
    StopSoundBJ( gg_snd_T01Narrator45, true );
    VolumeGroupResetBJ(  );
    CommentString( "Free the Q" );
    TriggerSleepAction( udg_ActAbortPostDelay );
    QueuedTriggerRemoveBJ( gg_trg_I3_LowMana_Q );
    return true;
}
//===========================================================================
void InitTrig_I3_LowMana_Abort(){
    gg_trg_I3_LowMana_Abort = TriggerCreate( "Trig_I3_LowMana_Abort_Actions" );;
}
//===========================================================================
// Trigger: I3 LowMana Done
//===========================================================================
boolean Trig_I3_LowMana_Done_Conditions(){
    if ( ! ( GetItemTypeId(GetManipulatedItem()) == 'pman' ) ) {
        return false;
    }
    if ( ! ( GetManipulatingUnit() == udg_Thrall ) ) {
        return false;
    }
    if ( ! ( IsTriggerEnabled(GetTriggeringTrigger()) == true ) ) {
        return false;
    }
    return true;
}
bool Trig_I3_LowMana_Done_Actions(bool testConds, bool runActions){
	if (testConds){
		if (!GAw3_Trig_I3_LowMana_Done_Conditions()){
			return false;
		}
	}
	if (!runActions) {
		return true;
	}
    DisableTrigger( GetTriggeringTrigger() );
    CommentString( "Abort and prep next Q" );
    ConditionalTriggerExecute( gg_trg_I3_LowMana_Abort );
    return true;
}
//===========================================================================
void InitTrig_I3_LowMana_Done(){
    gg_trg_I3_LowMana_Done = TriggerCreate( "Trig_I3_LowMana_Done_Actions" );;
    TriggerRegisterPlayerUnitEventSimple( gg_trg_I3_LowMana_Done, Player(0), EVENT_PLAYER_UNIT_USE_ITEM );
    GAw3_Trig_I3_LowMana_Done_Conditions = Trig_I3_LowMana_Done_Conditions;
}

//--------------------------------------------------------------------------------------------------
// Custom Script: Continue River
//--------------------------------------------------------------------------------------------------
//===========================================================================
// Trigger: C1 Continue Event
//===========================================================================
boolean Trig_C1_Continue_Event_Conditions(){
    if ( ! ( udg_I_ManaPotionDone == true ) ) {
        return false;
    }
    if ( ! ( IsTriggerEnabled(GetTriggeringTrigger()) == true ) ) {
        return false;
    }
    if ( ! ( udg_GameOver == false ) ) {
        return false;
    }
    return true;
}
bool Trig_C1_Continue_Event_Actions(bool testConds, bool runActions){
	if (testConds){
		if (!GAw3_Trig_C1_Continue_Event_Conditions()){
			return false;
		}
	}
	if (!runActions) {
		return true;
	}
    DisableTrigger( GetTriggeringTrigger() );
    FogModifierStop( udg_Visibility08 );
    TriggerSleepAction( 1.00 );
    QueuedTriggerAddBJ( gg_trg_C1_Continue_Q, true );
    return true;
}
//===========================================================================
void InitTrig_C1_Continue_Event(){
    gg_trg_C1_Continue_Event = TriggerCreate( "Trig_C1_Continue_Event_Actions" );;
    TriggerRegisterTimerEventPeriodic( gg_trg_C1_Continue_Event, 0.50 );
    GAw3_Trig_C1_Continue_Event_Conditions = Trig_C1_Continue_Event_Conditions;
}
//===========================================================================
// Trigger: C1 Continue Q
//===========================================================================
boolean Trig_C1_Continue_Q_Conditions(){
    if ( ! ( IsTriggerEnabled(GetTriggeringTrigger()) == true ) ) {
        return false;
    }
    if ( ! ( udg_GameOver == false ) ) {
        return false;
    }
    return true;
}
boolean Trig_C1_Continue_Q_Func008001(){
    return ( IsTriggerEnabled(GetTriggeringTrigger()) == false );
}
boolean Trig_C1_Continue_Q_Func011001(){
    return ( IsTriggerEnabled(GetTriggeringTrigger()) == false );
}
bool Trig_C1_Continue_Q_Actions(bool testConds, bool runActions){
	if (testConds){
		if (!GAw3_Trig_C1_Continue_Q_Conditions()){
			return false;
		}
	}
	if (!runActions) {
		return true;
	}
    PingMinimapLocForForce( GetPlayersAll(), GetRectCenter(gg_rct_Spot09), udg_PingTime );
    SetCameraQuickPositionLocForPlayer( udg_APlayer01, GetRectCenter(gg_rct_Spot09) );
    FogModifierStart( udg_Visibility09 );
    SetSpeechVolumeGroupsBJ(  );
    CommentString( "Line" );
    TransmissionFromUnitTypeWithNameBJ( GetPlayersAll(), Player(2), udg_NarratorPortrait, "TRIGSTR_373", GetUnitLoc(udg_Thrall), gg_snd_T01Narrator47, "TRIGSTR_374", bj_TIMETYPE_ADD, 0, false );
    WaitForSoundBJ( gg_snd_T01Narrator47, 1.00 );
    if ( Trig_C1_Continue_Q_Func008001() ) {
        return true;
    }else{
        DoNothing(  );
    }
    ConditionalTriggerExecute( gg_trg_C1_Continue_Ping );
    WaitForSoundBJ( gg_snd_T01Narrator47, 0 );
    if ( Trig_C1_Continue_Q_Func011001() ) {
        return true;
    }else{
        DoNothing(  );
    }
    VolumeGroupResetBJ(  );
    CommentString( "Done" );
    QueuedTriggerRemoveBJ( GetTriggeringTrigger() );
    return true;
}
//===========================================================================
void InitTrig_C1_Continue_Q(){
    gg_trg_C1_Continue_Q = TriggerCreate( "Trig_C1_Continue_Q_Actions" );;
    GAw3_Trig_C1_Continue_Q_Conditions = Trig_C1_Continue_Q_Conditions;
}
//===========================================================================
// Trigger: C1 Continue Ping
//===========================================================================
boolean Trig_C1_Continue_Ping_Conditions(){
    if ( ! ( IsTriggerEnabled(GetTriggeringTrigger()) == true ) ) {
        return false;
    }
    return true;
}
bool Trig_C1_Continue_Ping_Actions(bool testConds, bool runActions){
	if (testConds){
		if (!GAw3_Trig_C1_Continue_Ping_Conditions()){
			return false;
		}
	}
	if (!runActions) {
		return true;
	}
    DisableTrigger( GetTriggeringTrigger() );
    PingMinimapLocForForce( GetPlayersAll(), GetRectCenter(gg_rct_Spot09), udg_PingTime );
    SetCameraQuickPositionLocForPlayer( udg_APlayer01, GetRectCenter(gg_rct_Spot09) );
    return true;
}
//===========================================================================
void InitTrig_C1_Continue_Ping(){
    gg_trg_C1_Continue_Ping = TriggerCreate( "Trig_C1_Continue_Ping_Actions" );;
    GAw3_Trig_C1_Continue_Ping_Conditions = Trig_C1_Continue_Ping_Conditions;
}
//===========================================================================
// Trigger: C1 Continue Abort
//===========================================================================
bool Trig_C1_Continue_Abort_Actions(bool testConds, bool runActions){
	if (testConds){
		if (!GAw3_Trig_C1_Continue_Abort_Conditions()){
			return false;
		}
	}
	if (!runActions) {
		return true;
	}
    DisableTrigger( gg_trg_C1_Continue_Q );
    CommentString( "Stop potentially playing sounds" );
    TriggerSleepAction( udg_ActAbortPreDelay );
    StopSoundBJ( gg_snd_T01Narrator47, true );
    VolumeGroupResetBJ(  );
    FogModifierStop( udg_Visibility08 );
    FogModifierStart( udg_Visibility09 );
    ConditionalTriggerExecute( gg_trg_C1_Continue_Ping );
    CommentString( "Free the Q" );
    TriggerSleepAction( udg_ActAbortPostDelay );
    QueuedTriggerRemoveBJ( gg_trg_C1_Continue_Q );
    return true;
}
//===========================================================================
void InitTrig_C1_Continue_Abort(){
    gg_trg_C1_Continue_Abort = TriggerCreate( "Trig_C1_Continue_Abort_Actions" );;
}
//===========================================================================
// Trigger: C1 Continue Done
//===========================================================================
boolean Trig_C1_Continue_Done_Conditions(){
    if ( ! ( GetOwningPlayer(GetEnteringUnit()) == udg_APlayer01 ) ) {
        return false;
    }
    if ( ! ( IsTriggerEnabled(GetTriggeringTrigger()) == true ) ) {
        return false;
    }
    return true;
}
bool Trig_C1_Continue_Done_Actions(bool testConds, bool runActions){
	if (testConds){
		if (!GAw3_Trig_C1_Continue_Done_Conditions()){
			return false;
		}
	}
	if (!runActions) {
		return true;
	}
    DisableTrigger( GetTriggeringTrigger() );
    CommentString( "Abort and prep next Q" );
    ConditionalTriggerExecute( gg_trg_C1_Continue_Abort );
    return true;
}
//===========================================================================
void InitTrig_C1_Continue_Done(){
    gg_trg_C1_Continue_Done = TriggerCreate( "Trig_C1_Continue_Done_Actions" );;
    TriggerRegisterEnterRectSimple( gg_trg_C1_Continue_Done, gg_rct_SpotBypass08A );
    TriggerRegisterEnterRectSimple( gg_trg_C1_Continue_Done, gg_rct_SpotBypass08B );
    GAw3_Trig_C1_Continue_Done_Conditions = Trig_C1_Continue_Done_Conditions;
}

//--------------------------------------------------------------------------------------------------
// Custom Script: Nightfall
//--------------------------------------------------------------------------------------------------
//===========================================================================
// Trigger: N1 Nightfall Event
//===========================================================================
boolean Trig_N1_Nightfall_Event_Conditions(){
    if ( ! ( GetOwningPlayer(GetEnteringUnit()) == udg_APlayer01 ) ) {
        return false;
    }
    if ( ! ( IsTriggerEnabled(GetTriggeringTrigger()) == true ) ) {
        return false;
    }
    if ( ! ( udg_GameOver == false ) ) {
        return false;
    }
    return true;
}
bool Trig_N1_Nightfall_Event_Actions(bool testConds, bool runActions){
	if (testConds){
		if (!GAw3_Trig_N1_Nightfall_Event_Conditions()){
			return false;
		}
	}
	if (!runActions) {
		return true;
	}
    DisableTrigger( GetTriggeringTrigger() );
    PlaySoundBJ( udg_GoodJobSound );
    FogModifierStop( udg_Visibility09 );
    SetDoodadAnimationRectBJ( "death", 'LOo2', gg_rct_Spot09 );
    SetUnitColor( udg_Circle09, GetPlayerColor(Player(PLAYER_NEUTRAL_PASSIVE)) );
    QueuedTriggerAddBJ( gg_trg_N1_Nightfall_Q, true );
    return true;
}
//===========================================================================
void InitTrig_N1_Nightfall_Event(){
    gg_trg_N1_Nightfall_Event = TriggerCreate( "Trig_N1_Nightfall_Event_Actions" );;
    TriggerRegisterEnterRectSimple( gg_trg_N1_Nightfall_Event, gg_rct_Spot09 );
    TriggerRegisterEnterRectSimple( gg_trg_N1_Nightfall_Event, gg_rct_SpotBypass09A );
    TriggerRegisterEnterRectSimple( gg_trg_N1_Nightfall_Event, gg_rct_SpotBypass09B );
    GAw3_Trig_N1_Nightfall_Event_Conditions = Trig_N1_Nightfall_Event_Conditions;
}
//===========================================================================
// Trigger: N1 Nightfall Q
//===========================================================================
boolean Trig_N1_Nightfall_Q_Conditions(){
    if ( ! ( IsTriggerEnabled(GetTriggeringTrigger()) == true ) ) {
        return false;
    }
    if ( ! ( udg_GameOver == false ) ) {
        return false;
    }
    return true;
}
boolean Trig_N1_Nightfall_Q_Func011001(){
    return ( IsTriggerEnabled(GetTriggeringTrigger()) == false );
}
boolean Trig_N1_Nightfall_Q_Func016001(){
    return ( IsTriggerEnabled(GetTriggeringTrigger()) == false );
}
boolean Trig_N1_Nightfall_Q_Func020001(){
    return ( IsTriggerEnabled(GetTriggeringTrigger()) == false );
}
boolean Trig_N1_Nightfall_Q_Func025001(){
    return ( IsTriggerEnabled(GetTriggeringTrigger()) == false );
}
bool Trig_N1_Nightfall_Q_Actions(bool testConds, bool runActions){
	if (testConds){
		if (!GAw3_Trig_N1_Nightfall_Q_Conditions()){
			return false;
		}
	}
	if (!runActions) {
		return true;
	}
    PingMinimapLocForForce( GetPlayersAll(), GetRectCenter(gg_rct_SpotVictory), udg_PingTime );
    SetCameraQuickPositionLocForPlayer( udg_APlayer01, GetRectCenter(gg_rct_SpotVictory) );
    FogModifierStart( udg_VisibilityVictory );
    CommentString( "Let there be night" );
    udg_SlowDayAllowed = false;
    udg_SlowNightAllowed = true;
    UseTimeOfDayBJ( true );
    SetTimeOfDay( 17.95 );
    SetTimeOfDayScalePercentBJ( 100.00 );
    TriggerSleepAction( 2 );
    if ( Trig_N1_Nightfall_Q_Func011001() ) {
        return true;
    }else{
        DoNothing(  );
    }
    SetSpeechVolumeGroupsBJ(  );
    CommentString( "Line" );
    TransmissionFromUnitTypeWithNameBJ( GetPlayersAll(), Player(2), udg_NarratorPortrait, "TRIGSTR_404", GetUnitLoc(udg_Thrall), gg_snd_T01Narrator49, "TRIGSTR_405", bj_TIMETYPE_ADD, 0, false );
    WaitForSoundBJ( gg_snd_T01Narrator49, 0 );
    if ( Trig_N1_Nightfall_Q_Func016001() ) {
        return true;
    }else{
        DoNothing(  );
    }
    CommentString( "Line" );
    TransmissionFromUnitWithNameBJ( GetPlayersAll(), udg_Thrall, "TRIGSTR_445", gg_snd_T01Thrall48, "TRIGSTR_446", bj_TIMETYPE_ADD, 0, false );
    WaitForSoundBJ( gg_snd_T01Thrall48, 0 );
    if ( Trig_N1_Nightfall_Q_Func020001() ) {
        return true;
    }else{
        DoNothing(  );
    }
    VolumeGroupResetBJ(  );
    CommentString( "Hint" );
    ConditionalTriggerExecute( gg_trg_Hint_NightVisibility );
    TriggerSleepAction( udg_HintDelay );
    if ( Trig_N1_Nightfall_Q_Func025001() ) {
        return true;
    }else{
        DoNothing(  );
    }
    CommentString( "Done" );
    QueuedTriggerRemoveBJ( GetTriggeringTrigger() );
    return true;
}
//===========================================================================
void InitTrig_N1_Nightfall_Q(){
    gg_trg_N1_Nightfall_Q = TriggerCreate( "Trig_N1_Nightfall_Q_Actions" );;
    GAw3_Trig_N1_Nightfall_Q_Conditions = Trig_N1_Nightfall_Q_Conditions;
}
//===========================================================================
// Trigger: N1 Nightfall Abort
//===========================================================================
bool Trig_N1_Nightfall_Abort_Actions(bool testConds, bool runActions){
	if (testConds){
		if (!GAw3_Trig_N1_Nightfall_Abort_Conditions()){
			return false;
		}
	}
	if (!runActions) {
		return true;
	}
    DisableTrigger( gg_trg_N1_Nightfall_Q );
    CommentString( "Stop potentially playing sounds" );
    TriggerSleepAction( udg_ActAbortPreDelay );
    StopSoundBJ( gg_snd_T01Narrator49, true );
    StopSoundBJ( gg_snd_T01Thrall48, true );
    VolumeGroupResetBJ(  );
    CommentString( "Free the Q" );
    TriggerSleepAction( udg_ActAbortPostDelay );
    QueuedTriggerRemoveBJ( gg_trg_N1_Nightfall_Q );
    return true;
}
//===========================================================================
void InitTrig_N1_Nightfall_Abort(){
    gg_trg_N1_Nightfall_Abort = TriggerCreate( "Trig_N1_Nightfall_Abort_Actions" );;
}
//===========================================================================
// Trigger: N1 Nightfall Done
//===========================================================================
boolean Trig_N1_Nightfall_Done_Conditions(){
    if ( ! ( IsTriggerEnabled(GetTriggeringTrigger()) == true ) ) {
        return false;
    }
    return true;
}
bool Trig_N1_Nightfall_Done_Actions(bool testConds, bool runActions){
	if (testConds){
		if (!GAw3_Trig_N1_Nightfall_Done_Conditions()){
			return false;
		}
	}
	if (!runActions) {
		return true;
	}
    DisableTrigger( GetTriggeringTrigger() );
    CommentString( "Abort and prep next Q" );
    ConditionalTriggerExecute( gg_trg_N1_Nightfall_Abort );
    return true;
}
//===========================================================================
void InitTrig_N1_Nightfall_Done(){
    gg_trg_N1_Nightfall_Done = TriggerCreate( "Trig_N1_Nightfall_Done_Actions" );;
    GAw3_Trig_N1_Nightfall_Done_Conditions = Trig_N1_Nightfall_Done_Conditions;
}

//--------------------------------------------------------------------------------------------------
// Custom Script: Hidden Item
//--------------------------------------------------------------------------------------------------
//===========================================================================
// Trigger: Hidden Item Event
//===========================================================================
boolean Trig_Hidden_Item_Event_Conditions(){
    if ( ! ( GetOwningPlayer(GetEnteringUnit()) == udg_APlayer01 ) ) {
        return false;
    }
    if ( ! ( IsTriggerEnabled(GetTriggeringTrigger()) == true ) ) {
        return false;
    }
    if ( ! ( udg_GameOver == false ) ) {
        return false;
    }
    return true;
}
bool Trig_Hidden_Item_Event_Actions(bool testConds, bool runActions){
	if (testConds){
		if (!GAw3_Trig_Hidden_Item_Event_Conditions()){
			return false;
		}
	}
	if (!runActions) {
		return true;
	}
    DisableTrigger( GetTriggeringTrigger() );
    QueuedTriggerAddBJ( gg_trg_Hidden_Item_Q, true );
    return true;
}
//===========================================================================
void InitTrig_Hidden_Item_Event(){
    gg_trg_Hidden_Item_Event = TriggerCreate( "Trig_Hidden_Item_Event_Actions" );;
    TriggerRegisterEnterRectSimple( gg_trg_Hidden_Item_Event, gg_rct_Hidden_Item_TripwireA );
    TriggerRegisterEnterRectSimple( gg_trg_Hidden_Item_Event, gg_rct_Hidden_Item_TripwireB );
    GAw3_Trig_Hidden_Item_Event_Conditions = Trig_Hidden_Item_Event_Conditions;
}
//===========================================================================
// Trigger: Hidden Item Q
//===========================================================================
boolean Trig_Hidden_Item_Q_Conditions(){
    if ( ! ( IsTriggerEnabled(GetTriggeringTrigger()) == true ) ) {
        return false;
    }
    if ( ! ( udg_GameOver == false ) ) {
        return false;
    }
    return true;
}
boolean Trig_Hidden_Item_Q_Func004001(){
    return ( IsTriggerEnabled(GetTriggeringTrigger()) == false );
}
bool Trig_Hidden_Item_Q_Actions(bool testConds, bool runActions){
	if (testConds){
		if (!GAw3_Trig_Hidden_Item_Q_Conditions()){
			return false;
		}
	}
	if (!runActions) {
		return true;
	}
    CommentString( "Hint" );
    ConditionalTriggerExecute( gg_trg_Hint_UnexploredAreas );
    TriggerSleepAction( udg_HintDelay );
    if ( Trig_Hidden_Item_Q_Func004001() ) {
        return true;
    }else{
        DoNothing(  );
    }
    CommentString( "Done" );
    QueuedTriggerRemoveBJ( GetTriggeringTrigger() );
    return true;
}
//===========================================================================
void InitTrig_Hidden_Item_Q(){
    gg_trg_Hidden_Item_Q = TriggerCreate( "Trig_Hidden_Item_Q_Actions" );;
    GAw3_Trig_Hidden_Item_Q_Conditions = Trig_Hidden_Item_Q_Conditions;
}

//--------------------------------------------------------------------------------------------------
// Custom Script: Sleeping Ogre
//--------------------------------------------------------------------------------------------------
//===========================================================================
// Trigger: O1 SleepingOgre Event
//===========================================================================
boolean Trig_O1_SleepingOgre_Event_Conditions(){
    if ( ! ( GetOwningPlayer(GetEnteringUnit()) == udg_APlayer01 ) ) {
        return false;
    }
    if ( ! ( udg_Ogre != null ) ) {
        return false;
    }
    if ( ! ( DistanceBetweenPoints(GetUnitLoc(udg_Thrall), GetRectCenter(gg_rct_SpeakingAnchor10)) < udg_SpeakingDistance ) ) {
        return false;
    }
    if ( ! ( UnitIsSleepingBJ(udg_Ogre) == true ) ) {
        return false;
    }
    if ( ! ( IsTriggerEnabled(GetTriggeringTrigger()) == true ) ) {
        return false;
    }
    if ( ! ( udg_GameOver == false ) ) {
        return false;
    }
    return true;
}
boolean Trig_O1_SleepingOgre_Event_Func002001(){
    return ( GetTimeOfDay() < 18.00 );
}
bool Trig_O1_SleepingOgre_Event_Actions(bool testConds, bool runActions){
	if (testConds){
		if (!GAw3_Trig_O1_SleepingOgre_Event_Conditions()){
			return false;
		}
	}
	if (!runActions) {
		return true;
	}
    DisableTrigger( GetTriggeringTrigger() );
    if ( Trig_O1_SleepingOgre_Event_Func002001() ) {
        SetTimeOfDay( 18.50 );
    }else{
        DoNothing(  );
    }
    QueuedTriggerAddBJ( gg_trg_O1_SleepingOgre_Q, true );
    return true;
}
//===========================================================================
void InitTrig_O1_SleepingOgre_Event(){
    gg_trg_O1_SleepingOgre_Event = TriggerCreate( "Trig_O1_SleepingOgre_Event_Actions" );;
    TriggerRegisterEnterRectSimple( gg_trg_O1_SleepingOgre_Event, gg_rct_Spot10 );
    TriggerRegisterEnterRectSimple( gg_trg_O1_SleepingOgre_Event, gg_rct_SpotTripwire10A );
    TriggerRegisterEnterRectSimple( gg_trg_O1_SleepingOgre_Event, gg_rct_SpotTripwire10B );
    TriggerRegisterEnterRectSimple( gg_trg_O1_SleepingOgre_Event, gg_rct_SpotTripwire10C );
    GAw3_Trig_O1_SleepingOgre_Event_Conditions = Trig_O1_SleepingOgre_Event_Conditions;
}
//===========================================================================
// Trigger: O1 SleepingOgre Q
//===========================================================================
boolean Trig_O1_SleepingOgre_Q_Conditions(){
    if ( ! ( IsTriggerEnabled(GetTriggeringTrigger()) == true ) ) {
        return false;
    }
    if ( ! ( udg_GameOver == false ) ) {
        return false;
    }
    return true;
}
boolean Trig_O1_SleepingOgre_Q_Func002001(){
    return ( IsTriggerEnabled(GetTriggeringTrigger()) == false );
}
boolean Trig_O1_SleepingOgre_Q_Func010001(){
    return ( IsTriggerEnabled(GetTriggeringTrigger()) == false );
}
boolean Trig_O1_SleepingOgre_Q_Func015001(){
    return ( IsTriggerEnabled(GetTriggeringTrigger()) == false );
}
boolean Trig_O1_SleepingOgre_Q_Func019001(){
    return ( IsTriggerEnabled(GetTriggeringTrigger()) == false );
}
bool Trig_O1_SleepingOgre_Q_Actions(bool testConds, bool runActions){
	if (testConds){
		if (!GAw3_Trig_O1_SleepingOgre_Q_Conditions()){
			return false;
		}
	}
	if (!runActions) {
		return true;
	}
    TriggerSleepAction( 0.50 );
    if ( Trig_O1_SleepingOgre_Q_Func002001() ) {
        return true;
    }else{
        DoNothing(  );
    }
    PingMinimapLocForForce( GetPlayersAll(), GetRectCenter(gg_rct_Spot10), udg_PingTime );
    SetCameraQuickPositionLocForPlayer( udg_APlayer01, GetRectCenter(gg_rct_Spot10) );
    FogModifierStart( udg_Visibility10 );
    SetSpeechVolumeGroupsBJ(  );
    CommentString( "Line" );
    TransmissionFromUnitWithNameBJ( GetPlayersAll(), udg_Thrall, "TRIGSTR_416", gg_snd_T01Thrall51, "TRIGSTR_417", bj_TIMETYPE_ADD, 0, false );
    WaitForSoundBJ( gg_snd_T01Thrall51, 0 );
    if ( Trig_O1_SleepingOgre_Q_Func010001() ) {
        return true;
    }else{
        DoNothing(  );
    }
    VolumeGroupResetBJ(  );
    CommentString( "Hint" );
    ConditionalTriggerExecute( gg_trg_Hint_SleepersWake );
    TriggerSleepAction( udg_HintDelay );
    if ( Trig_O1_SleepingOgre_Q_Func015001() ) {
        return true;
    }else{
        DoNothing(  );
    }
    CommentString( "Done" );
    QueuedTriggerRemoveBJ( GetTriggeringTrigger() );
    TriggerSleepAction( 5.00 );
    if ( Trig_O1_SleepingOgre_Q_Func019001() ) {
        return true;
    }else{
        DoNothing(  );
    }
    FogModifierStop( udg_Visibility10 );
    return true;
}
//===========================================================================
void InitTrig_O1_SleepingOgre_Q(){
    gg_trg_O1_SleepingOgre_Q = TriggerCreate( "Trig_O1_SleepingOgre_Q_Actions" );;
    GAw3_Trig_O1_SleepingOgre_Q_Conditions = Trig_O1_SleepingOgre_Q_Conditions;
}
//===========================================================================
// Trigger: O1 SleepingOgre Abort
//===========================================================================
bool Trig_O1_SleepingOgre_Abort_Actions(bool testConds, bool runActions){
	if (testConds){
		if (!GAw3_Trig_O1_SleepingOgre_Abort_Conditions()){
			return false;
		}
	}
	if (!runActions) {
		return true;
	}
    DisableTrigger( gg_trg_O1_SleepingOgre_Q );
    CommentString( "Stop potentially playing sounds" );
    TriggerSleepAction( udg_ActAbortPreDelay );
    StopSoundBJ( gg_snd_T01Thrall51, true );
    VolumeGroupResetBJ(  );
    FogModifierStop( udg_Visibility10 );
    CommentString( "Free the Q" );
    TriggerSleepAction( udg_ActAbortPostDelay );
    QueuedTriggerRemoveBJ( gg_trg_O1_SleepingOgre_Q );
    return true;
}
//===========================================================================
void InitTrig_O1_SleepingOgre_Abort(){
    gg_trg_O1_SleepingOgre_Abort = TriggerCreate( "Trig_O1_SleepingOgre_Abort_Actions" );;
}
//===========================================================================
// Trigger: O1 SleepingOgre Done
//===========================================================================
boolean Trig_O1_SleepingOgre_Done_Conditions(){
    if ( ! ( GetDyingUnit() == udg_Ogre ) ) {
        return false;
    }
    if ( ! ( IsTriggerEnabled(GetTriggeringTrigger()) == true ) ) {
        return false;
    }
    return true;
}
bool Trig_O1_SleepingOgre_Done_Actions(bool testConds, bool runActions){
	if (testConds){
		if (!GAw3_Trig_O1_SleepingOgre_Done_Conditions()){
			return false;
		}
	}
	if (!runActions) {
		return true;
	}
    DisableTrigger( GetTriggeringTrigger() );
    udg_Ogre = null;
    CommentString( "Abort and prep next Q" );
    ConditionalTriggerExecute( gg_trg_O1_SleepingOgre_Abort );
    return true;
}
//===========================================================================
void InitTrig_O1_SleepingOgre_Done(){
    gg_trg_O1_SleepingOgre_Done = TriggerCreate( "Trig_O1_SleepingOgre_Done_Actions" );;
    TriggerRegisterPlayerUnitEventSimple( gg_trg_O1_SleepingOgre_Done, Player(PLAYER_NEUTRAL_AGGRESSIVE), EVENT_PLAYER_UNIT_DEATH );
    GAw3_Trig_O1_SleepingOgre_Done_Conditions = Trig_O1_SleepingOgre_Done_Conditions;
}

//--------------------------------------------------------------------------------------------------
// Custom Script: Golem
//--------------------------------------------------------------------------------------------------
//===========================================================================
// Trigger: G1 Golem Event
//===========================================================================
boolean Trig_G1_Golem_Event_Conditions(){
    if ( ! ( GetOwningPlayer(GetEnteringUnit()) == udg_APlayer01 ) ) {
        return false;
    }
    if ( ! ( udg_Golem != null ) ) {
        return false;
    }
    if ( ! ( DistanceBetweenPoints(GetUnitLoc(udg_Thrall), GetRectCenter(gg_rct_SpeakingAnchor11)) < udg_SpeakingDistance ) ) {
        return false;
    }
    if ( ! ( IsTriggerEnabled(GetTriggeringTrigger()) == true ) ) {
        return false;
    }
    if ( ! ( udg_GameOver == false ) ) {
        return false;
    }
    return true;
}
bool Trig_G1_Golem_Event_Actions(bool testConds, bool runActions){
	if (testConds){
		if (!GAw3_Trig_G1_Golem_Event_Conditions()){
			return false;
		}
	}
	if (!runActions) {
		return true;
	}
    DisableTrigger( GetTriggeringTrigger() );
    QueuedTriggerAddBJ( gg_trg_G1_Golem_Q, true );
    return true;
}
//===========================================================================
void InitTrig_G1_Golem_Event(){
    gg_trg_G1_Golem_Event = TriggerCreate( "Trig_G1_Golem_Event_Actions" );;
    TriggerRegisterEnterRectSimple( gg_trg_G1_Golem_Event, gg_rct_SpotTripwire11A );
    TriggerRegisterEnterRectSimple( gg_trg_G1_Golem_Event, gg_rct_SpotTripwire11B );
    TriggerRegisterEnterRectSimple( gg_trg_G1_Golem_Event, gg_rct_SpotTripwire11C );
    GAw3_Trig_G1_Golem_Event_Conditions = Trig_G1_Golem_Event_Conditions;
}
//===========================================================================
// Trigger: G1 Golem Q
//===========================================================================
boolean Trig_G1_Golem_Q_Conditions(){
    if ( ! ( IsTriggerEnabled(GetTriggeringTrigger()) == true ) ) {
        return false;
    }
    if ( ! ( udg_GameOver == false ) ) {
        return false;
    }
    return true;
}
boolean Trig_G1_Golem_Q_Func002001(){
    return ( IsTriggerEnabled(GetTriggeringTrigger()) == false );
}
boolean Trig_G1_Golem_Q_Func010001(){
    return ( IsTriggerEnabled(GetTriggeringTrigger()) == false );
}
boolean Trig_G1_Golem_Q_Func015001(){
    return ( IsTriggerEnabled(GetTriggeringTrigger()) == false );
}
bool Trig_G1_Golem_Q_Actions(bool testConds, bool runActions){
	if (testConds){
		if (!GAw3_Trig_G1_Golem_Q_Conditions()){
			return false;
		}
	}
	if (!runActions) {
		return true;
	}
    TriggerSleepAction( 0.50 );
    if ( Trig_G1_Golem_Q_Func002001() ) {
        return true;
    }else{
        DoNothing(  );
    }
    PingMinimapLocForForce( GetPlayersAll(), GetRectCenter(gg_rct_Spot11), udg_PingTime );
    SetCameraQuickPositionLocForPlayer( udg_APlayer01, GetRectCenter(gg_rct_Spot11) );
    FogModifierStart( udg_Visibility11 );
    SetSpeechVolumeGroupsBJ(  );
    CommentString( "Line" );
    TransmissionFromUnitWithNameBJ( GetPlayersAll(), udg_Thrall, "TRIGSTR_423", gg_snd_T01Thrall53, "TRIGSTR_424", bj_TIMETYPE_ADD, 0, false );
    WaitForSoundBJ( gg_snd_T01Thrall53, 0 );
    if ( Trig_G1_Golem_Q_Func010001() ) {
        return true;
    }else{
        DoNothing(  );
    }
    VolumeGroupResetBJ(  );
    CommentString( "Done" );
    QueuedTriggerRemoveBJ( GetTriggeringTrigger() );
    TriggerSleepAction( 5.00 );
    if ( Trig_G1_Golem_Q_Func015001() ) {
        return true;
    }else{
        DoNothing(  );
    }
    FogModifierStop( udg_Visibility11 );
    return true;
}
//===========================================================================
void InitTrig_G1_Golem_Q(){
    gg_trg_G1_Golem_Q = TriggerCreate( "Trig_G1_Golem_Q_Actions" );;
    GAw3_Trig_G1_Golem_Q_Conditions = Trig_G1_Golem_Q_Conditions;
}
//===========================================================================
// Trigger: G1 Golem Abort
//===========================================================================
bool Trig_G1_Golem_Abort_Actions(bool testConds, bool runActions){
	if (testConds){
		if (!GAw3_Trig_G1_Golem_Abort_Conditions()){
			return false;
		}
	}
	if (!runActions) {
		return true;
	}
    DisableTrigger( gg_trg_G1_Golem_Q );
    CommentString( "Stop potentially playing sounds" );
    TriggerSleepAction( udg_ActAbortPreDelay );
    StopSoundBJ( gg_snd_T01Thrall53, true );
    VolumeGroupResetBJ(  );
    FogModifierStop( udg_Visibility11 );
    CommentString( "Free the Q" );
    TriggerSleepAction( udg_ActAbortPostDelay );
    QueuedTriggerRemoveBJ( gg_trg_G1_Golem_Q );
    return true;
}
//===========================================================================
void InitTrig_G1_Golem_Abort(){
    gg_trg_G1_Golem_Abort = TriggerCreate( "Trig_G1_Golem_Abort_Actions" );;
}
//===========================================================================
// Trigger: G1 Golem Done
//===========================================================================
boolean Trig_G1_Golem_Done_Conditions(){
    if ( ! ( GetDyingUnit() == udg_Golem ) ) {
        return false;
    }
    if ( ! ( IsTriggerEnabled(GetTriggeringTrigger()) == true ) ) {
        return false;
    }
    return true;
}
bool Trig_G1_Golem_Done_Actions(bool testConds, bool runActions){
	if (testConds){
		if (!GAw3_Trig_G1_Golem_Done_Conditions()){
			return false;
		}
	}
	if (!runActions) {
		return true;
	}
    DisableTrigger( GetTriggeringTrigger() );
    udg_Golem = null;
    CommentString( "Abort and prep next Q" );
    ConditionalTriggerExecute( gg_trg_G1_Golem_Abort );
    return true;
}
//===========================================================================
void InitTrig_G1_Golem_Done(){
    gg_trg_G1_Golem_Done = TriggerCreate( "Trig_G1_Golem_Done_Actions" );;
    TriggerRegisterPlayerUnitEventSimple( gg_trg_G1_Golem_Done, Player(PLAYER_NEUTRAL_AGGRESSIVE), EVENT_PLAYER_UNIT_DEATH );
    GAw3_Trig_G1_Golem_Done_Conditions = Trig_G1_Golem_Done_Conditions;
}
//===========================================================================
// Trigger: G2 Ring Event
//===========================================================================
boolean Trig_G2_Ring_Event_Conditions(){
    if ( ! ( GetItemTypeId(GetManipulatedItem()) == 'rde0' ) ) {
        return false;
    }
    if ( ! ( IsTriggerEnabled(GetTriggeringTrigger()) == true ) ) {
        return false;
    }
    if ( ! ( udg_GameOver == false ) ) {
        return false;
    }
    return true;
}
bool Trig_G2_Ring_Event_Actions(bool testConds, bool runActions){
	if (testConds){
		if (!GAw3_Trig_G2_Ring_Event_Conditions()){
			return false;
		}
	}
	if (!runActions) {
		return true;
	}
    DisableTrigger( GetTriggeringTrigger() );
    QueuedTriggerAddBJ( gg_trg_G2_Ring_Q, true );
    return true;
}
//===========================================================================
void InitTrig_G2_Ring_Event(){
    gg_trg_G2_Ring_Event = TriggerCreate( "Trig_G2_Ring_Event_Actions" );;
    TriggerRegisterPlayerUnitEventSimple( gg_trg_G2_Ring_Event, Player(0), EVENT_PLAYER_UNIT_PICKUP_ITEM );
    GAw3_Trig_G2_Ring_Event_Conditions = Trig_G2_Ring_Event_Conditions;
}
//===========================================================================
// Trigger: G2 Ring Q
//===========================================================================
boolean Trig_G2_Ring_Q_Conditions(){
    if ( ! ( IsTriggerEnabled(GetTriggeringTrigger()) == true ) ) {
        return false;
    }
    if ( ! ( udg_GameOver == false ) ) {
        return false;
    }
    return true;
}
boolean Trig_G2_Ring_Q_Func002001(){
    return ( IsTriggerEnabled(GetTriggeringTrigger()) == false );
}
boolean Trig_G2_Ring_Q_Func007001(){
    return ( IsTriggerEnabled(GetTriggeringTrigger()) == false );
}
bool Trig_G2_Ring_Q_Actions(bool testConds, bool runActions){
	if (testConds){
		if (!GAw3_Trig_G2_Ring_Q_Conditions()){
			return false;
		}
	}
	if (!runActions) {
		return true;
	}
    TriggerSleepAction( 0.50 );
    if ( Trig_G2_Ring_Q_Func002001() ) {
        return true;
    }else{
        DoNothing(  );
    }
    SetSpeechVolumeGroupsBJ(  );
    CommentString( "Line" );
    TransmissionFromUnitTypeWithNameBJ( GetPlayersAll(), Player(2), udg_NarratorPortrait, "TRIGSTR_427", GetUnitLoc(udg_Thrall), gg_snd_T01Narrator54, "TRIGSTR_428", bj_TIMETYPE_ADD, 0, false );
    WaitForSoundBJ( gg_snd_T01Narrator54, 0 );
    if ( Trig_G2_Ring_Q_Func007001() ) {
        return true;
    }else{
        DoNothing(  );
    }
    VolumeGroupResetBJ(  );
    CommentString( "Done" );
    QueuedTriggerRemoveBJ( GetTriggeringTrigger() );
    return true;
}
//===========================================================================
void InitTrig_G2_Ring_Q(){
    gg_trg_G2_Ring_Q = TriggerCreate( "Trig_G2_Ring_Q_Actions" );;
    GAw3_Trig_G2_Ring_Q_Conditions = Trig_G2_Ring_Q_Conditions;
}

//--------------------------------------------------------------------------------------------------
// Custom Script: Trolls
//--------------------------------------------------------------------------------------------------
//===========================================================================
// Trigger: T1 Trolls Event
//===========================================================================
boolean Trig_T1_Trolls_Event_Conditions(){
    if ( ! ( GetOwningPlayer(GetEnteringUnit()) == udg_APlayer01 ) ) {
        return false;
    }
    if ( ! ( DistanceBetweenPoints(GetUnitLoc(udg_Thrall), GetRectCenter(gg_rct_SpeakingAnchor12)) < udg_SpeakingDistance ) ) {
        return false;
    }
    if ( ! ( IsTriggerEnabled(GetTriggeringTrigger()) == true ) ) {
        return false;
    }
    if ( ! ( udg_GameOver == false ) ) {
        return false;
    }
    return true;
}
bool Trig_T1_Trolls_Event_Actions(bool testConds, bool runActions){
	if (testConds){
		if (!GAw3_Trig_T1_Trolls_Event_Conditions()){
			return false;
		}
	}
	if (!runActions) {
		return true;
	}
    DisableTrigger( GetTriggeringTrigger() );
    QueuedTriggerAddBJ( gg_trg_T1_Trolls_Q, true );
    return true;
}
//===========================================================================
void InitTrig_T1_Trolls_Event(){
    gg_trg_T1_Trolls_Event = TriggerCreate( "Trig_T1_Trolls_Event_Actions" );;
    TriggerRegisterEnterRectSimple( gg_trg_T1_Trolls_Event, gg_rct_SpotTripwire12A );
    GAw3_Trig_T1_Trolls_Event_Conditions = Trig_T1_Trolls_Event_Conditions;
}
//===========================================================================
// Trigger: T1 Trolls Q
//===========================================================================
boolean Trig_T1_Trolls_Q_Conditions(){
    if ( ! ( IsTriggerEnabled(GetTriggeringTrigger()) == true ) ) {
        return false;
    }
    if ( ! ( udg_GameOver == false ) ) {
        return false;
    }
    return true;
}
boolean Trig_T1_Trolls_Q_Func002001(){
    return ( IsTriggerEnabled(GetTriggeringTrigger()) == false );
}
boolean Trig_T1_Trolls_Q_Func010001(){
    return ( IsTriggerEnabled(GetTriggeringTrigger()) == false );
}
boolean Trig_T1_Trolls_Q_Func015001(){
    return ( IsTriggerEnabled(GetTriggeringTrigger()) == false );
}
boolean Trig_T1_Trolls_Q_Func019001(){
    return ( IsTriggerEnabled(GetTriggeringTrigger()) == false );
}
bool Trig_T1_Trolls_Q_Actions(bool testConds, bool runActions){
	if (testConds){
		if (!GAw3_Trig_T1_Trolls_Q_Conditions()){
			return false;
		}
	}
	if (!runActions) {
		return true;
	}
    TriggerSleepAction( 0.50 );
    if ( Trig_T1_Trolls_Q_Func002001() ) {
        return true;
    }else{
        DoNothing(  );
    }
    PingMinimapLocForForce( GetPlayersAll(), GetRectCenter(gg_rct_Spot12), udg_PingTime );
    SetCameraQuickPositionLocForPlayer( udg_APlayer01, GetRectCenter(gg_rct_Spot12) );
    FogModifierStart( udg_Visibility12 );
    SetSpeechVolumeGroupsBJ(  );
    CommentString( "Line" );
    TransmissionFromUnitWithNameBJ( GetPlayersAll(), udg_Thrall, "TRIGSTR_431", gg_snd_T01Thrall56, "TRIGSTR_432", bj_TIMETYPE_ADD, 0, false );
    WaitForSoundBJ( gg_snd_T01Thrall56, 0 );
    if ( Trig_T1_Trolls_Q_Func010001() ) {
        return true;
    }else{
        DoNothing(  );
    }
    VolumeGroupResetBJ(  );
    CommentString( "Hint" );
    ConditionalTriggerExecute( gg_trg_Hint_CreepLevel );
    TriggerSleepAction( udg_HintDelay );
    if ( Trig_T1_Trolls_Q_Func015001() ) {
        return true;
    }else{
        DoNothing(  );
    }
    CommentString( "Done" );
    QueuedTriggerRemoveBJ( GetTriggeringTrigger() );
    TriggerSleepAction( 5.00 );
    if ( Trig_T1_Trolls_Q_Func019001() ) {
        return true;
    }else{
        DoNothing(  );
    }
    FogModifierStop( udg_Visibility12 );
    return true;
}
//===========================================================================
void InitTrig_T1_Trolls_Q(){
    gg_trg_T1_Trolls_Q = TriggerCreate( "Trig_T1_Trolls_Q_Actions" );;
    GAw3_Trig_T1_Trolls_Q_Conditions = Trig_T1_Trolls_Q_Conditions;
}
//===========================================================================
// Trigger: T1 Trolls Abort
//===========================================================================
bool Trig_T1_Trolls_Abort_Actions(bool testConds, bool runActions){
	if (testConds){
		if (!GAw3_Trig_T1_Trolls_Abort_Conditions()){
			return false;
		}
	}
	if (!runActions) {
		return true;
	}
    DisableTrigger( gg_trg_T1_Trolls_Q );
    CommentString( "Stop potentially playing sounds" );
    TriggerSleepAction( udg_ActAbortPreDelay );
    StopSoundBJ( gg_snd_T01Thrall56, true );
    VolumeGroupResetBJ(  );
    FogModifierStop( udg_Visibility12 );
    CommentString( "Free the Q" );
    TriggerSleepAction( udg_ActAbortPostDelay );
    QueuedTriggerRemoveBJ( gg_trg_T1_Trolls_Q );
    return true;
}
//===========================================================================
void InitTrig_T1_Trolls_Abort(){
    gg_trg_T1_Trolls_Abort = TriggerCreate( "Trig_T1_Trolls_Abort_Actions" );;
}
//===========================================================================
// Trigger: T1 Trolls Done
//===========================================================================
boolean Trig_T1_Trolls_Done_Conditions(){
    if ( ! ( IsUnitGroupDeadBJ(udg_TrollsGroup) == true ) ) {
        return false;
    }
    if ( ! ( IsTriggerEnabled(GetTriggeringTrigger()) == true ) ) {
        return false;
    }
    return true;
}
bool Trig_T1_Trolls_Done_Actions(bool testConds, bool runActions){
	if (testConds){
		if (!GAw3_Trig_T1_Trolls_Done_Conditions()){
			return false;
		}
	}
	if (!runActions) {
		return true;
	}
    DisableTrigger( GetTriggeringTrigger() );
    CommentString( "Abort and prep next Q" );
    ConditionalTriggerExecute( gg_trg_T1_Trolls_Abort );
    TriggerSleepAction( udg_ActAbortDoneDelay );
    CreateItemLoc( 'manh', GetUnitLoc(GetDyingUnit()) );
    return true;
}
//===========================================================================
void InitTrig_T1_Trolls_Done(){
    gg_trg_T1_Trolls_Done = TriggerCreate( "Trig_T1_Trolls_Done_Actions" );;
    TriggerRegisterPlayerUnitEventSimple( gg_trg_T1_Trolls_Done, Player(PLAYER_NEUTRAL_AGGRESSIVE), EVENT_PLAYER_UNIT_DEATH );
    GAw3_Trig_T1_Trolls_Done_Conditions = Trig_T1_Trolls_Done_Conditions;
}
//===========================================================================
// Trigger: T2 Tome Event
//===========================================================================
boolean Trig_T2_Tome_Event_Conditions(){
    if ( ! ( GetItemTypeId(GetManipulatedItem()) == 'manh' ) ) {
        return false;
    }
    if ( ! ( IsTriggerEnabled(GetTriggeringTrigger()) == true ) ) {
        return false;
    }
    if ( ! ( udg_GameOver == false ) ) {
        return false;
    }
    return true;
}
bool Trig_T2_Tome_Event_Actions(bool testConds, bool runActions){
	if (testConds){
		if (!GAw3_Trig_T2_Tome_Event_Conditions()){
			return false;
		}
	}
	if (!runActions) {
		return true;
	}
    DisableTrigger( GetTriggeringTrigger() );
    QueuedTriggerAddBJ( gg_trg_T2_Tome_Q, true );
    return true;
}
//===========================================================================
void InitTrig_T2_Tome_Event(){
    gg_trg_T2_Tome_Event = TriggerCreate( "Trig_T2_Tome_Event_Actions" );;
    TriggerRegisterPlayerUnitEventSimple( gg_trg_T2_Tome_Event, Player(0), EVENT_PLAYER_UNIT_PICKUP_ITEM );
    GAw3_Trig_T2_Tome_Event_Conditions = Trig_T2_Tome_Event_Conditions;
}
//===========================================================================
// Trigger: T2 Tome Q
//===========================================================================
boolean Trig_T2_Tome_Q_Conditions(){
    if ( ! ( IsTriggerEnabled(GetTriggeringTrigger()) == true ) ) {
        return false;
    }
    if ( ! ( udg_GameOver == false ) ) {
        return false;
    }
    return true;
}
boolean Trig_T2_Tome_Q_Func002001(){
    return ( IsTriggerEnabled(GetTriggeringTrigger()) == false );
}
boolean Trig_T2_Tome_Q_Func007001(){
    return ( IsTriggerEnabled(GetTriggeringTrigger()) == false );
}
boolean Trig_T2_Tome_Q_Func012001(){
    return ( IsTriggerEnabled(GetTriggeringTrigger()) == false );
}
bool Trig_T2_Tome_Q_Actions(bool testConds, bool runActions){
	if (testConds){
		if (!GAw3_Trig_T2_Tome_Q_Conditions()){
			return false;
		}
	}
	if (!runActions) {
		return true;
	}
    TriggerSleepAction( 0.50 );
    if ( Trig_T2_Tome_Q_Func002001() ) {
        return true;
    }else{
        DoNothing(  );
    }
    SetSpeechVolumeGroupsBJ(  );
    CommentString( "Line" );
    TransmissionFromUnitTypeWithNameBJ( GetPlayersAll(), Player(2), udg_NarratorPortrait, "TRIGSTR_439", GetUnitLoc(udg_Thrall), gg_snd_T01Narrator58, "TRIGSTR_440", bj_TIMETYPE_ADD, 0, false );
    WaitForSoundBJ( gg_snd_T01Narrator58, 0 );
    if ( Trig_T2_Tome_Q_Func007001() ) {
        return true;
    }else{
        DoNothing(  );
    }
    VolumeGroupResetBJ(  );
    CommentString( "Hint" );
    ConditionalTriggerExecute( gg_trg_Hint_Tomes );
    TriggerSleepAction( udg_HintDelay );
    if ( Trig_T2_Tome_Q_Func012001() ) {
        return true;
    }else{
        DoNothing(  );
    }
    CommentString( "Done" );
    QueuedTriggerRemoveBJ( GetTriggeringTrigger() );
    return true;
}
//===========================================================================
void InitTrig_T2_Tome_Q(){
    gg_trg_T2_Tome_Q = TriggerCreate( "Trig_T2_Tome_Q_Actions" );;
    GAw3_Trig_T2_Tome_Q_Conditions = Trig_T2_Tome_Q_Conditions;
}

//--------------------------------------------------------------------------------------------------
// Custom Script: Untitled Custom Script 001
//--------------------------------------------------------------------------------------------------
//===========================================================================
void InitCustomTriggers(){
    InitTrig_Initialization_Phase(  );
    InitTrig_Init_01_Timing(  );
    InitTrig_Init_02_Players(  );
    InitTrig_Init_03_Units(  );
    InitTrig_Init_04_Environment(  );
    InitTrig_Init_05_Visibility(  );
    InitTrig_Init_06_Sounds(  );
    InitTrig_Intro_Cinematic(  );
    InitTrig_Intro_Cinematic_Skip(  );
    InitTrig_The_Prophet_Flies_Overhead(  );
    InitTrig_The_Prophet_Circles1(  );
    InitTrig_The_Prophet_Circles2(  );
    InitTrig_The_Prophet_Circles3(  );
    InitTrig_The_Prophet_Circles4(  );
    InitTrig_The_Prophet_Circles5(  );
    InitTrig_The_Prophet_Circles6(  );
    InitTrig_The_Prophet_Circles7(  );
    InitTrig_The_Prophet_Circles8(  );
    InitTrig_The_Prophet_Circles9(  );
    InitTrig_The_Prophet_Circles10(  );
    InitTrig_The_Prophet_Circles11(  );
    InitTrig_The_Prophet_Circles12(  );
    InitTrig_Medivh_Reaches_Home(  );
    InitTrig_Intro_Time_Stop(  );
    InitTrig_Gameplay(  );
    InitTrig_Waste_Queue_Time(  );
    InitTrig_End_Cinematic(  );
    InitTrig_End_Cinematic_Skip(  );
    InitTrig_Next_Level_Prep(  );
    InitTrig_Next_Level_Run(  );
    InitTrig_Victory_Cheat(  );
    InitTrig_Defeat_Cheat(  );
    InitTrig_Victory_Found_Medivh(  );
    InitTrig_Defeat_Thrall_Dies(  );
    InitTrig_Hint_RightClickMove(  );
    InitTrig_Hint_Scrolling(  );
    InitTrig_Hint_ArrowKeys(  );
    InitTrig_Hint_MessageLog(  );
    InitTrig_Hint_ClickDragSelect(  );
    InitTrig_Hint_RightClickAttack(  );
    InitTrig_Hint_AttackMove(  );
    InitTrig_Hint_AutoAttack(  );
    InitTrig_Hint_HeroIcon(  );
    InitTrig_Hint_PickUpItem(  );
    InitTrig_Hint_ItemTooltip(  );
    InitTrig_Hint_UnitStatus(  );
    InitTrig_Hint_UseManaPotion(  );
    InitTrig_Hint_NightVisibility(  );
    InitTrig_Hint_UnexploredAreas(  );
    InitTrig_Hint_SleepersWake(  );
    InitTrig_Hint_CreepLevel(  );
    InitTrig_Hint_Tomes(  );
    InitTrig_MissionFailed_ThrallDead(  );
    InitTrig_QuestProphet_Create(  );
    InitTrig_QuestProphet_Discover(  );
    InitTrig_QuestProphet_Complete(  );
    InitTrig_Track_Unit_Deaths(  );
    InitTrig_Track_Creep_Deaths(  );
    InitTrig_Thrall_Level_Limit(  );
    InitTrig_Thrall_Gains_Point(  );
    InitTrig_Thrall_Spends_Point(  );
    InitTrig_SlowDay_StepA(  );
    InitTrig_SlowDay_StepB(  );
    InitTrig_SlowDay_StepC(  );
    InitTrig_SlowDay_StepD(  );
    InitTrig_SlowDay_StepE(  );
    InitTrig_SlowDay_StepF(  );
    InitTrig_SlowDay_StepG(  );
    InitTrig_SlowNight_StepA(  );
    InitTrig_SlowNight_StepB(  );
    InitTrig_SlowNight_StepC(  );
    InitTrig_SlowNight_StepD(  );
    InitTrig_SlowNight_StepE(  );
    InitTrig_SlowNight_StepF(  );
    InitTrig_Check_Waterfalls(  );
    InitTrig_Prophet_Discover_Q(  );
    InitTrig_Prophet_Complete_Q(  );
    InitTrig_S1_SelectThrall_Q(  );
    InitTrig_S1_SelectThrall_Abort(  );
    InitTrig_S1_SelectThrall_Done(  );
    InitTrig_S2_MoveThrall_Q(  );
    InitTrig_S2_MoveThrall_Abort(  );
    InitTrig_S2_MoveThrall_Done(  );
    InitTrig_S3_Scroll_Q(  );
    InitTrig_S3_Scroll_Abort(  );
    InitTrig_S3_Scroll_Done(  );
    InitTrig_S4_BlackMask_Q(  );
    InitTrig_S4_BlackMask_Abort(  );
    InitTrig_S4_BlackMask_Done(  );
    InitTrig_S5_Unmasking_Q(  );
    InitTrig_S5_Unmasking_Abort(  );
    InitTrig_S5_Unmasking_Done(  );
    InitTrig_S6_MoveMore_Event(  );
    InitTrig_S6_MoveMore_Q(  );
    InitTrig_S6_MoveMore_Abort(  );
    InitTrig_S6_MoveMore_Done(  );
    InitTrig_R1_Rescue_Q(  );
    InitTrig_R1_Rescue_Unhide(  );
    InitTrig_R1_Rescue_Rescue(  );
    InitTrig_R1_Rescue_Abort(  );
    InitTrig_R1_Rescue_Done(  );
    InitTrig_R2_GroupSelect_Q(  );
    InitTrig_R2_GroupSelect_Abort(  );
    InitTrig_R2_GroupSelect_Done(  );
    InitTrig_R3_GroupMove_Q(  );
    InitTrig_R3_GroupMove_Abort(  );
    InitTrig_R3_GroupMove_Done(  );
    InitTrig_A1_SingleGnoll_Q(  );
    InitTrig_A1_SingleGnoll_OptLine(  );
    InitTrig_A1_SingleGnoll_Abort(  );
    InitTrig_A1_SingleGnoll_DoneA(  );
    InitTrig_A1_SingleGnoll_DoneB(  );
    InitTrig_A2_MoreGnolls_Q(  );
    InitTrig_A2_MoreGnolls_OptLine(  );
    InitTrig_A2_MoreGnolls_Abort(  );
    InitTrig_A2_MoreGnolls_Done(  );
    InitTrig_AutoAttack_Event(  );
    InitTrig_AutoAttack_Q(  );
    InitTrig_H1_HeroLevel_Q(  );
    InitTrig_H1_HeroLevel_Abort(  );
    InitTrig_H1_HeroLevel_DoneA(  );
    InitTrig_H1_HeroLevel_DoneB(  );
    InitTrig_H1_HeroLevel_DoneC(  );
    InitTrig_H2_HeroPoints_Q(  );
    InitTrig_H2_HeroPoints_Abort(  );
    InitTrig_H2_HeroPoints_DoneA(  );
    InitTrig_H2_HeroPoints_DoneB(  );
    InitTrig_H3_SpendPoint_Q(  );
    InitTrig_H3_SpendPoint_Abort(  );
    InitTrig_H3_SpendPoint_Done(  );
    InitTrig_M1_FoundMurlocs_Event(  );
    InitTrig_M1_FoundMurlocs_Q(  );
    InitTrig_M1_FoundMurlocs_Abort(  );
    InitTrig_M1_FoundMurlocs_Done(  );
    InitTrig_M2_UseChainLit_Event(  );
    InitTrig_M2_UseChainLit_Q(  );
    InitTrig_M2_UseChainLit_Abort(  );
    InitTrig_M2_UseChainLit_Done(  );
    InitTrig_I1_PickUpItem_Q(  );
    InitTrig_I1_PickUpItem_Abort(  );
    InitTrig_I1_PickUpItem_Done(  );
    InitTrig_I2_ManaPotion_Q(  );
    InitTrig_I2_ManaPotion_Abort(  );
    InitTrig_I2_ManaPotion_Done(  );
    InitTrig_I3_LowMana_Event(  );
    InitTrig_I3_LowMana_Q(  );
    InitTrig_I3_LowMana_Abort(  );
    InitTrig_I3_LowMana_Done(  );
    InitTrig_C1_Continue_Event(  );
    InitTrig_C1_Continue_Q(  );
    InitTrig_C1_Continue_Ping(  );
    InitTrig_C1_Continue_Abort(  );
    InitTrig_C1_Continue_Done(  );
    InitTrig_N1_Nightfall_Event(  );
    InitTrig_N1_Nightfall_Q(  );
    InitTrig_N1_Nightfall_Abort(  );
    InitTrig_N1_Nightfall_Done(  );
    InitTrig_Hidden_Item_Event(  );
    InitTrig_Hidden_Item_Q(  );
    InitTrig_O1_SleepingOgre_Event(  );
    InitTrig_O1_SleepingOgre_Q(  );
    InitTrig_O1_SleepingOgre_Abort(  );
    InitTrig_O1_SleepingOgre_Done(  );
    InitTrig_G1_Golem_Event(  );
    InitTrig_G1_Golem_Q(  );
    InitTrig_G1_Golem_Abort(  );
    InitTrig_G1_Golem_Done(  );
    InitTrig_G2_Ring_Event(  );
    InitTrig_G2_Ring_Q(  );
    InitTrig_T1_Trolls_Event(  );
    InitTrig_T1_Trolls_Q(  );
    InitTrig_T1_Trolls_Abort(  );
    InitTrig_T1_Trolls_Done(  );
    InitTrig_T2_Tome_Event(  );
    InitTrig_T2_Tome_Q(  );
}

void libGAWT_InitCustomScript () {
    GAw3_Def_Init();
    CreateUnitsForPlayer0();
    InitGlobalsWc3();
    InitCustomTriggers();
}

// Functions
int j_GetRandomInt (int lp_lowBound, int lp_highBound) {
    // Automatic Variable Declarations
    // Implementation
    return RandomInt(lp_lowBound, lp_highBound);
}

fixed j_GetRandomReal (fixed lp_lowBound, fixed lp_highBound) {
    // Automatic Variable Declarations
    // Implementation
    return RandomFixed(lp_lowBound, lp_highBound);
}

int j_GetLocalPlayer () {
    // Automatic Variable Declarations
    // Implementation
    return ObservedPlayerId();
}

string j_Pow2 (int lp_x) {
    // Automatic Variable Declarations
    // Implementation
    return IntToString(lp_x);
}

string j_GetLocalizedString (string lp_source) {
    // Automatic Variable Declarations
    // Implementation
    return TextToString(StringExternal(("UI/" + lp_source)));
}

int j_GetLocalizedHotkey (string lp_source) {
    // Automatic Variable Declarations
    // Implementation
    return (UserDataGetInt("InputKeys", (TextToString(StringExternalHotkey(("UI/" + lp_source)))), "Index", 1));
}

int j_GetDefaultDifficulty () {
    // Automatic Variable Declarations
    // Implementation
    return (CatalogFieldValueGetAsInt(c_gameCatalogGame, "Dflt", "DifficultyDefault", c_playerAny));
}

void j_SetDefaultDifficulty (int lp_g) {
    // Automatic Variable Declarations
}

void j_SetGameDifficulty (int lp_whichdifficulty) {
    // Automatic Variable Declarations
    playergroup auto019DA7CB_g;
    int auto019DA7CB_var;

    // Implementation
    auto019DA7CB_g = PlayerGroupAll();
    auto019DA7CB_var = -1;
    while (true) {
        auto019DA7CB_var = PlayerGroupNextPlayer(auto019DA7CB_g, auto019DA7CB_var);
        if (auto019DA7CB_var < 0) { break; }
        PlayerSetDifficulty(auto019DA7CB_var, (lp_whichdifficulty));
    }
}

int j_ConvertRace (int lp_i) {
    // Automatic Variable Declarations
    // Implementation
    return 0;
}

int j_ConvertAllianceType (int lp_i) {
    // Automatic Variable Declarations
    // Implementation
    return 0;
}

int j_ConvertRacePref (int lp_i) {
    // Automatic Variable Declarations
    // Implementation
    return 0;
}

int j_ConvertIGameState (int lp_i) {
    // Automatic Variable Declarations
    // Implementation
    return 0;
}

int j_ConvertFGameState (int lp_i) {
    // Automatic Variable Declarations
    // Implementation
    return 0;
}

int j_ConvertPlayerState (int lp_i) {
    // Automatic Variable Declarations
    // Implementation
    return 0;
}

int j_ConvertPlayerScore (int lp_i) {
    // Automatic Variable Declarations
    // Implementation
    return 0;
}

int j_ConvertPlayerGameResult (int lp_i) {
    // Automatic Variable Declarations
    // Implementation
    return 0;
}

int j_ConvertUnitState (int lp_i) {
    // Automatic Variable Declarations
    // Implementation
    return 0;
}

int j_ConvertAIDifficulty (int lp_i) {
    // Automatic Variable Declarations
    // Implementation
    return 0;
}

int j_ConvertGameEvent (int lp_i) {
    // Automatic Variable Declarations
    // Implementation
    return 0;
}

int j_ConvertPlayerEvent (int lp_i) {
    // Automatic Variable Declarations
    // Implementation
    return 0;
}

int j_ConvertPlayerUnitEvent (int lp_i) {
    // Automatic Variable Declarations
    // Implementation
    return 0;
}

int j_ConvertWidgetEvent (int lp_i) {
    // Automatic Variable Declarations
    // Implementation
    return 0;
}

int j_ConvertDialogEvent (int lp_i) {
    // Automatic Variable Declarations
    // Implementation
    return 0;
}

int j_ConvertUnitEvent (int lp_i) {
    // Automatic Variable Declarations
    // Implementation
    return 0;
}

int j_ConvertLimitOp (int lp_i) {
    // Automatic Variable Declarations
    // Implementation
    return 0;
}

int j_ConvertUnitType (int lp_i) {
    // Automatic Variable Declarations
    // Implementation
    return 0;
}

int j_ConvertGameSpeed (int lp_i) {
    // Automatic Variable Declarations
    // Implementation
    return 0;
}

int j_ConvertPlacement (int lp_i) {
    // Automatic Variable Declarations
    // Implementation
    return 0;
}

int j_ConvertStartLocPrio (int lp_i) {
    // Automatic Variable Declarations
    // Implementation
    return 0;
}

int j_ConvertGameDifficulty (int lp_i) {
    // Automatic Variable Declarations
    // Implementation
    return 0;
}

int j_ConvertGameType (int lp_i) {
    // Automatic Variable Declarations
    // Implementation
    return 0;
}

int j_ConvertMapFlag (int lp_i) {
    // Automatic Variable Declarations
    // Implementation
    return 0;
}

int j_ConvertMapVisibility (int lp_i) {
    // Automatic Variable Declarations
    // Implementation
    return 0;
}

int j_ConvertMapSetting (int lp_i) {
    // Automatic Variable Declarations
    // Implementation
    return 0;
}

int j_ConvertMapDensity (int lp_i) {
    // Automatic Variable Declarations
    // Implementation
    return 0;
}

int j_ConvertMapControl (int lp_i) {
    // Automatic Variable Declarations
    // Implementation
    return 0;
}

int j_ConvertPlayerColor (int lp_i) {
    // Automatic Variable Declarations
    // Implementation
    return 0;
}

int j_ConvertPlayerSlotState (int lp_i) {
    // Automatic Variable Declarations
    // Implementation
    return 0;
}

int j_ConvertVolumeGroup (int lp_i) {
    // Automatic Variable Declarations
    // Implementation
    return 0;
}

int j_ConvertCameraField (int lp_i) {
    // Automatic Variable Declarations
    // Implementation
    return 0;
}

int j_ConvertBlendMode (int lp_i) {
    // Automatic Variable Declarations
    // Implementation
    return 0;
}

int j_ConvertRarityControl (int lp_i) {
    // Automatic Variable Declarations
    // Implementation
    return 0;
}

int j_ConvertTexMapFlags (int lp_i) {
    // Automatic Variable Declarations
    // Implementation
    return 0;
}

int j_ConvertFogState (int lp_i) {
    // Automatic Variable Declarations
    // Implementation
    return 0;
}

int j_ConvertEffectType (int lp_i) {
    // Automatic Variable Declarations
    // Implementation
    return 0;
}

int j_ConvertVersion (int lp_i) {
    // Automatic Variable Declarations
    // Implementation
    return 0;
}

int j_ConvertItemType (int lp_i) {
    // Automatic Variable Declarations
    // Implementation
    return 0;
}

int j_ConvertAttackType (int lp_i) {
    // Automatic Variable Declarations
    // Implementation
    return 0;
}

int j_ConvertDamageType (int lp_i) {
    // Automatic Variable Declarations
    // Implementation
    return 0;
}

int j_ConvertWeaponType (int lp_i) {
    // Automatic Variable Declarations
    // Implementation
    return 0;
}

int j_ConvertSoundType (int lp_i) {
    // Automatic Variable Declarations
    // Implementation
    return 0;
}

int j_ConvertPathingType (int lp_i) {
    // Automatic Variable Declarations
    // Implementation
    return 0;
}

int j_OrderId (string lp_stgcnawliavybipc) {
    // Automatic Variable Declarations
    // Implementation
    return 0;
}

int j_UnitId (string lp_gfojrunxfqcnjcvv) {
    // Automatic Variable Declarations
    // Implementation
    return 0;
}

int j_AbilityId (string lp_nactcuvnjywoeueu) {
    // Automatic Variable Declarations
    // Implementation
    return 0;
}

string j_GetObjectName (int lp_objectId) {
    // Automatic Variable Declarations
    // Implementation
    return null;
}

fixed j_Sin (fixed lp_radians) {
    // Automatic Variable Declarations
    // Implementation
    return 0;
}

fixed j_Cos (fixed lp_radians) {
    // Automatic Variable Declarations
    // Implementation
    return 0;
}

fixed j_Tan (fixed lp_radians) {
    // Automatic Variable Declarations
    // Implementation
    return 0;
}

fixed j_Asin (fixed lp_y) {
    // Automatic Variable Declarations
    // Implementation
    return 0;
}

fixed j_Acos (fixed lp_x) {
    // Automatic Variable Declarations
    // Implementation
    return 0;
}

fixed j_Atan (fixed lp_x) {
    // Automatic Variable Declarations
    // Implementation
    return 0;
}

fixed j_SquareRoot (fixed lp_x) {
    // Automatic Variable Declarations
    // Implementation
    return 0;
}

fixed j_Pow (fixed lp_x, fixed lp_power) {
    // Automatic Variable Declarations
    // Implementation
    return 0;
}

int j_GetHandleId (int lp_h) {
    // Automatic Variable Declarations
    // Implementation
    return 0;
}

string j_SubString (string lp_source, int lp_start, int lp_end) {
    // Automatic Variable Declarations
    // Implementation
    return null;
}

int j_StringLength (string lp_s) {
    // Automatic Variable Declarations
    // Implementation
    return 0;
}

string j_StringCase (string lp_source, bool lp_upper) {
    // Automatic Variable Declarations
    // Implementation
    return null;
}

int j_StringHash (string lp_s) {
    // Automatic Variable Declarations
    // Implementation
    return 0;
}

void j_SetMapName (string lp_name) {
    // Automatic Variable Declarations
}

void j_SetMapDescription (string lp_description) {
    // Automatic Variable Declarations
}

void j_SetTeams (int lp_teamcount) {
    // Automatic Variable Declarations
}

void j_SetPlayers (int lp_playercount) {
    // Automatic Variable Declarations
}

void j_DefineStartLocation (int lp_whichStartLoc, fixed lp_x, fixed lp_y) {
    // Automatic Variable Declarations
}

void j_DefineStartLocationLoc (int lp_whichStartLoc, point lp_whichLocation) {
    // Automatic Variable Declarations
}

void j_SetStartLocPrioCount (int lp_whichStartLoc, int lp_prioSlotCount) {
    // Automatic Variable Declarations
}

void j_SetStartLocPrio (int lp_whichStartLoc, int lp_prioSlotIndex, int lp_otherStartLocIndex, int lp_priority) {
    // Automatic Variable Declarations
}

int j_GetStartLocPrioSlot (int lp_whichStartLoc, int lp_prioSlotIndex) {
    // Automatic Variable Declarations
    // Implementation
    return 0;
}

int j_GetStartLocPrio (int lp_whichStartLoc, int lp_prioSlotIndex) {
    // Automatic Variable Declarations
    // Implementation
    return 0;
}

void j_SetGameTypeSupported (int lp_whichGameType, bool lp_value) {
    // Automatic Variable Declarations
}

void j_SetMapFlag (int lp_whichMapFlag, bool lp_value) {
    // Automatic Variable Declarations
}

void j_SetGamePlacement (int lp_whichPlacementType) {
    // Automatic Variable Declarations
}

void j_SetGameSpeed (int lp_whichspeed) {
    // Automatic Variable Declarations
}

void j_SetResourceDensity (int lp_whichdensity) {
    // Automatic Variable Declarations
}

void j_SetCreatureDensity (int lp_whichdensity) {
    // Automatic Variable Declarations
}

int j_GetTeams () {
    // Automatic Variable Declarations
    // Implementation
    return 0;
}

int j_GetPlayers () {
    // Automatic Variable Declarations
    // Implementation
    return 0;
}

bool j_IsGameTypeSupported (int lp_whichGameType) {
    // Automatic Variable Declarations
    // Implementation
    return false;
}

int j_GetGameTypeSelected () {
    // Automatic Variable Declarations
    // Implementation
    return 0;
}

bool j_IsMapFlagSet (int lp_whichMapFlag) {
    // Automatic Variable Declarations
    // Implementation
    return false;
}

int j_GetGamePlacement () {
    // Automatic Variable Declarations
    // Implementation
    return 0;
}

int j_GetGameSpeed () {
    // Automatic Variable Declarations
    // Implementation
    return 0;
}

int j_GetGameDifficulty () {
    // Automatic Variable Declarations
    // Implementation
    return 0;
}

int j_GetResourceDensity () {
    // Automatic Variable Declarations
    // Implementation
    return 0;
}

int j_GetCreatureDensity () {
    // Automatic Variable Declarations
    // Implementation
    return 0;
}

fixed j_GetStartLocationX (int lp_whichStartLocation) {
    // Automatic Variable Declarations
    // Implementation
    return 0;
}

fixed j_GetStartLocationY (int lp_whichStartLocation) {
    // Automatic Variable Declarations
    // Implementation
    return 0;
}

point j_GetStartLocationLoc (int lp_whichStartLocation) {
    // Automatic Variable Declarations
    // Implementation
    return null;
}

void j_SetPlayerTeam (int lp_whichPlayer, int lp_whichTeam) {
    // Automatic Variable Declarations
}

void j_SetPlayerStartLocation (int lp_whichPlayer, int lp_startLocIndex) {
    // Automatic Variable Declarations
}

void j_ForcePlayerStartLocation (int lp_whichPlayer, int lp_startLocIndex) {
    // Automatic Variable Declarations
}

void j_SetPlayerColor (int lp_whichPlayer, int lp_color) {
    // Automatic Variable Declarations
}

void j_SetPlayerAlliance (int lp_sourcePlayer, int lp_otherPlayer, int lp_whichAllianceSetting, bool lp_value) {
    // Automatic Variable Declarations
}

void j_SetPlayerTaxRate (int lp_sourcePlayer, int lp_otherPlayer, int lp_whichResource, int lp_rate) {
    // Automatic Variable Declarations
}

void j_SetPlayerRacePreference (int lp_whichPlayer, int lp_whichRacePreference) {
    // Automatic Variable Declarations
}

void j_SetPlayerRaceSelectable (int lp_whichPlayer, bool lp_value) {
    // Automatic Variable Declarations
}

void j_SetPlayerController (int lp_whichPlayer, int lp_controlType) {
    // Automatic Variable Declarations
}

void j_SetPlayerName (int lp_whichPlayer, string lp_name) {
    // Automatic Variable Declarations
}

void j_SetPlayerOnScoreScreen (int lp_whichPlayer, bool lp_flag) {
    // Automatic Variable Declarations
}

int j_GetPlayerTeam (int lp_whichPlayer) {
    // Automatic Variable Declarations
    // Implementation
    return 0;
}

int j_GetPlayerStartLocation (int lp_whichPlayer) {
    // Automatic Variable Declarations
    // Implementation
    return 0;
}

int j_GetPlayerColor (int lp_whichPlayer) {
    // Automatic Variable Declarations
    // Implementation
    return 0;
}

bool j_GetPlayerSelectable (int lp_whichPlayer) {
    // Automatic Variable Declarations
    // Implementation
    return false;
}

int j_GetPlayerController (int lp_whichPlayer) {
    // Automatic Variable Declarations
    // Implementation
    return 0;
}

int j_GetPlayerSlotState (int lp_whichPlayer) {
    // Automatic Variable Declarations
    // Implementation
    return 0;
}

int j_GetPlayerTaxRate (int lp_sourcePlayer, int lp_otherPlayer, int lp_whichResource) {
    // Automatic Variable Declarations
    // Implementation
    return 0;
}

bool j_IsPlayerRacePrefSet (int lp_whichPlayer, int lp_pref) {
    // Automatic Variable Declarations
    // Implementation
    return false;
}

string j_GetPlayerName (int lp_whichPlayer) {
    // Automatic Variable Declarations
    // Implementation
    return null;
}

timer j_CreateTimer () {
    // Automatic Variable Declarations
    // Implementation
    return null;
}

void j_DestroyTimer (timer lp_whichTimer) {
    // Automatic Variable Declarations
}

void j_TimerStart (timer lp_whichTimer, fixed lp_timeout, bool lp_periodic, string lp_handlerFunc) {
    // Automatic Variable Declarations
}

fixed j_TimerGetElapsed (timer lp_whichTimer) {
    // Automatic Variable Declarations
    // Implementation
    return 0;
}

fixed j_TimerGetRemaining (timer lp_whichTimer) {
    // Automatic Variable Declarations
    // Implementation
    return 0;
}

fixed j_TimerGetTimeout (timer lp_whichTimer) {
    // Automatic Variable Declarations
    // Implementation
    return 0;
}

void j_PauseTimer (timer lp_whichTimer) {
    // Automatic Variable Declarations
}

void j_ResumeTimer (timer lp_whichTimer) {
    // Automatic Variable Declarations
}

timer j_GetExpiredTimer () {
    // Automatic Variable Declarations
    // Implementation
    return null;
}

unitgroup j_CreateGroup () {
    // Automatic Variable Declarations
    // Implementation
    return null;
}

void j_DestroyGroup (unitgroup lp_whichGroup) {
    // Automatic Variable Declarations
}

void j_GroupAddUnit (unitgroup lp_whichGroup, unit lp_whichUnit) {
    // Automatic Variable Declarations
}

void j_GroupRemoveUnit (unitgroup lp_whichGroup, unit lp_whichUnit) {
    // Automatic Variable Declarations
}

void j_GroupClear (unitgroup lp_whichGroup) {
    // Automatic Variable Declarations
}

void j_GroupEnumUnitsOfType (unitgroup lp_whichGroup, string lp_unitname, string lp_filter) {
    // Automatic Variable Declarations
}

void j_GroupEnumUnitsOfPlayer (unitgroup lp_whichGroup, int lp_whichPlayer, string lp_filter) {
    // Automatic Variable Declarations
}

void j_GroupEnumUnitsOfTypeCounted (unitgroup lp_whichGroup, string lp_unitname, string lp_filter, int lp_countLimit) {
    // Automatic Variable Declarations
}

void j_GroupEnumUnitsInRect (unitgroup lp_whichGroup, region lp_r, string lp_filter) {
    // Automatic Variable Declarations
}

void j_GroupEnumUnitsInRectCounted (unitgroup lp_whichGroup, region lp_r, string lp_filter, int lp_countLimit) {
    // Automatic Variable Declarations
}

void j_GroupEnumUnitsInRange (unitgroup lp_whichGroup, fixed lp_x, fixed lp_y, fixed lp_radius, string lp_filter) {
    // Automatic Variable Declarations
}

void j_GroupEnumUnitsInRangeOfLoc (unitgroup lp_whichGroup, point lp_whichLocation, fixed lp_radius, string lp_filter) {
    // Automatic Variable Declarations
}

void j_GroupEnumUnitsInRangeCounted (unitgroup lp_whichGroup, fixed lp_x, fixed lp_y, fixed lp_radius, string lp_filter, int lp_countLimit) {
    // Automatic Variable Declarations
}

void j_GroupEnumUnitsInRangeOfLocCounted (unitgroup lp_whichGroup, point lp_whichLocation, fixed lp_radius, string lp_filter, int lp_countLimit) {
    // Automatic Variable Declarations
}

void j_GroupEnumUnitsSelected (unitgroup lp_whichGroup, int lp_whichPlayer, string lp_filter) {
    // Automatic Variable Declarations
}

bool j_GroupImmediateOrder (unitgroup lp_whichGroup, string lp_order) {
    // Automatic Variable Declarations
    // Implementation
    return false;
}

bool j_GroupImmediateOrderById (unitgroup lp_whichGroup, int lp_order) {
    // Automatic Variable Declarations
    // Implementation
    return false;
}

bool j_GroupPointOrder (unitgroup lp_whichGroup, string lp_order, fixed lp_x, fixed lp_y) {
    // Automatic Variable Declarations
    // Implementation
    return false;
}

bool j_GroupPointOrderLoc (unitgroup lp_whichGroup, string lp_order, point lp_whichLocation) {
    // Automatic Variable Declarations
    // Implementation
    return false;
}

bool j_GroupPointOrderById (unitgroup lp_whichGroup, int lp_order, fixed lp_x, fixed lp_y) {
    // Automatic Variable Declarations
    // Implementation
    return false;
}

bool j_GroupPointOrderByIdLoc (unitgroup lp_whichGroup, int lp_order, point lp_whichLocation) {
    // Automatic Variable Declarations
    // Implementation
    return false;
}

bool j_GroupTargetOrder (unitgroup lp_whichGroup, string lp_order, unit lp_targetWidget) {
    // Automatic Variable Declarations
    // Implementation
    return false;
}

bool j_GroupTargetOrderById (unitgroup lp_whichGroup, int lp_order, unit lp_targetWidget) {
    // Automatic Variable Declarations
    // Implementation
    return false;
}

void j_ForGroup (unitgroup lp_whichGroup, string lp_callback) {
    // Automatic Variable Declarations
}

unit j_FirstOfGroup (unitgroup lp_whichGroup) {
    // Automatic Variable Declarations
    // Implementation
    return null;
}

playergroup j_CreateForce () {
    // Automatic Variable Declarations
    // Implementation
    return null;
}

void j_DestroyForce (playergroup lp_whichForce) {
    // Automatic Variable Declarations
}

void j_ForceAddPlayer (playergroup lp_whichForce, int lp_whichPlayer) {
    // Automatic Variable Declarations
}

void j_ForceRemovePlayer (playergroup lp_whichForce, int lp_whichPlayer) {
    // Automatic Variable Declarations
}

void j_ForceClear (playergroup lp_whichForce) {
    // Automatic Variable Declarations
}

void j_ForceEnumPlayers (playergroup lp_whichForce, string lp_filter) {
    // Automatic Variable Declarations
}

void j_ForceEnumPlayersCounted (playergroup lp_whichForce, string lp_filter, int lp_countLimit) {
    // Automatic Variable Declarations
}

void j_ForceEnumAllies (playergroup lp_whichForce, int lp_whichPlayer, string lp_filter) {
    // Automatic Variable Declarations
}

void j_ForceEnumEnemies (playergroup lp_whichForce, int lp_whichPlayer, string lp_filter) {
    // Automatic Variable Declarations
}

void j_ForForce (playergroup lp_whichForce, string lp_callback) {
    // Automatic Variable Declarations
}

region j_Rect (fixed lp_minx, fixed lp_miny, fixed lp_maxx, fixed lp_maxy) {
    // Automatic Variable Declarations
    // Implementation
    return null;
}

region j_RectFromLoc (point lp_min, point lp_max) {
    // Automatic Variable Declarations
    // Implementation
    return null;
}

void j_RemoveRect (region lp_whichRect) {
    // Automatic Variable Declarations
}

void j_SetRect (region lp_whichRect, fixed lp_minx, fixed lp_miny, fixed lp_maxx, fixed lp_maxy) {
    // Automatic Variable Declarations
}

void j_SetRectFromLoc (region lp_whichRect, point lp_min, point lp_max) {
    // Automatic Variable Declarations
}

void j_MoveRectTo (region lp_whichRect, fixed lp_newCenterX, fixed lp_newCenterY) {
    // Automatic Variable Declarations
}

void j_MoveRectToLoc (region lp_whichRect, point lp_newCenterLoc) {
    // Automatic Variable Declarations
}

fixed j_GetRectCenterX (region lp_whichRect) {
    // Automatic Variable Declarations
    // Implementation
    return 0;
}

fixed j_GetRectCenterY (region lp_whichRect) {
    // Automatic Variable Declarations
    // Implementation
    return 0;
}

fixed j_GetRectMinX (region lp_whichRect) {
    // Automatic Variable Declarations
    // Implementation
    return 0;
}

fixed j_GetRectMinY (region lp_whichRect) {
    // Automatic Variable Declarations
    // Implementation
    return 0;
}

fixed j_GetRectMaxX (region lp_whichRect) {
    // Automatic Variable Declarations
    // Implementation
    return 0;
}

fixed j_GetRectMaxY (region lp_whichRect) {
    // Automatic Variable Declarations
    // Implementation
    return 0;
}

region j_CreateRegion () {
    // Automatic Variable Declarations
    // Implementation
    return null;
}

void j_RemoveRegion (region lp_whichRegion) {
    // Automatic Variable Declarations
}

void j_RegionAddRect (region lp_whichRegion, region lp_r) {
    // Automatic Variable Declarations
}

void j_RegionClearRect (region lp_whichRegion, region lp_r) {
    // Automatic Variable Declarations
}

void j_RegionAddCell (region lp_whichRegion, fixed lp_x, fixed lp_y) {
    // Automatic Variable Declarations
}

void j_RegionAddCellAtLoc (region lp_whichRegion, point lp_whichLocation) {
    // Automatic Variable Declarations
}

void j_RegionClearCell (region lp_whichRegion, fixed lp_x, fixed lp_y) {
    // Automatic Variable Declarations
}

void j_RegionClearCellAtLoc (region lp_whichRegion, point lp_whichLocation) {
    // Automatic Variable Declarations
}

point j_Location (fixed lp_x, fixed lp_y) {
    // Automatic Variable Declarations
    // Implementation
    return null;
}

void j_RemoveLocation (point lp_whichLocation) {
    // Automatic Variable Declarations
}

void j_MoveLocation (point lp_whichLocation, fixed lp_newX, fixed lp_newY) {
    // Automatic Variable Declarations
}

fixed j_GetLocationX (point lp_whichLocation) {
    // Automatic Variable Declarations
    // Implementation
    return 0;
}

fixed j_GetLocationY (point lp_whichLocation) {
    // Automatic Variable Declarations
    // Implementation
    return 0;
}

fixed j_GetLocationZ (point lp_whichLocation) {
    // Automatic Variable Declarations
    // Implementation
    return 0;
}

bool j_IsUnitInRegion (region lp_whichRegion, unit lp_whichUnit) {
    // Automatic Variable Declarations
    // Implementation
    return false;
}

bool j_IsPointInRegion (region lp_whichRegion, fixed lp_x, fixed lp_y) {
    // Automatic Variable Declarations
    // Implementation
    return false;
}

bool j_IsLocationInRegion (region lp_whichRegion, point lp_whichLocation) {
    // Automatic Variable Declarations
    // Implementation
    return false;
}

region j_GetWorldBounds () {
    // Automatic Variable Declarations
    // Implementation
    return null;
}

trigger j_CreateTrigger () {
    // Automatic Variable Declarations
    // Implementation
    return null;
}

void j_DestroyTrigger (trigger lp_whichTrigger) {
    // Automatic Variable Declarations
}

void j_ResetTrigger (trigger lp_whichTrigger) {
    // Automatic Variable Declarations
}

void j_EnableTrigger (trigger lp_whichTrigger) {
    // Automatic Variable Declarations
}

void j_DisableTrigger (trigger lp_whichTrigger) {
    // Automatic Variable Declarations
}

bool j_IsTriggerEnabled (trigger lp_whichTrigger) {
    // Automatic Variable Declarations
    // Implementation
    return false;
}

void j_TriggerWaitOnSleeps (trigger lp_whichTrigger, bool lp_flag) {
    // Automatic Variable Declarations
}

bool j_IsTriggerWaitOnSleeps (trigger lp_whichTrigger) {
    // Automatic Variable Declarations
    // Implementation
    return false;
}

unit j_GetFilterUnit () {
    // Automatic Variable Declarations
    // Implementation
    return null;
}

unit j_GetEnumUnit () {
    // Automatic Variable Declarations
    // Implementation
    return null;
}

unit j_GetFilterDestructable () {
    // Automatic Variable Declarations
    // Implementation
    return null;
}

unit j_GetEnumDestructable () {
    // Automatic Variable Declarations
    // Implementation
    return null;
}

unit j_GetFilterItem () {
    // Automatic Variable Declarations
    // Implementation
    return null;
}

unit j_GetEnumItem () {
    // Automatic Variable Declarations
    // Implementation
    return null;
}

int j_GetFilterPlayer () {
    // Automatic Variable Declarations
    // Implementation
    return 0;
}

int j_GetEnumPlayer () {
    // Automatic Variable Declarations
    // Implementation
    return 0;
}

trigger j_GetTriggeringTrigger () {
    // Automatic Variable Declarations
    // Implementation
    return null;
}

int j_GetTriggerEventId () {
    // Automatic Variable Declarations
    // Implementation
    return 0;
}

int j_GetTriggerEvalCount (trigger lp_whichTrigger) {
    // Automatic Variable Declarations
    // Implementation
    return 0;
}

int j_GetTriggerExecCount (trigger lp_whichTrigger) {
    // Automatic Variable Declarations
    // Implementation
    return 0;
}

void j_ExecuteFunc (string lp_funcName) {
    // Automatic Variable Declarations
}

string j_And (string lp_operandA, string lp_operandB) {
    // Automatic Variable Declarations
    // Implementation
    return null;
}

string j_Or (string lp_operandA, string lp_operandB) {
    // Automatic Variable Declarations
    // Implementation
    return null;
}

string j_Not (string lp_operand) {
    // Automatic Variable Declarations
    // Implementation
    return null;
}

string j_Condition (string lp_func) {
    // Automatic Variable Declarations
    // Implementation
    return null;
}

void j_DestroyCondition (string lp_c) {
    // Automatic Variable Declarations
}

string j_Filter (string lp_func) {
    // Automatic Variable Declarations
    // Implementation
    return null;
}

void j_DestroyFilter (string lp_f) {
    // Automatic Variable Declarations
}

void j_DestroyBoolExpr (string lp_e) {
    // Automatic Variable Declarations
}

void j_TriggerRegisterVariableEvent (trigger t, trigger lp_whichTrigger, string lp_varName, int lp_opcode, fixed lp_limitval) {
    // Automatic Variable Declarations
    // Implementation
}

void j_TriggerRegisterTimerEvent (trigger t, trigger lp_whichTrigger, fixed lp_timeout, bool lp_periodic) {
    // Automatic Variable Declarations
    // Implementation
}

void j_TriggerRegisterTimerExpireEvent (trigger t, trigger lp_whichTrigger, timer lp_t) {
    // Automatic Variable Declarations
    // Implementation
}

void j_TriggerRegisterGameStateEvent (trigger t, trigger lp_whichTrigger, int lp_whichState, int lp_opcode, fixed lp_limitval) {
    // Automatic Variable Declarations
    // Implementation
}

void j_TriggerRegisterDialogEvent (trigger t, trigger lp_whichTrigger, int lp_whichDialog) {
    // Automatic Variable Declarations
    // Implementation
}

void j_TriggerRegisterDialogButtonEvent (trigger t, trigger lp_whichTrigger, int lp_whichButton) {
    // Automatic Variable Declarations
    // Implementation
}

int j_GetEventGameState () {
    // Automatic Variable Declarations
    // Implementation
    return 0;
}

void j_TriggerRegisterGameEvent (trigger t, trigger lp_whichTrigger, int lp_whichGameEvent) {
    // Automatic Variable Declarations
    // Implementation
}

int j_GetWinningPlayer () {
    // Automatic Variable Declarations
    // Implementation
    return 0;
}

void j_TriggerRegisterEnterRegion (trigger t, trigger lp_whichTrigger, region lp_whichRegion, string lp_filter) {
    // Automatic Variable Declarations
    // Implementation
}

region j_GetTriggeringRegion () {
    // Automatic Variable Declarations
    // Implementation
    return null;
}

unit j_GetEnteringUnit () {
    // Automatic Variable Declarations
    // Implementation
    return null;
}

void j_TriggerRegisterLeaveRegion (trigger t, trigger lp_whichTrigger, region lp_whichRegion, string lp_filter) {
    // Automatic Variable Declarations
    // Implementation
}

unit j_GetLeavingUnit () {
    // Automatic Variable Declarations
    // Implementation
    return null;
}

void j_TriggerRegisterTrackableHitEvent (trigger t, trigger lp_whichTrigger, unit lp_t) {
    // Automatic Variable Declarations
    // Implementation
}

void j_TriggerRegisterTrackableTrackEvent (trigger t, trigger lp_whichTrigger, unit lp_t) {
    // Automatic Variable Declarations
    // Implementation
}

unit j_GetTriggeringTrackable () {
    // Automatic Variable Declarations
    // Implementation
    return null;
}

int j_GetClickedButton () {
    // Automatic Variable Declarations
    // Implementation
    return 0;
}

int j_GetClickedDialog () {
    // Automatic Variable Declarations
    // Implementation
    return 0;
}

fixed j_GetTournamentFinishSoonTimeRemaining () {
    // Automatic Variable Declarations
    // Implementation
    return 0;
}

int j_GetTournamentFinishNowRule () {
    // Automatic Variable Declarations
    // Implementation
    return 0;
}

int j_GetTournamentFinishNowPlayer () {
    // Automatic Variable Declarations
    // Implementation
    return 0;
}

int j_GetTournamentScore (int lp_whichPlayer) {
    // Automatic Variable Declarations
    // Implementation
    return 0;
}

string j_GetSaveBasicFilename () {
    // Automatic Variable Declarations
    // Implementation
    return null;
}

void j_TriggerRegisterPlayerEvent (trigger t, trigger lp_whichTrigger, int lp_kqxywuwdahrvpape, int lp_whichPlayerEvent) {
    // Automatic Variable Declarations
    // Implementation
}

int j_GetTriggerPlayer () {
    // Automatic Variable Declarations
    // Implementation
    return 0;
}

void j_TriggerRegisterPlayerUnitEvent (trigger t, trigger lp_whichTrigger, int lp_whichPlayer, int lp_whichPlayerUnitEvent, string lp_filter) {
    // Automatic Variable Declarations
    // Implementation
}

unit j_GetLevelingUnit () {
    // Automatic Variable Declarations
    // Implementation
    return null;
}

unit j_GetLearningUnit () {
    // Automatic Variable Declarations
    // Implementation
    return null;
}

int j_GetLearnedSkill () {
    // Automatic Variable Declarations
    // Implementation
    return 0;
}

int j_GetLearnedSkillLevel () {
    // Automatic Variable Declarations
    // Implementation
    return 0;
}

unit j_GetRevivableUnit () {
    // Automatic Variable Declarations
    // Implementation
    return null;
}

unit j_GetRevivingUnit () {
    // Automatic Variable Declarations
    // Implementation
    return null;
}

unit j_GetAttacker () {
    // Automatic Variable Declarations
    // Implementation
    return null;
}

unit j_GetRescuer () {
    // Automatic Variable Declarations
    // Implementation
    return null;
}

unit j_GetDyingUnit () {
    // Automatic Variable Declarations
    // Implementation
    return null;
}

unit j_GetKillingUnit () {
    // Automatic Variable Declarations
    // Implementation
    return null;
}

unit j_GetDecayingUnit () {
    // Automatic Variable Declarations
    // Implementation
    return null;
}

unit j_GetConstructingStructure () {
    // Automatic Variable Declarations
    // Implementation
    return null;
}

unit j_GetCancelledStructure () {
    // Automatic Variable Declarations
    // Implementation
    return null;
}

unit j_GetConstructedStructure () {
    // Automatic Variable Declarations
    // Implementation
    return null;
}

unit j_GetResearchingUnit () {
    // Automatic Variable Declarations
    // Implementation
    return null;
}

int j_GetResearched () {
    // Automatic Variable Declarations
    // Implementation
    return 0;
}

int j_GetTrainedUnitType () {
    // Automatic Variable Declarations
    // Implementation
    return 0;
}

unit j_GetTrainedUnit () {
    // Automatic Variable Declarations
    // Implementation
    return null;
}

unit j_GetDetectedUnit () {
    // Automatic Variable Declarations
    // Implementation
    return null;
}

unit j_GetSummoningUnit () {
    // Automatic Variable Declarations
    // Implementation
    return null;
}

unit j_GetSummonedUnit () {
    // Automatic Variable Declarations
    // Implementation
    return null;
}

unit j_GetTransportUnit () {
    // Automatic Variable Declarations
    // Implementation
    return null;
}

unit j_GetLoadedUnit () {
    // Automatic Variable Declarations
    // Implementation
    return null;
}

unit j_GetSellingUnit () {
    // Automatic Variable Declarations
    // Implementation
    return null;
}

unit j_GetSoldUnit () {
    // Automatic Variable Declarations
    // Implementation
    return null;
}

unit j_GetBuyingUnit () {
    // Automatic Variable Declarations
    // Implementation
    return null;
}

unit j_GetSoldItem () {
    // Automatic Variable Declarations
    // Implementation
    return null;
}

unit j_GetChangingUnit () {
    // Automatic Variable Declarations
    // Implementation
    return null;
}

int j_GetChangingUnitPrevOwner () {
    // Automatic Variable Declarations
    // Implementation
    return 0;
}

unit j_GetManipulatingUnit () {
    // Automatic Variable Declarations
    // Implementation
    return null;
}

unit j_GetManipulatedItem () {
    // Automatic Variable Declarations
    // Implementation
    return null;
}

unit j_GetOrderedUnit () {
    // Automatic Variable Declarations
    // Implementation
    return null;
}

int j_GetIssuedOrderId () {
    // Automatic Variable Declarations
    // Implementation
    return 0;
}

fixed j_GetOrderPointX () {
    // Automatic Variable Declarations
    // Implementation
    return 0;
}

fixed j_GetOrderPointY () {
    // Automatic Variable Declarations
    // Implementation
    return 0;
}

point j_GetOrderPointLoc () {
    // Automatic Variable Declarations
    // Implementation
    return null;
}

unit j_GetOrderTarget () {
    // Automatic Variable Declarations
    // Implementation
    return null;
}

unit j_GetOrderTargetDestructable () {
    // Automatic Variable Declarations
    // Implementation
    return null;
}

unit j_GetOrderTargetItem () {
    // Automatic Variable Declarations
    // Implementation
    return null;
}

unit j_GetOrderTargetUnit () {
    // Automatic Variable Declarations
    // Implementation
    return null;
}

unit j_GetSpellAbilityUnit () {
    // Automatic Variable Declarations
    // Implementation
    return null;
}

int j_GetSpellAbilityId () {
    // Automatic Variable Declarations
    // Implementation
    return 0;
}

string j_GetSpellAbility () {
    // Automatic Variable Declarations
    // Implementation
    return null;
}

point j_GetSpellTargetLoc () {
    // Automatic Variable Declarations
    // Implementation
    return null;
}

fixed j_GetSpellTargetX () {
    // Automatic Variable Declarations
    // Implementation
    return 0;
}

fixed j_GetSpellTargetY () {
    // Automatic Variable Declarations
    // Implementation
    return 0;
}

unit j_GetSpellTargetDestructable () {
    // Automatic Variable Declarations
    // Implementation
    return null;
}

unit j_GetSpellTargetItem () {
    // Automatic Variable Declarations
    // Implementation
    return null;
}

unit j_GetSpellTargetUnit () {
    // Automatic Variable Declarations
    // Implementation
    return null;
}

void j_TriggerRegisterPlayerAllianceChange (trigger t, trigger lp_whichTrigger, int lp_whichPlayer, int lp_whichAlliance) {
    // Automatic Variable Declarations
    // Implementation
}

void j_TriggerRegisterPlayerStateEvent (trigger t, trigger lp_whichTrigger, int lp_whichPlayer, int lp_whichState, int lp_opcode, fixed lp_limitval) {
    // Automatic Variable Declarations
    // Implementation
}

int j_GetEventPlayerState () {
    // Automatic Variable Declarations
    // Implementation
    return 0;
}

void j_TriggerRegisterPlayerChatEvent (trigger t, trigger lp_whichTrigger, int lp_whichPlayer, string lp_chatMessageToDetect, bool lp_exactMatchOnly) {
    // Automatic Variable Declarations
    // Implementation
}

string j_GetEventPlayerChatString () {
    // Automatic Variable Declarations
    // Implementation
    return null;
}

string j_GetEventPlayerChatStringMatched () {
    // Automatic Variable Declarations
    // Implementation
    return null;
}

void j_TriggerRegisterDeathEvent (trigger t, trigger lp_whichTrigger, unit lp_whichWidget) {
    // Automatic Variable Declarations
    // Implementation
}

unit j_GetTriggerUnit () {
    // Automatic Variable Declarations
    // Implementation
    return null;
}

void j_TriggerRegisterUnitStateEvent (trigger t, trigger lp_whichTrigger, unit lp_whichUnit, int lp_whichState, int lp_opcode, fixed lp_limitval) {
    // Automatic Variable Declarations
    // Implementation
}

int j_GetEventUnitState () {
    // Automatic Variable Declarations
    // Implementation
    return 0;
}

void j_TriggerRegisterUnitEvent (trigger t, trigger lp_whichTrigger, unit lp_whichUnit, int lp_whichEvent) {
    // Automatic Variable Declarations
    // Implementation
}

fixed j_GetEventDamage () {
    // Automatic Variable Declarations
    // Implementation
    return 0;
}

unit j_GetEventDamageSource () {
    // Automatic Variable Declarations
    // Implementation
    return null;
}

int j_GetEventDetectingPlayer () {
    // Automatic Variable Declarations
    // Implementation
    return 0;
}

void j_TriggerRegisterFilterUnitEvent (trigger t, trigger lp_whichTrigger, unit lp_whichUnit, int lp_whichEvent, string lp_filter) {
    // Automatic Variable Declarations
    // Implementation
}

unit j_GetEventTargetUnit () {
    // Automatic Variable Declarations
    // Implementation
    return null;
}

void j_TriggerRegisterUnitInRange (trigger t, trigger lp_whichTrigger, unit lp_whichUnit, fixed lp_range, string lp_filter) {
    // Automatic Variable Declarations
    // Implementation
}

string j_TriggerAddCondition (trigger lp_whichTrigger, string lp_condition) {
    // Automatic Variable Declarations
    // Implementation
    return null;
}

void j_TriggerRemoveCondition (trigger lp_whichTrigger, string lp_whichCondition) {
    // Automatic Variable Declarations
}

void j_TriggerClearConditions (trigger lp_whichTrigger) {
    // Automatic Variable Declarations
}

string j_TriggerAddAction (trigger lp_whichTrigger, string lp_actionFunc) {
    // Automatic Variable Declarations
    // Implementation
    return null;
}

void j_TriggerRemoveAction (trigger lp_whichTrigger, string lp_whichAction) {
    // Automatic Variable Declarations
}

void j_TriggerClearActions (trigger lp_whichTrigger) {
    // Automatic Variable Declarations
}

void j_TriggerSleepAction (fixed lp_timeout) {
    // Automatic Variable Declarations
}

void j_TriggerWaitForSound (sound lp_s, fixed lp_offset) {
    // Automatic Variable Declarations
}

bool j_TriggerEvaluate (trigger lp_whichTrigger) {
    // Automatic Variable Declarations
    // Implementation
    return false;
}

void j_TriggerExecute (trigger lp_whichTrigger) {
    // Automatic Variable Declarations
}

void j_TriggerExecuteWait (trigger lp_whichTrigger) {
    // Automatic Variable Declarations
}

void j_TriggerSyncStart () {
    // Automatic Variable Declarations
}

void j_TriggerSyncReady () {
    // Automatic Variable Declarations
}

fixed j_GetWidgetLife (unit lp_whichWidget) {
    // Automatic Variable Declarations
    // Implementation
    return 0;
}

void j_SetWidgetLife (unit lp_whichWidget, fixed lp_newLife) {
    // Automatic Variable Declarations
}

fixed j_GetWidgetX (unit lp_whichWidget) {
    // Automatic Variable Declarations
    // Implementation
    return 0;
}

fixed j_GetWidgetY (unit lp_whichWidget) {
    // Automatic Variable Declarations
    // Implementation
    return 0;
}

unit j_GetTriggerWidget () {
    // Automatic Variable Declarations
    // Implementation
    return null;
}

unit j_CreateDestructable (int lp_objectid, fixed lp_x, fixed lp_y, fixed lp_face, fixed lp_scale, int lp_variation) {
    // Automatic Variable Declarations
    // Implementation
    return null;
}

unit j_CreateDestructableZ (int lp_objectid, fixed lp_x, fixed lp_y, fixed lp_z, fixed lp_face, fixed lp_scale, int lp_variation) {
    // Automatic Variable Declarations
    // Implementation
    return null;
}

unit j_CreateDeadDestructable (int lp_objectid, fixed lp_x, fixed lp_y, fixed lp_face, fixed lp_scale, int lp_variation) {
    // Automatic Variable Declarations
    // Implementation
    return null;
}

unit j_CreateDeadDestructableZ (int lp_objectid, fixed lp_x, fixed lp_y, fixed lp_z, fixed lp_face, fixed lp_scale, int lp_variation) {
    // Automatic Variable Declarations
    // Implementation
    return null;
}

void j_RemoveDestructable (unit lp_d) {
    // Automatic Variable Declarations
}

void j_KillDestructable (unit lp_d) {
    // Automatic Variable Declarations
}

void j_SetDestructableInvulnerable (unit lp_d, bool lp_flag) {
    // Automatic Variable Declarations
}

bool j_IsDestructableInvulnerable (unit lp_d) {
    // Automatic Variable Declarations
    // Implementation
    return false;
}

void j_EnumDestructablesInRect (region lp_r, string lp_filter, string lp_actionFunc) {
    // Automatic Variable Declarations
}

int j_GetDestructableTypeId (unit lp_d) {
    // Automatic Variable Declarations
    // Implementation
    return 0;
}

fixed j_GetDestructableX (unit lp_d) {
    // Automatic Variable Declarations
    // Implementation
    return 0;
}

fixed j_GetDestructableY (unit lp_d) {
    // Automatic Variable Declarations
    // Implementation
    return 0;
}

void j_SetDestructableLife (unit lp_d, fixed lp_life) {
    // Automatic Variable Declarations
}

fixed j_GetDestructableLife (unit lp_d) {
    // Automatic Variable Declarations
    // Implementation
    return 0;
}

void j_SetDestructableMaxLife (unit lp_d, fixed lp_max) {
    // Automatic Variable Declarations
}

fixed j_GetDestructableMaxLife (unit lp_d) {
    // Automatic Variable Declarations
    // Implementation
    return 0;
}

void j_DestructableRestoreLife (unit lp_d, fixed lp_life, bool lp_birth) {
    // Automatic Variable Declarations
}

void j_QueueDestructableAnimation (unit lp_d, string lp_whichAnimation) {
    // Automatic Variable Declarations
}

void j_SetDestructableAnimation (unit lp_d, string lp_whichAnimation) {
    // Automatic Variable Declarations
}

void j_SetDestructableAnimationSpeed (unit lp_d, fixed lp_speedFactor) {
    // Automatic Variable Declarations
}

void j_ShowDestructable (unit lp_d, bool lp_flag) {
    // Automatic Variable Declarations
}

fixed j_GetDestructableOccluderHeight (unit lp_d) {
    // Automatic Variable Declarations
    // Implementation
    return 0;
}

void j_SetDestructableOccluderHeight (unit lp_d, fixed lp_height) {
    // Automatic Variable Declarations
}

string j_GetDestructableName (unit lp_d) {
    // Automatic Variable Declarations
    // Implementation
    return null;
}

unit j_GetTriggerDestructable () {
    // Automatic Variable Declarations
    // Implementation
    return null;
}

unit j_CreateItem (int lp_itemid, fixed lp_x, fixed lp_y) {
    // Automatic Variable Declarations
    // Implementation
    return null;
}

void j_RemoveItem (unit lp_whichItem) {
    // Automatic Variable Declarations
}

int j_GetItemPlayer (unit lp_whichItem) {
    // Automatic Variable Declarations
    // Implementation
    return 0;
}

int j_GetItemTypeId (unit lp_i) {
    // Automatic Variable Declarations
    // Implementation
    return 0;
}

fixed j_GetItemX (unit lp_i) {
    // Automatic Variable Declarations
    // Implementation
    return 0;
}

fixed j_GetItemY (unit lp_i) {
    // Automatic Variable Declarations
    // Implementation
    return 0;
}

void j_SetItemPosition (unit lp_i, fixed lp_x, fixed lp_y) {
    // Automatic Variable Declarations
}

void j_SetItemDropOnDeath (unit lp_whichItem, bool lp_flag) {
    // Automatic Variable Declarations
}

void j_SetItemDroppable (unit lp_i, bool lp_flag) {
    // Automatic Variable Declarations
}

void j_SetItemPawnable (unit lp_i, bool lp_flag) {
    // Automatic Variable Declarations
}

void j_SetItemPlayer (unit lp_whichItem, int lp_whichPlayer, bool lp_changeColor) {
    // Automatic Variable Declarations
}

void j_SetItemInvulnerable (unit lp_whichItem, bool lp_flag) {
    // Automatic Variable Declarations
}

bool j_IsItemInvulnerable (unit lp_whichItem) {
    // Automatic Variable Declarations
    // Implementation
    return false;
}

void j_SetItemVisible (unit lp_whichItem, bool lp_show) {
    // Automatic Variable Declarations
}

bool j_IsItemVisible (unit lp_whichItem) {
    // Automatic Variable Declarations
    // Implementation
    return false;
}

bool j_IsItemOwned (unit lp_whichItem) {
    // Automatic Variable Declarations
    // Implementation
    return false;
}

bool j_IsItemPowerup (unit lp_whichItem) {
    // Automatic Variable Declarations
    // Implementation
    return false;
}

bool j_IsItemSellable (unit lp_whichItem) {
    // Automatic Variable Declarations
    // Implementation
    return false;
}

bool j_IsItemPawnable (unit lp_whichItem) {
    // Automatic Variable Declarations
    // Implementation
    return false;
}

bool j_IsItemIdPowerup (int lp_itemId) {
    // Automatic Variable Declarations
    // Implementation
    return false;
}

bool j_IsItemIdSellable (int lp_itemId) {
    // Automatic Variable Declarations
    // Implementation
    return false;
}

bool j_IsItemIdPawnable (int lp_itemId) {
    // Automatic Variable Declarations
    // Implementation
    return false;
}

void j_EnumItemsInRect (region lp_r, string lp_filter, string lp_actionFunc) {
    // Automatic Variable Declarations
}

int j_GetItemLevel (unit lp_whichItem) {
    // Automatic Variable Declarations
    // Implementation
    return 0;
}

int j_GetItemType (unit lp_whichItem) {
    // Automatic Variable Declarations
    // Implementation
    return 0;
}

void j_SetItemDropID (unit lp_whichItem, int lp_unitId) {
    // Automatic Variable Declarations
}

string j_GetItemName (unit lp_whichItem) {
    // Automatic Variable Declarations
    // Implementation
    return null;
}

int j_GetItemCharges (unit lp_whichItem) {
    // Automatic Variable Declarations
    // Implementation
    return 0;
}

void j_SetItemCharges (unit lp_whichItem, int lp_charges) {
    // Automatic Variable Declarations
}

int j_GetItemUserData (unit lp_whichItem) {
    // Automatic Variable Declarations
    // Implementation
    return 0;
}

void j_SetItemUserData (unit lp_whichItem, int lp_data) {
    // Automatic Variable Declarations
}

unit j_CreateUnit (int lp_id, int lp_unitid, fixed lp_x, fixed lp_y, fixed lp_face) {
    // Automatic Variable Declarations
    // Implementation
    return null;
}

unit j_CreateUnitByName (int lp_whichPlayer, string lp_unitname, fixed lp_x, fixed lp_y, fixed lp_face) {
    // Automatic Variable Declarations
    // Implementation
    return null;
}

unit j_CreateUnitAtLoc (int lp_id, int lp_unitid, point lp_whichLocation, fixed lp_face) {
    // Automatic Variable Declarations
    // Implementation
    return null;
}

unit j_CreateUnitAtLocByName (int lp_id, string lp_unitname, point lp_whichLocation, fixed lp_face) {
    // Automatic Variable Declarations
    // Implementation
    return null;
}

unit j_CreateCorpse (int lp_whichPlayer, int lp_unitid, fixed lp_x, fixed lp_y, fixed lp_face) {
    // Automatic Variable Declarations
    // Implementation
    return null;
}

void j_KillUnit (unit lp_whichUnit) {
    // Automatic Variable Declarations
}

void j_RemoveUnit (unit lp_whichUnit) {
    // Automatic Variable Declarations
}

void j_ShowUnit (unit lp_whichUnit, bool lp_show) {
    // Automatic Variable Declarations
}

void j_SetUnitState (unit lp_whichUnit, int lp_whichUnitState, fixed lp_newVal) {
    // Automatic Variable Declarations
}

void j_SetUnitX (unit lp_whichUnit, fixed lp_newX) {
    // Automatic Variable Declarations
}

void j_SetUnitY (unit lp_whichUnit, fixed lp_newY) {
    // Automatic Variable Declarations
}

void j_SetUnitPosition (unit lp_whichUnit, fixed lp_newX, fixed lp_newY) {
    // Automatic Variable Declarations
}

void j_SetUnitPositionLoc (unit lp_whichUnit, point lp_whichLocation) {
    // Automatic Variable Declarations
}

void j_SetUnitFacing (unit lp_whichUnit, fixed lp_facingAngle) {
    // Automatic Variable Declarations
}

void j_SetUnitFacingTimed (unit lp_whichUnit, fixed lp_facingAngle, fixed lp_duration) {
    // Automatic Variable Declarations
}

void j_SetUnitMoveSpeed (unit lp_whichUnit, fixed lp_newSpeed) {
    // Automatic Variable Declarations
}

void j_SetUnitFlyHeight (unit lp_whichUnit, fixed lp_newHeight, fixed lp_rate) {
    // Automatic Variable Declarations
}

void j_SetUnitTurnSpeed (unit lp_whichUnit, fixed lp_newTurnSpeed) {
    // Automatic Variable Declarations
}

void j_SetUnitPropWindow (unit lp_whichUnit, fixed lp_newPropWindowAngle) {
    // Automatic Variable Declarations
}

void j_SetUnitAcquireRange (unit lp_whichUnit, fixed lp_newAcquireRange) {
    // Automatic Variable Declarations
}

void j_SetUnitCreepGuard (unit lp_whichUnit, bool lp_creepGuard) {
    // Automatic Variable Declarations
}

fixed j_GetUnitAcquireRange (unit lp_whichUnit) {
    // Automatic Variable Declarations
    // Implementation
    return 0;
}

fixed j_GetUnitTurnSpeed (unit lp_whichUnit) {
    // Automatic Variable Declarations
    // Implementation
    return 0;
}

fixed j_GetUnitPropWindow (unit lp_whichUnit) {
    // Automatic Variable Declarations
    // Implementation
    return 0;
}

fixed j_GetUnitFlyHeight (unit lp_whichUnit) {
    // Automatic Variable Declarations
    // Implementation
    return 0;
}

fixed j_GetUnitDefaultAcquireRange (unit lp_whichUnit) {
    // Automatic Variable Declarations
    // Implementation
    return 0;
}

fixed j_GetUnitDefaultTurnSpeed (unit lp_whichUnit) {
    // Automatic Variable Declarations
    // Implementation
    return 0;
}

fixed j_GetUnitDefaultPropWindow (unit lp_whichUnit) {
    // Automatic Variable Declarations
    // Implementation
    return 0;
}

fixed j_GetUnitDefaultFlyHeight (unit lp_whichUnit) {
    // Automatic Variable Declarations
    // Implementation
    return 0;
}

void j_SetUnitOwner (unit lp_whichUnit, int lp_whichPlayer, bool lp_changeColor) {
    // Automatic Variable Declarations
}

void j_SetUnitColor (unit lp_whichUnit, int lp_whichColor) {
    // Automatic Variable Declarations
}

void j_SetUnitScale (unit lp_whichUnit, fixed lp_scaleX, fixed lp_scaleY, fixed lp_scaleZ) {
    // Automatic Variable Declarations
}

void j_SetUnitTimeScale (unit lp_whichUnit, fixed lp_timeScale) {
    // Automatic Variable Declarations
}

void j_SetUnitBlendTime (unit lp_whichUnit, fixed lp_blendTime) {
    // Automatic Variable Declarations
}

void j_SetUnitVertexColor (unit lp_whichUnit, int lp_red, int lp_green, int lp_blue, int lp_alpha) {
    // Automatic Variable Declarations
}

void j_QueueUnitAnimation (unit lp_whichUnit, string lp_whichAnimation) {
    // Automatic Variable Declarations
}

void j_SetUnitAnimation (unit lp_whichUnit, string lp_whichAnimation) {
    // Automatic Variable Declarations
}

void j_SetUnitAnimationByIndex (unit lp_whichUnit, int lp_whichAnimation) {
    // Automatic Variable Declarations
}

void j_SetUnitAnimationWithRarity (unit lp_whichUnit, string lp_whichAnimation, int lp_rarity) {
    // Automatic Variable Declarations
}

void j_AddUnitAnimationProperties (unit lp_whichUnit, string lp_animProperties, bool lp_add) {
    // Automatic Variable Declarations
}

void j_SetUnitLookAt (unit lp_whichUnit, string lp_whichBone, unit lp_lookAtTarget, fixed lp_offsetX, fixed lp_offsetY, fixed lp_offsetZ) {
    // Automatic Variable Declarations
}

void j_ResetUnitLookAt (unit lp_whichUnit) {
    // Automatic Variable Declarations
}

void j_SetUnitRescuable (unit lp_whichUnit, int lp_byWhichPlayer, bool lp_flag) {
    // Automatic Variable Declarations
}

void j_SetUnitRescueRange (unit lp_whichUnit, fixed lp_range) {
    // Automatic Variable Declarations
}

void j_SetHeroStr (unit lp_whichHero, int lp_newStr, bool lp_permanent) {
    // Automatic Variable Declarations
}

void j_SetHeroAgi (unit lp_whichHero, int lp_newAgi, bool lp_permanent) {
    // Automatic Variable Declarations
}

void j_SetHeroInt (unit lp_whichHero, int lp_newInt, bool lp_permanent) {
    // Automatic Variable Declarations
}

int j_GetHeroStr (unit lp_whichHero, bool lp_includeBonuses) {
    // Automatic Variable Declarations
    // Implementation
    return 0;
}

int j_GetHeroAgi (unit lp_whichHero, bool lp_includeBonuses) {
    // Automatic Variable Declarations
    // Implementation
    return 0;
}

int j_GetHeroInt (unit lp_whichHero, bool lp_includeBonuses) {
    // Automatic Variable Declarations
    // Implementation
    return 0;
}

bool j_UnitStripHeroLevel (unit lp_whichHero, int lp_howManyLevels) {
    // Automatic Variable Declarations
    // Implementation
    return false;
}

int j_GetHeroXP (unit lp_whichHero) {
    // Automatic Variable Declarations
    // Implementation
    return 0;
}

void j_SetHeroXP (unit lp_whichHero, int lp_newXpVal, bool lp_showEyeCandy) {
    // Automatic Variable Declarations
}

int j_GetHeroSkillPoints (unit lp_whichHero) {
    // Automatic Variable Declarations
    // Implementation
    return 0;
}

bool j_UnitModifySkillPoints (unit lp_whichHero, int lp_skillPointDelta) {
    // Automatic Variable Declarations
    // Implementation
    return false;
}

void j_AddHeroXP (unit lp_whichHero, int lp_xpToAdd, bool lp_showEyeCandy) {
    // Automatic Variable Declarations
}

void j_SetHeroLevel (unit lp_whichHero, int lp_level, bool lp_showEyeCandy) {
    // Automatic Variable Declarations
}

int j_GetHeroLevel (unit lp_whichHero) {
    // Automatic Variable Declarations
    // Implementation
    return 0;
}

int j_GetUnitLevel (unit lp_whichUnit) {
    // Automatic Variable Declarations
    // Implementation
    return 0;
}

string j_GetHeroProperName (unit lp_whichHero) {
    // Automatic Variable Declarations
    // Implementation
    return null;
}

void j_SuspendHeroXP (unit lp_whichHero, bool lp_flag) {
    // Automatic Variable Declarations
}

bool j_IsSuspendedXP (unit lp_whichHero) {
    // Automatic Variable Declarations
    // Implementation
    return false;
}

void j_SelectHeroSkill (unit lp_whichHero, int lp_abilcode) {
    // Automatic Variable Declarations
}

int j_GetUnitAbilityLevel (unit lp_whichUnit, int lp_abilcode) {
    // Automatic Variable Declarations
    // Implementation
    return 0;
}

int j_DecUnitAbilityLevel (unit lp_whichUnit, int lp_abilcode) {
    // Automatic Variable Declarations
    // Implementation
    return 0;
}

int j_IncUnitAbilityLevel (unit lp_whichUnit, int lp_abilcode) {
    // Automatic Variable Declarations
    // Implementation
    return 0;
}

int j_SetUnitAbilityLevel (unit lp_whichUnit, int lp_abilcode, int lp_level) {
    // Automatic Variable Declarations
    // Implementation
    return 0;
}

bool j_ReviveHero (unit lp_whichHero, fixed lp_x, fixed lp_y, bool lp_doEyecandy) {
    // Automatic Variable Declarations
    // Implementation
    return false;
}

bool j_ReviveHeroLoc (unit lp_whichHero, point lp_loc, bool lp_doEyecandy) {
    // Automatic Variable Declarations
    // Implementation
    return false;
}

void j_SetUnitExploded (unit lp_whichUnit, bool lp_exploded) {
    // Automatic Variable Declarations
}

void j_SetUnitInvulnerable (unit lp_whichUnit, bool lp_flag) {
    // Automatic Variable Declarations
}

void j_PauseUnit (unit lp_whichUnit, bool lp_flag) {
    // Automatic Variable Declarations
}

bool j_IsUnitPaused (unit lp_whichHero) {
    // Automatic Variable Declarations
    // Implementation
    return false;
}

void j_SetUnitPathing (unit lp_whichUnit, bool lp_flag) {
    // Automatic Variable Declarations
}

void j_ClearSelection () {
    // Automatic Variable Declarations
}

void j_SelectUnit (unit lp_whichUnit, bool lp_flag) {
    // Automatic Variable Declarations
}

int j_GetUnitPointValue (unit lp_whichUnit) {
    // Automatic Variable Declarations
    // Implementation
    return 0;
}

int j_GetUnitPointValueByType (int lp_unitType) {
    // Automatic Variable Declarations
    // Implementation
    return 0;
}

bool j_UnitAddItem (unit lp_whichUnit, unit lp_whichItem) {
    // Automatic Variable Declarations
    // Implementation
    return false;
}

unit j_UnitAddItemById (unit lp_whichUnit, int lp_itemId) {
    // Automatic Variable Declarations
    // Implementation
    return null;
}

bool j_UnitAddItemToSlotById (unit lp_whichUnit, int lp_itemId, int lp_itemSlot) {
    // Automatic Variable Declarations
    // Implementation
    return false;
}

void j_UnitRemoveItem (unit lp_whichUnit, unit lp_whichItem) {
    // Automatic Variable Declarations
}

unit j_UnitRemoveItemFromSlot (unit lp_whichUnit, int lp_itemSlot) {
    // Automatic Variable Declarations
    // Implementation
    return null;
}

bool j_UnitHasItem (unit lp_whichUnit, unit lp_whichItem) {
    // Automatic Variable Declarations
    // Implementation
    return false;
}

unit j_UnitItemInSlot (unit lp_whichUnit, int lp_itemSlot) {
    // Automatic Variable Declarations
    // Implementation
    return null;
}

int j_UnitInventorySize (unit lp_whichUnit) {
    // Automatic Variable Declarations
    // Implementation
    return 0;
}

bool j_UnitDropItemPoint (unit lp_whichUnit, unit lp_whichItem, fixed lp_x, fixed lp_y) {
    // Automatic Variable Declarations
    // Implementation
    return false;
}

bool j_UnitDropItemSlot (unit lp_whichUnit, unit lp_whichItem, int lp_slot) {
    // Automatic Variable Declarations
    // Implementation
    return false;
}

bool j_UnitDropItemTarget (unit lp_whichUnit, unit lp_whichItem, unit lp_target) {
    // Automatic Variable Declarations
    // Implementation
    return false;
}

bool j_UnitUseItem (unit lp_whichUnit, unit lp_whichItem) {
    // Automatic Variable Declarations
    // Implementation
    return false;
}

bool j_UnitUseItemPoint (unit lp_whichUnit, unit lp_whichItem, fixed lp_x, fixed lp_y) {
    // Automatic Variable Declarations
    // Implementation
    return false;
}

bool j_UnitUseItemTarget (unit lp_whichUnit, unit lp_whichItem, unit lp_target) {
    // Automatic Variable Declarations
    // Implementation
    return false;
}

fixed j_GetUnitX (unit lp_whichUnit) {
    // Automatic Variable Declarations
    // Implementation
    return 0;
}

fixed j_GetUnitY (unit lp_whichUnit) {
    // Automatic Variable Declarations
    // Implementation
    return 0;
}

point j_GetUnitLoc (unit lp_whichUnit) {
    // Automatic Variable Declarations
    // Implementation
    return null;
}

fixed j_GetUnitFacing (unit lp_whichUnit) {
    // Automatic Variable Declarations
    // Implementation
    return 0;
}

fixed j_GetUnitMoveSpeed (unit lp_whichUnit) {
    // Automatic Variable Declarations
    // Implementation
    return 0;
}

fixed j_GetUnitDefaultMoveSpeed (unit lp_whichUnit) {
    // Automatic Variable Declarations
    // Implementation
    return 0;
}

fixed j_GetUnitState (unit lp_whichUnit, int lp_whichUnitState) {
    // Automatic Variable Declarations
    // Implementation
    return 0;
}

int j_GetOwningPlayer (unit lp_whichUnit) {
    // Automatic Variable Declarations
    // Implementation
    return 0;
}

int j_GetUnitTypeId (unit lp_whichUnit) {
    // Automatic Variable Declarations
    // Implementation
    return 0;
}

int j_GetUnitRace (unit lp_whichUnit) {
    // Automatic Variable Declarations
    // Implementation
    return 0;
}

string j_GetUnitName (unit lp_whichUnit) {
    // Automatic Variable Declarations
    // Implementation
    return null;
}

int j_GetUnitFoodUsed (unit lp_whichUnit) {
    // Automatic Variable Declarations
    // Implementation
    return 0;
}

int j_GetUnitFoodMade (unit lp_whichUnit) {
    // Automatic Variable Declarations
    // Implementation
    return 0;
}

int j_GetFoodMade (int lp_unitId) {
    // Automatic Variable Declarations
    // Implementation
    return 0;
}

int j_GetFoodUsed (int lp_unitId) {
    // Automatic Variable Declarations
    // Implementation
    return 0;
}

void j_SetUnitUseFood (unit lp_whichUnit, bool lp_useFood) {
    // Automatic Variable Declarations
}

point j_GetUnitRallyPoint (unit lp_whichUnit) {
    // Automatic Variable Declarations
    // Implementation
    return null;
}

unit j_GetUnitRallyUnit (unit lp_whichUnit) {
    // Automatic Variable Declarations
    // Implementation
    return null;
}

unit j_GetUnitRallyDestructable (unit lp_whichUnit) {
    // Automatic Variable Declarations
    // Implementation
    return null;
}

bool j_IsUnitInGroup (unit lp_whichUnit, unitgroup lp_whichGroup) {
    // Automatic Variable Declarations
    // Implementation
    return false;
}

bool j_IsUnitInForce (unit lp_whichUnit, playergroup lp_whichForce) {
    // Automatic Variable Declarations
    // Implementation
    return false;
}

bool j_IsUnitOwnedByPlayer (unit lp_whichUnit, int lp_whichPlayer) {
    // Automatic Variable Declarations
    // Implementation
    return false;
}

bool j_IsUnitAlly (unit lp_whichUnit, int lp_whichPlayer) {
    // Automatic Variable Declarations
    // Implementation
    return false;
}

bool j_IsUnitEnemy (unit lp_whichUnit, int lp_whichPlayer) {
    // Automatic Variable Declarations
    // Implementation
    return false;
}

bool j_IsUnitVisible (unit lp_whichUnit, int lp_whichPlayer) {
    // Automatic Variable Declarations
    // Implementation
    return false;
}

bool j_IsUnitDetected (unit lp_whichUnit, int lp_whichPlayer) {
    // Automatic Variable Declarations
    // Implementation
    return false;
}

bool j_IsUnitInvisible (unit lp_whichUnit, int lp_whichPlayer) {
    // Automatic Variable Declarations
    // Implementation
    return false;
}

bool j_IsUnitFogged (unit lp_whichUnit, int lp_whichPlayer) {
    // Automatic Variable Declarations
    // Implementation
    return false;
}

bool j_IsUnitMasked (unit lp_whichUnit, int lp_whichPlayer) {
    // Automatic Variable Declarations
    // Implementation
    return false;
}

bool j_IsUnitSelected (unit lp_whichUnit, int lp_whichPlayer) {
    // Automatic Variable Declarations
    // Implementation
    return false;
}

bool j_IsUnitRace (unit lp_whichUnit, int lp_whichRace) {
    // Automatic Variable Declarations
    // Implementation
    return false;
}

bool j_IsUnitType (unit lp_whichUnit, int lp_whichUnitType) {
    // Automatic Variable Declarations
    // Implementation
    return false;
}

bool j_IsUnit (unit lp_whichUnit, unit lp_whichSpecifiedUnit) {
    // Automatic Variable Declarations
    // Implementation
    return false;
}

bool j_IsUnitInRange (unit lp_whichUnit, unit lp_otherUnit, fixed lp_distance) {
    // Automatic Variable Declarations
    // Implementation
    return false;
}

bool j_IsUnitInRangeXY (unit lp_whichUnit, fixed lp_x, fixed lp_y, fixed lp_distance) {
    // Automatic Variable Declarations
    // Implementation
    return false;
}

bool j_IsUnitInRangeLoc (unit lp_whichUnit, point lp_whichLocation, fixed lp_distance) {
    // Automatic Variable Declarations
    // Implementation
    return false;
}

bool j_IsUnitHidden (unit lp_whichUnit) {
    // Automatic Variable Declarations
    // Implementation
    return false;
}

bool j_IsUnitIllusion (unit lp_whichUnit) {
    // Automatic Variable Declarations
    // Implementation
    return false;
}

bool j_IsUnitInTransport (unit lp_whichUnit, unit lp_whichTransport) {
    // Automatic Variable Declarations
    // Implementation
    return false;
}

bool j_IsUnitLoaded (unit lp_whichUnit) {
    // Automatic Variable Declarations
    // Implementation
    return false;
}

bool j_IsHeroUnitId (int lp_unitId) {
    // Automatic Variable Declarations
    // Implementation
    return false;
}

bool j_IsUnitIdType (int lp_unitId, int lp_whichUnitType) {
    // Automatic Variable Declarations
    // Implementation
    return false;
}

void j_UnitShareVision (unit lp_whichUnit, int lp_whichPlayer, bool lp_share) {
    // Automatic Variable Declarations
}

void j_UnitSuspendDecay (unit lp_whichUnit, bool lp_suspend) {
    // Automatic Variable Declarations
}

bool j_UnitAddType (unit lp_whichUnit, int lp_whichUnitType) {
    // Automatic Variable Declarations
    // Implementation
    return false;
}

bool j_UnitRemoveType (unit lp_whichUnit, int lp_whichUnitType) {
    // Automatic Variable Declarations
    // Implementation
    return false;
}

bool j_UnitAddAbility (unit lp_whichUnit, int lp_abilityId) {
    // Automatic Variable Declarations
    // Implementation
    return false;
}

bool j_UnitRemoveAbility (unit lp_whichUnit, int lp_abilityId) {
    // Automatic Variable Declarations
    // Implementation
    return false;
}

bool j_UnitMakeAbilityPermanent (unit lp_whichUnit, bool lp_permanent, int lp_abilityId) {
    // Automatic Variable Declarations
    // Implementation
    return false;
}

void j_UnitRemoveBuffs (unit lp_whichUnit, bool lp_removePositive, bool lp_removeNegative) {
    // Automatic Variable Declarations
}

void j_UnitRemoveBuffsEx (unit lp_whichUnit, bool lp_removePositive, bool lp_removeNegative, bool lp_magic, bool lp_physical, bool lp_timedLife, bool lp_aura, bool lp_autoDispel) {
    // Automatic Variable Declarations
}

bool j_UnitHasBuffsEx (unit lp_whichUnit, bool lp_removePositive, bool lp_removeNegative, bool lp_magic, bool lp_physical, bool lp_timedLife, bool lp_aura, bool lp_autoDispel) {
    // Automatic Variable Declarations
    // Implementation
    return false;
}

int j_UnitCountBuffsEx (unit lp_whichUnit, bool lp_removePositive, bool lp_removeNegative, bool lp_magic, bool lp_physical, bool lp_timedLife, bool lp_aura, bool lp_autoDispel) {
    // Automatic Variable Declarations
    // Implementation
    return 0;
}

void j_UnitAddSleep (unit lp_whichUnit, bool lp_add) {
    // Automatic Variable Declarations
}

bool j_UnitCanSleep (unit lp_whichUnit) {
    // Automatic Variable Declarations
    // Implementation
    return false;
}

void j_UnitAddSleepPerm (unit lp_whichUnit, bool lp_add) {
    // Automatic Variable Declarations
}

bool j_UnitCanSleepPerm (unit lp_whichUnit) {
    // Automatic Variable Declarations
    // Implementation
    return false;
}

bool j_UnitIsSleeping (unit lp_whichUnit) {
    // Automatic Variable Declarations
    // Implementation
    return false;
}

void j_UnitWakeUp (unit lp_whichUnit) {
    // Automatic Variable Declarations
}

void j_UnitApplyTimedLife (unit lp_whichUnit, int lp_buffId, fixed lp_duration) {
    // Automatic Variable Declarations
}

bool j_UnitIgnoreAlarm (unit lp_whichUnit, bool lp_flag) {
    // Automatic Variable Declarations
    // Implementation
    return false;
}

bool j_UnitIgnoreAlarmToggled (unit lp_whichUnit) {
    // Automatic Variable Declarations
    // Implementation
    return false;
}

void j_UnitResetCooldown (unit lp_whichUnit) {
    // Automatic Variable Declarations
}

void j_UnitSetConstructionProgress (unit lp_whichUnit, int lp_constructionPercentage) {
    // Automatic Variable Declarations
}

void j_UnitSetUpgradeProgress (unit lp_whichUnit, int lp_upgradePercentage) {
    // Automatic Variable Declarations
}

void j_UnitPauseTimedLife (unit lp_whichUnit, bool lp_flag) {
    // Automatic Variable Declarations
}

void j_UnitSetUsesAltIcon (unit lp_whichUnit, bool lp_flag) {
    // Automatic Variable Declarations
}

bool j_UnitDamagePoint (unit lp_whichUnit, fixed lp_delay, fixed lp_radius, fixed lp_x, fixed lp_y, fixed lp_amount, bool lp_attack, bool lp_ranged, int lp_attackType, int lp_damageType, int lp_weaponType) {
    // Automatic Variable Declarations
    // Implementation
    return false;
}

bool j_UnitDamageTarget (unit lp_whichUnit, unit lp_target, fixed lp_amount, bool lp_attack, bool lp_ranged, int lp_attackType, int lp_damageType, int lp_weaponType) {
    // Automatic Variable Declarations
    // Implementation
    return false;
}

bool j_IssueImmediateOrder (unit lp_whichUnit, string lp_order) {
    // Automatic Variable Declarations
    // Implementation
    return false;
}

bool j_IssueImmediateOrderById (unit lp_whichUnit, int lp_order) {
    // Automatic Variable Declarations
    // Implementation
    return false;
}

bool j_IssuePointOrder (unit lp_whichUnit, string lp_order, fixed lp_x, fixed lp_y) {
    // Automatic Variable Declarations
    // Implementation
    return false;
}

bool j_IssuePointOrderLoc (unit lp_whichUnit, string lp_order, point lp_whichLocation) {
    // Automatic Variable Declarations
    // Implementation
    return false;
}

bool j_IssuePointOrderById (unit lp_whichUnit, int lp_order, fixed lp_x, fixed lp_y) {
    // Automatic Variable Declarations
    // Implementation
    return false;
}

bool j_IssuePointOrderByIdLoc (unit lp_whichUnit, int lp_order, point lp_whichLocation) {
    // Automatic Variable Declarations
    // Implementation
    return false;
}

bool j_IssueTargetOrder (unit lp_whichUnit, string lp_order, unit lp_targetWidget) {
    // Automatic Variable Declarations
    // Implementation
    return false;
}

bool j_IssueTargetOrderById (unit lp_whichUnit, int lp_order, unit lp_targetWidget) {
    // Automatic Variable Declarations
    // Implementation
    return false;
}

bool j_IssueInstantPointOrder (unit lp_whichUnit, string lp_order, fixed lp_x, fixed lp_y, unit lp_instantTargetWidget) {
    // Automatic Variable Declarations
    // Implementation
    return false;
}

bool j_IssueInstantPointOrderById (unit lp_whichUnit, int lp_order, fixed lp_x, fixed lp_y, unit lp_instantTargetWidget) {
    // Automatic Variable Declarations
    // Implementation
    return false;
}

bool j_IssueInstantTargetOrder (unit lp_whichUnit, string lp_order, unit lp_targetWidget, unit lp_instantTargetWidget) {
    // Automatic Variable Declarations
    // Implementation
    return false;
}

bool j_IssueInstantTargetOrderById (unit lp_whichUnit, int lp_order, unit lp_targetWidget, unit lp_instantTargetWidget) {
    // Automatic Variable Declarations
    // Implementation
    return false;
}

bool j_IssueBuildOrder (unit lp_whichPeon, string lp_unitToBuild, fixed lp_x, fixed lp_y) {
    // Automatic Variable Declarations
    // Implementation
    return false;
}

bool j_IssueBuildOrderById (unit lp_whichPeon, int lp_unitId, fixed lp_x, fixed lp_y) {
    // Automatic Variable Declarations
    // Implementation
    return false;
}

bool j_IssueNeutralImmediateOrder (int lp_forWhichPlayer, unit lp_neutralStructure, string lp_unitToBuild) {
    // Automatic Variable Declarations
    // Implementation
    return false;
}

bool j_IssueNeutralImmediateOrderById (int lp_forWhichPlayer, unit lp_neutralStructure, int lp_unitId) {
    // Automatic Variable Declarations
    // Implementation
    return false;
}

bool j_IssueNeutralPointOrder (int lp_forWhichPlayer, unit lp_neutralStructure, string lp_unitToBuild, fixed lp_x, fixed lp_y) {
    // Automatic Variable Declarations
    // Implementation
    return false;
}

bool j_IssueNeutralPointOrderById (int lp_forWhichPlayer, unit lp_neutralStructure, int lp_unitId, fixed lp_x, fixed lp_y) {
    // Automatic Variable Declarations
    // Implementation
    return false;
}

bool j_IssueNeutralTargetOrder (int lp_forWhichPlayer, unit lp_neutralStructure, string lp_unitToBuild, unit lp_target) {
    // Automatic Variable Declarations
    // Implementation
    return false;
}

bool j_IssueNeutralTargetOrderById (int lp_forWhichPlayer, unit lp_neutralStructure, int lp_unitId, unit lp_target) {
    // Automatic Variable Declarations
    // Implementation
    return false;
}

int j_GetUnitCurrentOrder (unit lp_whichUnit) {
    // Automatic Variable Declarations
    // Implementation
    return 0;
}

void j_SetResourceAmount (unit lp_whichUnit, int lp_amount) {
    // Automatic Variable Declarations
}

void j_AddResourceAmount (unit lp_whichUnit, int lp_amount) {
    // Automatic Variable Declarations
}

int j_GetResourceAmount (unit lp_whichUnit) {
    // Automatic Variable Declarations
    // Implementation
    return 0;
}

fixed j_WaygateGetDestinationX (unit lp_waygate) {
    // Automatic Variable Declarations
    // Implementation
    return 0;
}

fixed j_WaygateGetDestinationY (unit lp_waygate) {
    // Automatic Variable Declarations
    // Implementation
    return 0;
}

void j_WaygateSetDestination (unit lp_waygate, fixed lp_x, fixed lp_y) {
    // Automatic Variable Declarations
}

void j_WaygateActivate (unit lp_waygate, bool lp_activate) {
    // Automatic Variable Declarations
}

bool j_WaygateIsActive (unit lp_waygate) {
    // Automatic Variable Declarations
    // Implementation
    return false;
}

void j_AddItemToAllStock (int lp_itemId, int lp_currentStock, int lp_stockMax) {
    // Automatic Variable Declarations
}

void j_AddItemToStock (unit lp_whichUnit, int lp_itemId, int lp_currentStock, int lp_stockMax) {
    // Automatic Variable Declarations
}

void j_AddUnitToAllStock (int lp_unitId, int lp_currentStock, int lp_stockMax) {
    // Automatic Variable Declarations
}

void j_AddUnitToStock (unit lp_whichUnit, int lp_unitId, int lp_currentStock, int lp_stockMax) {
    // Automatic Variable Declarations
}

void j_RemoveItemFromAllStock (int lp_itemId) {
    // Automatic Variable Declarations
}

void j_RemoveItemFromStock (unit lp_whichUnit, int lp_itemId) {
    // Automatic Variable Declarations
}

void j_RemoveUnitFromAllStock (int lp_unitId) {
    // Automatic Variable Declarations
}

void j_RemoveUnitFromStock (unit lp_whichUnit, int lp_unitId) {
    // Automatic Variable Declarations
}

void j_SetAllItemTypeSlots (int lp_slots) {
    // Automatic Variable Declarations
}

void j_SetAllUnitTypeSlots (int lp_slots) {
    // Automatic Variable Declarations
}

void j_SetItemTypeSlots (unit lp_whichUnit, int lp_slots) {
    // Automatic Variable Declarations
}

void j_SetUnitTypeSlots (unit lp_whichUnit, int lp_slots) {
    // Automatic Variable Declarations
}

int j_GetUnitUserData (unit lp_whichUnit) {
    // Automatic Variable Declarations
    // Implementation
    return 0;
}

void j_SetUnitUserData (unit lp_whichUnit, int lp_data) {
    // Automatic Variable Declarations
}

int j_Player (int lp_number) {
    // Automatic Variable Declarations
    // Implementation
    return 0;
}

bool j_IsPlayerAlly (int lp_whichPlayer, int lp_otherPlayer) {
    // Automatic Variable Declarations
    // Implementation
    return false;
}

bool j_IsPlayerEnemy (int lp_whichPlayer, int lp_otherPlayer) {
    // Automatic Variable Declarations
    // Implementation
    return false;
}

bool j_IsPlayerInForce (int lp_whichPlayer, playergroup lp_whichForce) {
    // Automatic Variable Declarations
    // Implementation
    return false;
}

bool j_IsPlayerObserver (int lp_whichPlayer) {
    // Automatic Variable Declarations
    // Implementation
    return false;
}

bool j_IsVisibleToPlayer (fixed lp_x, fixed lp_y, int lp_whichPlayer) {
    // Automatic Variable Declarations
    // Implementation
    return false;
}

bool j_IsLocationVisibleToPlayer (point lp_whichLocation, int lp_whichPlayer) {
    // Automatic Variable Declarations
    // Implementation
    return false;
}

bool j_IsFoggedToPlayer (fixed lp_x, fixed lp_y, int lp_whichPlayer) {
    // Automatic Variable Declarations
    // Implementation
    return false;
}

bool j_IsLocationFoggedToPlayer (point lp_whichLocation, int lp_whichPlayer) {
    // Automatic Variable Declarations
    // Implementation
    return false;
}

bool j_IsMaskedToPlayer (fixed lp_x, fixed lp_y, int lp_whichPlayer) {
    // Automatic Variable Declarations
    // Implementation
    return false;
}

bool j_IsLocationMaskedToPlayer (point lp_whichLocation, int lp_whichPlayer) {
    // Automatic Variable Declarations
    // Implementation
    return false;
}

int j_GetPlayerRace (int lp_whichPlayer) {
    // Automatic Variable Declarations
    // Implementation
    return 0;
}

int j_GetPlayerId (int lp_whichPlayer) {
    // Automatic Variable Declarations
    // Implementation
    return 0;
}

int j_GetPlayerUnitCount (int lp_whichPlayer, bool lp_includeIncomplete) {
    // Automatic Variable Declarations
    // Implementation
    return 0;
}

int j_GetPlayerTypedUnitCount (int lp_whichPlayer, string lp_unitName, bool lp_includeIncomplete, bool lp_includeUpgrades) {
    // Automatic Variable Declarations
    // Implementation
    return 0;
}

int j_GetPlayerStructureCount (int lp_whichPlayer, bool lp_includeIncomplete) {
    // Automatic Variable Declarations
    // Implementation
    return 0;
}

int j_GetPlayerState (int lp_whichPlayer, int lp_whichPlayerState) {
    // Automatic Variable Declarations
    // Implementation
    return 0;
}

int j_GetPlayerScore (int lp_whichPlayer, int lp_whichPlayerScore) {
    // Automatic Variable Declarations
    // Implementation
    return 0;
}

bool j_GetPlayerAlliance (int lp_sourcePlayer, int lp_otherPlayer, int lp_whichAllianceSetting) {
    // Automatic Variable Declarations
    // Implementation
    return false;
}

fixed j_GetPlayerHandicap (int lp_whichPlayer) {
    // Automatic Variable Declarations
    // Implementation
    return 0;
}

fixed j_GetPlayerHandicapXP (int lp_whichPlayer) {
    // Automatic Variable Declarations
    // Implementation
    return 0;
}

void j_SetPlayerHandicap (int lp_whichPlayer, fixed lp_handicap) {
    // Automatic Variable Declarations
}

void j_SetPlayerHandicapXP (int lp_whichPlayer, fixed lp_handicap) {
    // Automatic Variable Declarations
}

void j_SetPlayerTechMaxAllowed (int lp_whichPlayer, int lp_techid, int lp_maximum) {
    // Automatic Variable Declarations
}

int j_GetPlayerTechMaxAllowed (int lp_whichPlayer, int lp_techid) {
    // Automatic Variable Declarations
    // Implementation
    return 0;
}

void j_AddPlayerTechResearched (int lp_whichPlayer, int lp_techid, int lp_levels) {
    // Automatic Variable Declarations
}

void j_SetPlayerTechResearched (int lp_whichPlayer, int lp_techid, int lp_setToLevel) {
    // Automatic Variable Declarations
}

bool j_GetPlayerTechResearched (int lp_whichPlayer, int lp_techid, bool lp_specificonly) {
    // Automatic Variable Declarations
    // Implementation
    return false;
}

int j_GetPlayerTechCount (int lp_whichPlayer, int lp_techid, bool lp_specificonly) {
    // Automatic Variable Declarations
    // Implementation
    return 0;
}

void j_SetPlayerUnitsOwner (int lp_whichPlayer, int lp_newOwner) {
    // Automatic Variable Declarations
}

void j_CripplePlayer (int lp_whichPlayer, playergroup lp_toWhichPlayers, bool lp_flag) {
    // Automatic Variable Declarations
}

void j_SetPlayerAbilityAvailable (int lp_whichPlayer, int lp_abilid, bool lp_avail) {
    // Automatic Variable Declarations
}

void j_SetPlayerState (int lp_whichPlayer, int lp_whichPlayerState, int lp_value) {
    // Automatic Variable Declarations
}

void j_RemovePlayer (int lp_whichPlayer, int lp_gameResult) {
    // Automatic Variable Declarations
}

void j_CachePlayerHeroData (int lp_whichPlayer) {
    // Automatic Variable Declarations
}

void j_SetFogStateRect (int lp_forWhichPlayer, int lp_whichState, region lp_where, bool lp_useSharedVision) {
    // Automatic Variable Declarations
}

void j_SetFogStateRadius (int lp_forWhichPlayer, int lp_whichState, fixed lp_centerx, fixed lp_centerY, fixed lp_radius, bool lp_useSharedVision) {
    // Automatic Variable Declarations
}

void j_SetFogStateRadiusLoc (int lp_forWhichPlayer, int lp_whichState, point lp_center, fixed lp_radius, bool lp_useSharedVision) {
    // Automatic Variable Declarations
}

void j_FogMaskEnable (bool lp_enable) {
    // Automatic Variable Declarations
}

bool j_IsFogMaskEnabled () {
    // Automatic Variable Declarations
    // Implementation
    return false;
}

void j_FogEnable (bool lp_enable) {
    // Automatic Variable Declarations
}

bool j_IsFogEnabled () {
    // Automatic Variable Declarations
    // Implementation
    return false;
}

revealer j_CreateFogModifierRect (int lp_forWhichPlayer, int lp_whichState, region lp_where, bool lp_useSharedVision, bool lp_afterUnits) {
    // Automatic Variable Declarations
    // Implementation
    return null;
}

revealer j_CreateFogModifierRadius (int lp_forWhichPlayer, int lp_whichState, fixed lp_centerx, fixed lp_centerY, fixed lp_radius, bool lp_useSharedVision, bool lp_afterUnits) {
    // Automatic Variable Declarations
    // Implementation
    return null;
}

revealer j_CreateFogModifierRadiusLoc (int lp_forWhichPlayer, int lp_whichState, point lp_center, fixed lp_radius, bool lp_useSharedVision, bool lp_afterUnits) {
    // Automatic Variable Declarations
    // Implementation
    return null;
}

void j_DestroyFogModifier (revealer lp_whichFogModifier) {
    // Automatic Variable Declarations
}

void j_FogModifierStart (revealer lp_whichFogModifier) {
    // Automatic Variable Declarations
}

void j_FogModifierStop (revealer lp_whichFogModifier) {
    // Automatic Variable Declarations
}

int j_VersionGet () {
    // Automatic Variable Declarations
    // Implementation
    return 0;
}

bool j_VersionCompatible (int lp_whichVersion) {
    // Automatic Variable Declarations
    // Implementation
    return false;
}

bool j_VersionSupported (int lp_whichVersion) {
    // Automatic Variable Declarations
    // Implementation
    return false;
}

void j_EndGame (bool lp_doScoreScreen) {
    // Automatic Variable Declarations
}

void j_ChangeLevel (string lp_newLevel, bool lp_doScoreScreen) {
    // Automatic Variable Declarations
}

void j_RestartGame (bool lp_doScoreScreen) {
    // Automatic Variable Declarations
}

void j_ReloadGame () {
    // Automatic Variable Declarations
}

void j_SetCampaignMenuRace (int lp_r) {
    // Automatic Variable Declarations
}

void j_SetCampaignMenuRaceEx (int lp_campaignIndex) {
    // Automatic Variable Declarations
}

void j_ForceCampaignSelectScreen () {
    // Automatic Variable Declarations
}

void j_LoadGame (string lp_saveFileName, bool lp_doScoreScreen) {
    // Automatic Variable Declarations
}

void j_SaveGame (string lp_saveFileName) {
    // Automatic Variable Declarations
}

bool j_RenameSaveDirectory (string lp_sourceDirName, string lp_destDirName) {
    // Automatic Variable Declarations
    // Implementation
    return false;
}

bool j_RemoveSaveDirectory (string lp_sourceDirName) {
    // Automatic Variable Declarations
    // Implementation
    return false;
}

bool j_CopySaveGame (string lp_sourceSaveName, string lp_destSaveName) {
    // Automatic Variable Declarations
    // Implementation
    return false;
}

bool j_SaveGameExists (string lp_saveName) {
    // Automatic Variable Declarations
    // Implementation
    return false;
}

void j_SyncSelections () {
    // Automatic Variable Declarations
}

void j_SetFloatGameState (int lp_whichFloatGameState, fixed lp_value) {
    // Automatic Variable Declarations
}

fixed j_GetFloatGameState (int lp_whichFloatGameState) {
    // Automatic Variable Declarations
    // Implementation
    return 0;
}

void j_SetIntegerGameState (int lp_whichIntegerGameState, int lp_value) {
    // Automatic Variable Declarations
}

int j_GetIntegerGameState (int lp_whichIntegerGameState) {
    // Automatic Variable Declarations
    // Implementation
    return 0;
}

void j_SetTutorialCleared (bool lp_cleared) {
    // Automatic Variable Declarations
}

void j_SetMissionAvailable (int lp_campaignNumber, int lp_missionNumber, bool lp_available) {
    // Automatic Variable Declarations
}

void j_SetCampaignAvailable (int lp_campaignNumber, bool lp_available) {
    // Automatic Variable Declarations
}

void j_SetOpCinematicAvailable (int lp_campaignNumber, bool lp_available) {
    // Automatic Variable Declarations
}

void j_SetEdCinematicAvailable (int lp_campaignNumber, bool lp_available) {
    // Automatic Variable Declarations
}

void j_SetCustomCampaignButtonVisible (int lp_whichButton, bool lp_visible) {
    // Automatic Variable Declarations
}

bool j_GetCustomCampaignButtonVisible (int lp_whichButton) {
    // Automatic Variable Declarations
    // Implementation
    return false;
}

void j_DoNotSaveReplay () {
    // Automatic Variable Declarations
}

int j_DialogCreate () {
    // Automatic Variable Declarations
    // Implementation
    return 0;
}

void j_DialogDestroy (int lp_whichDialog) {
    // Automatic Variable Declarations
}

void j_DialogClear (int lp_whichDialog) {
    // Automatic Variable Declarations
}

void j_DialogSetMessage (int lp_whichDialog, string lp_messageText) {
    // Automatic Variable Declarations
}

int j_DialogAddButton (int lp_whichDialog, string lp_buttonText, int lp_hotkey) {
    // Automatic Variable Declarations
    // Implementation
    return 0;
}

int j_DialogAddQuitButton (int lp_whichDialog, bool lp_doScoreScreen, string lp_buttonText, int lp_hotkey) {
    // Automatic Variable Declarations
    // Implementation
    return 0;
}

void j_DialogDisplay (int lp_whichPlayer, int lp_whichDialog, bool lp_flag) {
    // Automatic Variable Declarations
}

bool j_ReloadGameCachesFromDisk () {
    // Automatic Variable Declarations
    // Implementation
    return false;
}

bank j_InitGameCache (string lp_campaignFile) {
    // Automatic Variable Declarations
    // Implementation
    return null;
}

bool j_SaveGameCache (bank lp_whichCache) {
    // Automatic Variable Declarations
    // Implementation
    return false;
}

void j_StoreInteger (bank lp_cache, string lp_missionKey, string lp_key, int lp_value) {
    // Automatic Variable Declarations
}

void j_StoreReal (bank lp_cache, string lp_missionKey, string lp_key, fixed lp_value) {
    // Automatic Variable Declarations
}

void j_StoreBoolean (bank lp_cache, string lp_missionKey, string lp_key, bool lp_value) {
    // Automatic Variable Declarations
}

bool j_StoreUnit (bank lp_cache, string lp_missionKey, string lp_key, unit lp_whichUnit) {
    // Automatic Variable Declarations
    // Implementation
    return false;
}

bool j_StoreString (bank lp_cache, string lp_missionKey, string lp_key, string lp_value) {
    // Automatic Variable Declarations
    // Implementation
    return false;
}

void j_SyncStoredInteger (bank lp_cache, string lp_missionKey, string lp_key) {
    // Automatic Variable Declarations
}

void j_SyncStoredReal (bank lp_cache, string lp_missionKey, string lp_key) {
    // Automatic Variable Declarations
}

void j_SyncStoredBoolean (bank lp_cache, string lp_missionKey, string lp_key) {
    // Automatic Variable Declarations
}

void j_SyncStoredUnit (bank lp_cache, string lp_missionKey, string lp_key) {
    // Automatic Variable Declarations
}

void j_SyncStoredString (bank lp_cache, string lp_missionKey, string lp_key) {
    // Automatic Variable Declarations
}

bool j_HaveStoredInteger (bank lp_cache, string lp_missionKey, string lp_key) {
    // Automatic Variable Declarations
    // Implementation
    return false;
}

bool j_HaveStoredReal (bank lp_cache, string lp_missionKey, string lp_key) {
    // Automatic Variable Declarations
    // Implementation
    return false;
}

bool j_HaveStoredBoolean (bank lp_cache, string lp_missionKey, string lp_key) {
    // Automatic Variable Declarations
    // Implementation
    return false;
}

bool j_HaveStoredUnit (bank lp_cache, string lp_missionKey, string lp_key) {
    // Automatic Variable Declarations
    // Implementation
    return false;
}

bool j_HaveStoredString (bank lp_cache, string lp_missionKey, string lp_key) {
    // Automatic Variable Declarations
    // Implementation
    return false;
}

void j_FlushGameCache (bank lp_cache) {
    // Automatic Variable Declarations
}

void j_FlushStoredMission (bank lp_cache, string lp_missionKey) {
    // Automatic Variable Declarations
}

void j_FlushStoredInteger (bank lp_cache, string lp_missionKey, string lp_key) {
    // Automatic Variable Declarations
}

void j_FlushStoredReal (bank lp_cache, string lp_missionKey, string lp_key) {
    // Automatic Variable Declarations
}

void j_FlushStoredBoolean (bank lp_cache, string lp_missionKey, string lp_key) {
    // Automatic Variable Declarations
}

void j_FlushStoredUnit (bank lp_cache, string lp_missionKey, string lp_key) {
    // Automatic Variable Declarations
}

void j_FlushStoredString (bank lp_cache, string lp_missionKey, string lp_key) {
    // Automatic Variable Declarations
}

int j_GetStoredInteger (bank lp_cache, string lp_missionKey, string lp_key) {
    // Automatic Variable Declarations
    // Implementation
    return 0;
}

fixed j_GetStoredReal (bank lp_cache, string lp_missionKey, string lp_key) {
    // Automatic Variable Declarations
    // Implementation
    return 0;
}

bool j_GetStoredBoolean (bank lp_cache, string lp_missionKey, string lp_key) {
    // Automatic Variable Declarations
    // Implementation
    return false;
}

string j_GetStoredString (bank lp_cache, string lp_missionKey, string lp_key) {
    // Automatic Variable Declarations
    // Implementation
    return null;
}

unit j_RestoreUnit (bank lp_cache, string lp_missionKey, string lp_key, int lp_forWhichPlayer, fixed lp_x, fixed lp_y, fixed lp_facing) {
    // Automatic Variable Declarations
    // Implementation
    return null;
}

int j_InitHashtable () {
    // Automatic Variable Declarations
    // Implementation
    return 0;
}

void j_SaveInteger (int lp_table, int lp_parentKey, int lp_childKey, int lp_value) {
    // Automatic Variable Declarations
}

void j_SaveReal (int lp_table, int lp_parentKey, int lp_childKey, fixed lp_value) {
    // Automatic Variable Declarations
}

void j_SaveBoolean (int lp_table, int lp_parentKey, int lp_childKey, bool lp_value) {
    // Automatic Variable Declarations
}

bool j_SaveStr (int lp_table, int lp_parentKey, int lp_childKey, string lp_value) {
    // Automatic Variable Declarations
    // Implementation
    return false;
}

bool j_SavePlayerHandle (int lp_table, int lp_parentKey, int lp_childKey, int lp_whichPlayer) {
    // Automatic Variable Declarations
    // Implementation
    return false;
}

bool j_SaveWidgetHandle (int lp_table, int lp_parentKey, int lp_childKey, unit lp_whichWidget) {
    // Automatic Variable Declarations
    // Implementation
    return false;
}

bool j_SaveDestructableHandle (int lp_table, int lp_parentKey, int lp_childKey, unit lp_whichDestructable) {
    // Automatic Variable Declarations
    // Implementation
    return false;
}

bool j_SaveItemHandle (int lp_table, int lp_parentKey, int lp_childKey, unit lp_whichItem) {
    // Automatic Variable Declarations
    // Implementation
    return false;
}

bool j_SaveUnitHandle (int lp_table, int lp_parentKey, int lp_childKey, unit lp_whichUnit) {
    // Automatic Variable Declarations
    // Implementation
    return false;
}

bool j_SaveAbilityHandle (int lp_table, int lp_parentKey, int lp_childKey, string lp_whichAbility) {
    // Automatic Variable Declarations
    // Implementation
    return false;
}

bool j_SaveTimerHandle (int lp_table, int lp_parentKey, int lp_childKey, timer lp_whichTimer) {
    // Automatic Variable Declarations
    // Implementation
    return false;
}

bool j_SaveTriggerHandle (int lp_table, int lp_parentKey, int lp_childKey, trigger lp_whichTrigger) {
    // Automatic Variable Declarations
    // Implementation
    return false;
}

bool j_SaveTriggerConditionHandle (int lp_table, int lp_parentKey, int lp_childKey, string lp_whichTriggercondition) {
    // Automatic Variable Declarations
    // Implementation
    return false;
}

bool j_SaveTriggerActionHandle (int lp_table, int lp_parentKey, int lp_childKey, string lp_whichTriggeraction) {
    // Automatic Variable Declarations
    // Implementation
    return false;
}

bool j_SaveTriggerEventHandle (int lp_table, int lp_parentKey, int lp_childKey, int lp_whichEvent) {
    // Automatic Variable Declarations
    // Implementation
    return false;
}

bool j_SaveForceHandle (int lp_table, int lp_parentKey, int lp_childKey, playergroup lp_whichForce) {
    // Automatic Variable Declarations
    // Implementation
    return false;
}

bool j_SaveGroupHandle (int lp_table, int lp_parentKey, int lp_childKey, unitgroup lp_whichGroup) {
    // Automatic Variable Declarations
    // Implementation
    return false;
}

bool j_SaveLocationHandle (int lp_table, int lp_parentKey, int lp_childKey, point lp_whichLocation) {
    // Automatic Variable Declarations
    // Implementation
    return false;
}

bool j_SaveRectHandle (int lp_table, int lp_parentKey, int lp_childKey, region lp_whichRect) {
    // Automatic Variable Declarations
    // Implementation
    return false;
}

bool j_SaveBooleanExprHandle (int lp_table, int lp_parentKey, int lp_childKey, string lp_whichBoolexpr) {
    // Automatic Variable Declarations
    // Implementation
    return false;
}

bool j_SaveSoundHandle (int lp_table, int lp_parentKey, int lp_childKey, sound lp_whichSound) {
    // Automatic Variable Declarations
    // Implementation
    return false;
}

bool j_SaveEffectHandle (int lp_table, int lp_parentKey, int lp_childKey, actor lp_whichEffect) {
    // Automatic Variable Declarations
    // Implementation
    return false;
}

bool j_SaveUnitPoolHandle (int lp_table, int lp_parentKey, int lp_childKey, string lp_whichUnitpool) {
    // Automatic Variable Declarations
    // Implementation
    return false;
}

bool j_SaveItemPoolHandle (int lp_table, int lp_parentKey, int lp_childKey, string lp_whichItempool) {
    // Automatic Variable Declarations
    // Implementation
    return false;
}

bool j_SaveQuestHandle (int lp_table, int lp_parentKey, int lp_childKey, int lp_whichQuest) {
    // Automatic Variable Declarations
    // Implementation
    return false;
}

bool j_SaveQuestItemHandle (int lp_table, int lp_parentKey, int lp_childKey, int lp_whichQuestitem) {
    // Automatic Variable Declarations
    // Implementation
    return false;
}

bool j_SaveDefeatConditionHandle (int lp_table, int lp_parentKey, int lp_childKey, int lp_whichDefeatcondition) {
    // Automatic Variable Declarations
    // Implementation
    return false;
}

bool j_SaveTimerDialogHandle (int lp_table, int lp_parentKey, int lp_childKey, int lp_whichTimerdialog) {
    // Automatic Variable Declarations
    // Implementation
    return false;
}

bool j_SaveLeaderboardHandle (int lp_table, int lp_parentKey, int lp_childKey, int lp_whichLeaderboard) {
    // Automatic Variable Declarations
    // Implementation
    return false;
}

bool j_SaveMultiboardHandle (int lp_table, int lp_parentKey, int lp_childKey, int lp_whichMultiboard) {
    // Automatic Variable Declarations
    // Implementation
    return false;
}

bool j_SaveMultiboardItemHandle (int lp_table, int lp_parentKey, int lp_childKey, int lp_whichMultiboarditem) {
    // Automatic Variable Declarations
    // Implementation
    return false;
}

bool j_SaveTrackableHandle (int lp_table, int lp_parentKey, int lp_childKey, unit lp_whichTrackable) {
    // Automatic Variable Declarations
    // Implementation
    return false;
}

bool j_SaveDialogHandle (int lp_table, int lp_parentKey, int lp_childKey, int lp_whichDialog) {
    // Automatic Variable Declarations
    // Implementation
    return false;
}

bool j_SaveButtonHandle (int lp_table, int lp_parentKey, int lp_childKey, int lp_whichButton) {
    // Automatic Variable Declarations
    // Implementation
    return false;
}

bool j_SaveTextTagHandle (int lp_table, int lp_parentKey, int lp_childKey, int lp_whichTexttag) {
    // Automatic Variable Declarations
    // Implementation
    return false;
}

bool j_SaveLightningHandle (int lp_table, int lp_parentKey, int lp_childKey, actor lp_whichLightning) {
    // Automatic Variable Declarations
    // Implementation
    return false;
}

bool j_SaveImageHandle (int lp_table, int lp_parentKey, int lp_childKey, actor lp_whichImage) {
    // Automatic Variable Declarations
    // Implementation
    return false;
}

bool j_SaveUbersplatHandle (int lp_table, int lp_parentKey, int lp_childKey, actor lp_whichUbersplat) {
    // Automatic Variable Declarations
    // Implementation
    return false;
}

bool j_SaveRegionHandle (int lp_table, int lp_parentKey, int lp_childKey, region lp_whichRegion) {
    // Automatic Variable Declarations
    // Implementation
    return false;
}

bool j_SaveFogStateHandle (int lp_table, int lp_parentKey, int lp_childKey, int lp_whichFogState) {
    // Automatic Variable Declarations
    // Implementation
    return false;
}

bool j_SaveFogModifierHandle (int lp_table, int lp_parentKey, int lp_childKey, revealer lp_whichFogModifier) {
    // Automatic Variable Declarations
    // Implementation
    return false;
}

bool j_SaveAgentHandle (int lp_table, int lp_parentKey, int lp_childKey, int lp_whichAgent) {
    // Automatic Variable Declarations
    // Implementation
    return false;
}

bool j_SaveHashtableHandle (int lp_table, int lp_parentKey, int lp_childKey, int lp_whichHashtable) {
    // Automatic Variable Declarations
    // Implementation
    return false;
}

int j_LoadInteger (int lp_table, int lp_parentKey, int lp_childKey) {
    // Automatic Variable Declarations
    // Implementation
    return 0;
}

fixed j_LoadReal (int lp_table, int lp_parentKey, int lp_childKey) {
    // Automatic Variable Declarations
    // Implementation
    return 0;
}

bool j_LoadBoolean (int lp_table, int lp_parentKey, int lp_childKey) {
    // Automatic Variable Declarations
    // Implementation
    return false;
}

string j_LoadStr (int lp_table, int lp_parentKey, int lp_childKey) {
    // Automatic Variable Declarations
    // Implementation
    return null;
}

int j_LoadPlayerHandle (int lp_table, int lp_parentKey, int lp_childKey) {
    // Automatic Variable Declarations
    // Implementation
    return 0;
}

unit j_LoadWidgetHandle (int lp_table, int lp_parentKey, int lp_childKey) {
    // Automatic Variable Declarations
    // Implementation
    return null;
}

unit j_LoadDestructableHandle (int lp_table, int lp_parentKey, int lp_childKey) {
    // Automatic Variable Declarations
    // Implementation
    return null;
}

unit j_LoadItemHandle (int lp_table, int lp_parentKey, int lp_childKey) {
    // Automatic Variable Declarations
    // Implementation
    return null;
}

unit j_LoadUnitHandle (int lp_table, int lp_parentKey, int lp_childKey) {
    // Automatic Variable Declarations
    // Implementation
    return null;
}

string j_LoadAbilityHandle (int lp_table, int lp_parentKey, int lp_childKey) {
    // Automatic Variable Declarations
    // Implementation
    return null;
}

timer j_LoadTimerHandle (int lp_table, int lp_parentKey, int lp_childKey) {
    // Automatic Variable Declarations
    // Implementation
    return null;
}

trigger j_LoadTriggerHandle (int lp_table, int lp_parentKey, int lp_childKey) {
    // Automatic Variable Declarations
    // Implementation
    return null;
}

string j_LoadTriggerConditionHandle (int lp_table, int lp_parentKey, int lp_childKey) {
    // Automatic Variable Declarations
    // Implementation
    return null;
}

string j_LoadTriggerActionHandle (int lp_table, int lp_parentKey, int lp_childKey) {
    // Automatic Variable Declarations
    // Implementation
    return null;
}

void j_LoadTriggerEventHandle (trigger t, int lp_table, int lp_parentKey, int lp_childKey) {
    // Automatic Variable Declarations
    // Implementation
}

playergroup j_LoadForceHandle (int lp_table, int lp_parentKey, int lp_childKey) {
    // Automatic Variable Declarations
    // Implementation
    return null;
}

unitgroup j_LoadGroupHandle (int lp_table, int lp_parentKey, int lp_childKey) {
    // Automatic Variable Declarations
    // Implementation
    return null;
}

point j_LoadLocationHandle (int lp_table, int lp_parentKey, int lp_childKey) {
    // Automatic Variable Declarations
    // Implementation
    return null;
}

region j_LoadRectHandle (int lp_table, int lp_parentKey, int lp_childKey) {
    // Automatic Variable Declarations
    // Implementation
    return null;
}

string j_LoadBooleanExprHandle (int lp_table, int lp_parentKey, int lp_childKey) {
    // Automatic Variable Declarations
    // Implementation
    return null;
}

sound j_LoadSoundHandle (int lp_table, int lp_parentKey, int lp_childKey) {
    // Automatic Variable Declarations
    // Implementation
    return null;
}

actor j_LoadEffectHandle (int lp_table, int lp_parentKey, int lp_childKey) {
    // Automatic Variable Declarations
    // Implementation
    return null;
}

string j_LoadUnitPoolHandle (int lp_table, int lp_parentKey, int lp_childKey) {
    // Automatic Variable Declarations
    // Implementation
    return null;
}

string j_LoadItemPoolHandle (int lp_table, int lp_parentKey, int lp_childKey) {
    // Automatic Variable Declarations
    // Implementation
    return null;
}

int j_LoadQuestHandle (int lp_table, int lp_parentKey, int lp_childKey) {
    // Automatic Variable Declarations
    // Implementation
    return 0;
}

int j_LoadQuestItemHandle (int lp_table, int lp_parentKey, int lp_childKey) {
    // Automatic Variable Declarations
    // Implementation
    return 0;
}

int j_LoadDefeatConditionHandle (int lp_table, int lp_parentKey, int lp_childKey) {
    // Automatic Variable Declarations
    // Implementation
    return 0;
}

int j_LoadTimerDialogHandle (int lp_table, int lp_parentKey, int lp_childKey) {
    // Automatic Variable Declarations
    // Implementation
    return 0;
}

int j_LoadLeaderboardHandle (int lp_table, int lp_parentKey, int lp_childKey) {
    // Automatic Variable Declarations
    // Implementation
    return 0;
}

int j_LoadMultiboardHandle (int lp_table, int lp_parentKey, int lp_childKey) {
    // Automatic Variable Declarations
    // Implementation
    return 0;
}

int j_LoadMultiboardItemHandle (int lp_table, int lp_parentKey, int lp_childKey) {
    // Automatic Variable Declarations
    // Implementation
    return 0;
}

unit j_LoadTrackableHandle (int lp_table, int lp_parentKey, int lp_childKey) {
    // Automatic Variable Declarations
    // Implementation
    return null;
}

int j_LoadDialogHandle (int lp_table, int lp_parentKey, int lp_childKey) {
    // Automatic Variable Declarations
    // Implementation
    return 0;
}

int j_LoadButtonHandle (int lp_table, int lp_parentKey, int lp_childKey) {
    // Automatic Variable Declarations
    // Implementation
    return 0;
}

int j_LoadTextTagHandle (int lp_table, int lp_parentKey, int lp_childKey) {
    // Automatic Variable Declarations
    // Implementation
    return 0;
}

actor j_LoadLightningHandle (int lp_table, int lp_parentKey, int lp_childKey) {
    // Automatic Variable Declarations
    // Implementation
    return null;
}

actor j_LoadImageHandle (int lp_table, int lp_parentKey, int lp_childKey) {
    // Automatic Variable Declarations
    // Implementation
    return null;
}

actor j_LoadUbersplatHandle (int lp_table, int lp_parentKey, int lp_childKey) {
    // Automatic Variable Declarations
    // Implementation
    return null;
}

region j_LoadRegionHandle (int lp_table, int lp_parentKey, int lp_childKey) {
    // Automatic Variable Declarations
    // Implementation
    return null;
}

int j_LoadFogStateHandle (int lp_table, int lp_parentKey, int lp_childKey) {
    // Automatic Variable Declarations
    // Implementation
    return 0;
}

revealer j_LoadFogModifierHandle (int lp_table, int lp_parentKey, int lp_childKey) {
    // Automatic Variable Declarations
    // Implementation
    return null;
}

int j_LoadHashtableHandle (int lp_table, int lp_parentKey, int lp_childKey) {
    // Automatic Variable Declarations
    // Implementation
    return 0;
}

bool j_HaveSavedInteger (int lp_table, int lp_parentKey, int lp_childKey) {
    // Automatic Variable Declarations
    // Implementation
    return false;
}

bool j_HaveSavedReal (int lp_table, int lp_parentKey, int lp_childKey) {
    // Automatic Variable Declarations
    // Implementation
    return false;
}

bool j_HaveSavedBoolean (int lp_table, int lp_parentKey, int lp_childKey) {
    // Automatic Variable Declarations
    // Implementation
    return false;
}

bool j_HaveSavedString (int lp_table, int lp_parentKey, int lp_childKey) {
    // Automatic Variable Declarations
    // Implementation
    return false;
}

bool j_HaveSavedHandle (int lp_table, int lp_parentKey, int lp_childKey) {
    // Automatic Variable Declarations
    // Implementation
    return false;
}

void j_RemoveSavedInteger (int lp_table, int lp_parentKey, int lp_childKey) {
    // Automatic Variable Declarations
}

void j_RemoveSavedReal (int lp_table, int lp_parentKey, int lp_childKey) {
    // Automatic Variable Declarations
}

void j_RemoveSavedBoolean (int lp_table, int lp_parentKey, int lp_childKey) {
    // Automatic Variable Declarations
}

void j_RemoveSavedString (int lp_table, int lp_parentKey, int lp_childKey) {
    // Automatic Variable Declarations
}

void j_RemoveSavedHandle (int lp_table, int lp_parentKey, int lp_childKey) {
    // Automatic Variable Declarations
}

void j_FlushParentHashtable (int lp_table) {
    // Automatic Variable Declarations
}

void j_FlushChildHashtable (int lp_table, int lp_parentKey) {
    // Automatic Variable Declarations
}

string j_CreateUnitPool () {
    // Automatic Variable Declarations
    // Implementation
    return null;
}

void j_DestroyUnitPool (string lp_whichPool) {
    // Automatic Variable Declarations
}

void j_UnitPoolAddUnitType (string lp_whichPool, int lp_unitId, fixed lp_weight) {
    // Automatic Variable Declarations
}

void j_UnitPoolRemoveUnitType (string lp_whichPool, int lp_unitId) {
    // Automatic Variable Declarations
}

unit j_PlaceRandomUnit (string lp_whichPool, int lp_forWhichPlayer, fixed lp_x, fixed lp_y, fixed lp_facing) {
    // Automatic Variable Declarations
    // Implementation
    return null;
}

string j_CreateItemPool () {
    // Automatic Variable Declarations
    // Implementation
    return null;
}

void j_DestroyItemPool (string lp_whichItemPool) {
    // Automatic Variable Declarations
}

void j_ItemPoolAddItemType (string lp_whichItemPool, int lp_itemId, fixed lp_weight) {
    // Automatic Variable Declarations
}

void j_ItemPoolRemoveItemType (string lp_whichItemPool, int lp_itemId) {
    // Automatic Variable Declarations
}

unit j_PlaceRandomItem (string lp_whichItemPool, fixed lp_x, fixed lp_y) {
    // Automatic Variable Declarations
    // Implementation
    return null;
}

int j_ChooseRandomCreep (int lp_level) {
    // Automatic Variable Declarations
    // Implementation
    return 0;
}

int j_ChooseRandomNPBuilding () {
    // Automatic Variable Declarations
    // Implementation
    return 0;
}

int j_ChooseRandomItem (int lp_level) {
    // Automatic Variable Declarations
    // Implementation
    return 0;
}

int j_ChooseRandomItemEx (int lp_whichType, int lp_level) {
    // Automatic Variable Declarations
    // Implementation
    return 0;
}

void j_SetRandomSeed (int lp_seed) {
    // Automatic Variable Declarations
}

void j_SetTerrainFog (fixed lp_a, fixed lp_b, fixed lp_c, fixed lp_d, fixed lp_e) {
    // Automatic Variable Declarations
}

void j_ResetTerrainFog () {
    // Automatic Variable Declarations
}

void j_SetUnitFog (fixed lp_a, fixed lp_b, fixed lp_c, fixed lp_d, fixed lp_e) {
    // Automatic Variable Declarations
}

void j_SetTerrainFogEx (int lp_style, fixed lp_zstart, fixed lp_zend, fixed lp_density, fixed lp_red, fixed lp_green, fixed lp_blue) {
    // Automatic Variable Declarations
}

void j_DisplayTextToPlayer (int lp_toPlayer, fixed lp_x, fixed lp_y, string lp_message) {
    // Automatic Variable Declarations
}

void j_DisplayTimedTextToPlayer (int lp_toPlayer, fixed lp_x, fixed lp_y, fixed lp_duration, string lp_message) {
    // Automatic Variable Declarations
}

void j_DisplayTimedTextFromPlayer (int lp_toPlayer, fixed lp_x, fixed lp_y, fixed lp_duration, string lp_message) {
    // Automatic Variable Declarations
}

void j_ClearTextMessages () {
    // Automatic Variable Declarations
}

void j_SetDayNightModels (string lp_terrainDNCFile, string lp_unitDNCFile) {
    // Automatic Variable Declarations
}

void j_SetSkyModel (string lp_skyModelFile) {
    // Automatic Variable Declarations
}

void j_EnableUserControl (bool lp_b) {
    // Automatic Variable Declarations
}

void j_EnableUserUI (bool lp_b) {
    // Automatic Variable Declarations
}

void j_SuspendTimeOfDay (bool lp_b) {
    // Automatic Variable Declarations
}

void j_SetTimeOfDayScale (fixed lp_r) {
    // Automatic Variable Declarations
}

fixed j_GetTimeOfDayScale () {
    // Automatic Variable Declarations
    // Implementation
    return 0;
}

void j_ShowInterface (bool lp_flag, fixed lp_fadeDuration) {
    // Automatic Variable Declarations
}

void j_PauseGame (bool lp_flag) {
    // Automatic Variable Declarations
}

void j_UnitAddIndicator (unit lp_whichUnit, int lp_red, int lp_green, int lp_blue, int lp_alpha) {
    // Automatic Variable Declarations
}

void j_AddIndicator (unit lp_whichWidget, int lp_red, int lp_green, int lp_blue, int lp_alpha) {
    // Automatic Variable Declarations
}

void j_PingMinimap (fixed lp_x, fixed lp_y, fixed lp_duration) {
    // Automatic Variable Declarations
}

void j_PingMinimapEx (fixed lp_x, fixed lp_y, fixed lp_duration, int lp_red, int lp_green, int lp_blue, bool lp_extraEffects) {
    // Automatic Variable Declarations
}

void j_EnableOcclusion (bool lp_flag) {
    // Automatic Variable Declarations
}

void j_SetIntroShotText (string lp_introText) {
    // Automatic Variable Declarations
}

void j_SetIntroShotModel (string lp_introModelPath) {
    // Automatic Variable Declarations
}

void j_EnableWorldFogBoundary (bool lp_b) {
    // Automatic Variable Declarations
}

void j_PlayModelCinematic (string lp_modelName) {
    // Automatic Variable Declarations
}

void j_PlayCinematic (string lp_movieName) {
    // Automatic Variable Declarations
}

void j_ForceUIKey (string lp_key) {
    // Automatic Variable Declarations
}

void j_ForceUICancel () {
    // Automatic Variable Declarations
}

void j_DisplayLoadDialog () {
    // Automatic Variable Declarations
}

void j_SetAltMinimapIcon (string lp_iconPath) {
    // Automatic Variable Declarations
}

void j_DisableRestartMission (bool lp_flag) {
    // Automatic Variable Declarations
}

int j_CreateTextTag () {
    // Automatic Variable Declarations
    // Implementation
    return 0;
}

void j_DestroyTextTag (int lp_t) {
    // Automatic Variable Declarations
}

void j_SetTextTagText (int lp_t, string lp_s, fixed lp_height) {
    // Automatic Variable Declarations
}

void j_SetTextTagPos (int lp_t, fixed lp_x, fixed lp_y, fixed lp_heightOffset) {
    // Automatic Variable Declarations
}

void j_SetTextTagPosUnit (int lp_t, unit lp_whichUnit, fixed lp_heightOffset) {
    // Automatic Variable Declarations
}

void j_SetTextTagColor (int lp_t, int lp_red, int lp_green, int lp_blue, int lp_alpha) {
    // Automatic Variable Declarations
}

void j_SetTextTagVelocity (int lp_t, fixed lp_xvel, fixed lp_yvel) {
    // Automatic Variable Declarations
}

void j_SetTextTagVisibility (int lp_t, bool lp_flag) {
    // Automatic Variable Declarations
}

void j_SetTextTagSuspended (int lp_t, bool lp_flag) {
    // Automatic Variable Declarations
}

void j_SetTextTagPermanent (int lp_t, bool lp_flag) {
    // Automatic Variable Declarations
}

void j_SetTextTagAge (int lp_t, fixed lp_age) {
    // Automatic Variable Declarations
}

void j_SetTextTagLifespan (int lp_t, fixed lp_lifespan) {
    // Automatic Variable Declarations
}

void j_SetTextTagFadepoint (int lp_t, fixed lp_fadepoint) {
    // Automatic Variable Declarations
}

void j_SetReservedLocalHeroButtons (int lp_reserved) {
    // Automatic Variable Declarations
}

int j_GetAllyColorFilterState () {
    // Automatic Variable Declarations
    // Implementation
    return 0;
}

void j_SetAllyColorFilterState (int lp_state) {
    // Automatic Variable Declarations
}

bool j_GetCreepCampFilterState () {
    // Automatic Variable Declarations
    // Implementation
    return false;
}

void j_SetCreepCampFilterState (bool lp_state) {
    // Automatic Variable Declarations
}

void j_EnableMinimapFilterButtons (bool lp_enableAlly, bool lp_enableCreep) {
    // Automatic Variable Declarations
}

void j_EnableDragSelect (bool lp_state, bool lp_ui) {
    // Automatic Variable Declarations
}

void j_EnablePreSelect (bool lp_state, bool lp_ui) {
    // Automatic Variable Declarations
}

void j_EnableSelect (bool lp_state, bool lp_ui) {
    // Automatic Variable Declarations
}

unit j_CreateTrackable (string lp_trackableModelPath, fixed lp_x, fixed lp_y, fixed lp_facing) {
    // Automatic Variable Declarations
    // Implementation
    return null;
}

int j_CreateQuest () {
    // Automatic Variable Declarations
    // Implementation
    return 0;
}

void j_DestroyQuest (int lp_whichQuest) {
    // Automatic Variable Declarations
}

void j_QuestSetTitle (int lp_whichQuest, string lp_title) {
    // Automatic Variable Declarations
}

void j_QuestSetDescription (int lp_whichQuest, string lp_description) {
    // Automatic Variable Declarations
}

void j_QuestSetIconPath (int lp_whichQuest, string lp_iconPath) {
    // Automatic Variable Declarations
}

void j_QuestSetRequired (int lp_whichQuest, bool lp_required) {
    // Automatic Variable Declarations
}

void j_QuestSetCompleted (int lp_whichQuest, bool lp_completed) {
    // Automatic Variable Declarations
}

void j_QuestSetDiscovered (int lp_whichQuest, bool lp_discovered) {
    // Automatic Variable Declarations
}

void j_QuestSetFailed (int lp_whichQuest, bool lp_failed) {
    // Automatic Variable Declarations
}

void j_QuestSetEnabled (int lp_whichQuest, bool lp_enabled) {
    // Automatic Variable Declarations
}

bool j_IsQuestRequired (int lp_whichQuest) {
    // Automatic Variable Declarations
    // Implementation
    return false;
}

bool j_IsQuestCompleted (int lp_whichQuest) {
    // Automatic Variable Declarations
    // Implementation
    return false;
}

bool j_IsQuestDiscovered (int lp_whichQuest) {
    // Automatic Variable Declarations
    // Implementation
    return false;
}

bool j_IsQuestFailed (int lp_whichQuest) {
    // Automatic Variable Declarations
    // Implementation
    return false;
}

bool j_IsQuestEnabled (int lp_whichQuest) {
    // Automatic Variable Declarations
    // Implementation
    return false;
}

int j_QuestCreateItem (int lp_whichQuest) {
    // Automatic Variable Declarations
    // Implementation
    return 0;
}

void j_QuestItemSetDescription (int lp_whichQuestItem, string lp_description) {
    // Automatic Variable Declarations
}

void j_QuestItemSetCompleted (int lp_whichQuestItem, bool lp_completed) {
    // Automatic Variable Declarations
}

bool j_IsQuestItemCompleted (int lp_whichQuestItem) {
    // Automatic Variable Declarations
    // Implementation
    return false;
}

int j_CreateDefeatCondition () {
    // Automatic Variable Declarations
    // Implementation
    return 0;
}

void j_DestroyDefeatCondition (int lp_whichCondition) {
    // Automatic Variable Declarations
}

void j_DefeatConditionSetDescription (int lp_whichCondition, string lp_description) {
    // Automatic Variable Declarations
}

void j_FlashQuestDialogButton () {
    // Automatic Variable Declarations
}

void j_ForceQuestDialogUpdate () {
    // Automatic Variable Declarations
}

int j_CreateTimerDialog (timer lp_t) {
    // Automatic Variable Declarations
    // Implementation
    return 0;
}

void j_DestroyTimerDialog (int lp_whichDialog) {
    // Automatic Variable Declarations
}

void j_TimerDialogSetTitle (int lp_whichDialog, string lp_title) {
    // Automatic Variable Declarations
}

void j_TimerDialogSetTitleColor (int lp_whichDialog, int lp_red, int lp_green, int lp_blue, int lp_alpha) {
    // Automatic Variable Declarations
}

void j_TimerDialogSetTimeColor (int lp_whichDialog, int lp_red, int lp_green, int lp_blue, int lp_alpha) {
    // Automatic Variable Declarations
}

void j_TimerDialogSetSpeed (int lp_whichDialog, fixed lp_speedMultFactor) {
    // Automatic Variable Declarations
}

void j_TimerDialogDisplay (int lp_whichDialog, bool lp_display) {
    // Automatic Variable Declarations
}

bool j_IsTimerDialogDisplayed (int lp_whichDialog) {
    // Automatic Variable Declarations
    // Implementation
    return false;
}

void j_TimerDialogSetRealTimeRemaining (int lp_whichDialog, fixed lp_timeRemaining) {
    // Automatic Variable Declarations
}

int j_CreateLeaderboard () {
    // Automatic Variable Declarations
    // Implementation
    return 0;
}

void j_DestroyLeaderboard (int lp_lb) {
    // Automatic Variable Declarations
}

void j_LeaderboardDisplay (int lp_lb, bool lp_show) {
    // Automatic Variable Declarations
}

bool j_IsLeaderboardDisplayed (int lp_lb) {
    // Automatic Variable Declarations
    // Implementation
    return false;
}

int j_LeaderboardGetItemCount (int lp_lb) {
    // Automatic Variable Declarations
    // Implementation
    return 0;
}

void j_LeaderboardSetSizeByItemCount (int lp_lb, int lp_count) {
    // Automatic Variable Declarations
}

void j_LeaderboardAddItem (int lp_lb, string lp_label, int lp_value, int lp_p) {
    // Automatic Variable Declarations
}

void j_LeaderboardRemoveItem (int lp_lb, int lp_index) {
    // Automatic Variable Declarations
}

void j_LeaderboardRemovePlayerItem (int lp_lb, int lp_p) {
    // Automatic Variable Declarations
}

void j_LeaderboardClear (int lp_lb) {
    // Automatic Variable Declarations
}

void j_LeaderboardSortItemsByValue (int lp_lb, bool lp_ascending) {
    // Automatic Variable Declarations
}

void j_LeaderboardSortItemsByPlayer (int lp_lb, bool lp_ascending) {
    // Automatic Variable Declarations
}

void j_LeaderboardSortItemsByLabel (int lp_lb, bool lp_ascending) {
    // Automatic Variable Declarations
}

bool j_LeaderboardHasPlayerItem (int lp_lb, int lp_p) {
    // Automatic Variable Declarations
    // Implementation
    return false;
}

int j_LeaderboardGetPlayerIndex (int lp_lb, int lp_p) {
    // Automatic Variable Declarations
    // Implementation
    return 0;
}

void j_LeaderboardSetLabel (int lp_lb, string lp_label) {
    // Automatic Variable Declarations
}

string j_LeaderboardGetLabelText (int lp_lb) {
    // Automatic Variable Declarations
    // Implementation
    return null;
}

void j_PlayerSetLeaderboard (int lp_toPlayer, int lp_lb) {
    // Automatic Variable Declarations
}

int j_PlayerGetLeaderboard (int lp_toPlayer) {
    // Automatic Variable Declarations
    // Implementation
    return 0;
}

void j_LeaderboardSetLabelColor (int lp_lb, int lp_red, int lp_green, int lp_blue, int lp_alpha) {
    // Automatic Variable Declarations
}

void j_LeaderboardSetValueColor (int lp_lb, int lp_red, int lp_green, int lp_blue, int lp_alpha) {
    // Automatic Variable Declarations
}

void j_LeaderboardSetStyle (int lp_lb, bool lp_showLabel, bool lp_showNames, bool lp_showValues, bool lp_showIcons) {
    // Automatic Variable Declarations
}

void j_LeaderboardSetItemValue (int lp_lb, int lp_whichItem, int lp_val) {
    // Automatic Variable Declarations
}

void j_LeaderboardSetItemLabel (int lp_lb, int lp_whichItem, string lp_val) {
    // Automatic Variable Declarations
}

void j_LeaderboardSetItemStyle (int lp_lb, int lp_whichItem, bool lp_showLabel, bool lp_showValue, bool lp_showIcon) {
    // Automatic Variable Declarations
}

void j_LeaderboardSetItemLabelColor (int lp_lb, int lp_whichItem, int lp_red, int lp_green, int lp_blue, int lp_alpha) {
    // Automatic Variable Declarations
}

void j_LeaderboardSetItemValueColor (int lp_lb, int lp_whichItem, int lp_red, int lp_green, int lp_blue, int lp_alpha) {
    // Automatic Variable Declarations
}

int j_CreateMultiboard () {
    // Automatic Variable Declarations
    // Implementation
    return 0;
}

void j_DestroyMultiboard (int lp_lb) {
    // Automatic Variable Declarations
}

void j_MultiboardDisplay (int lp_lb, bool lp_show) {
    // Automatic Variable Declarations
}

bool j_IsMultiboardDisplayed (int lp_lb) {
    // Automatic Variable Declarations
    // Implementation
    return false;
}

void j_MultiboardMinimize (int lp_lb, bool lp_minimize) {
    // Automatic Variable Declarations
}

bool j_IsMultiboardMinimized (int lp_lb) {
    // Automatic Variable Declarations
    // Implementation
    return false;
}

void j_MultiboardClear (int lp_lb) {
    // Automatic Variable Declarations
}

void j_MultiboardSetTitleText (int lp_lb, string lp_label) {
    // Automatic Variable Declarations
}

string j_MultiboardGetTitleText (int lp_lb) {
    // Automatic Variable Declarations
    // Implementation
    return null;
}

void j_MultiboardSetTitleTextColor (int lp_lb, int lp_red, int lp_green, int lp_blue, int lp_alpha) {
    // Automatic Variable Declarations
}

int j_MultiboardGetRowCount (int lp_lb) {
    // Automatic Variable Declarations
    // Implementation
    return 0;
}

int j_MultiboardGetColumnCount (int lp_lb) {
    // Automatic Variable Declarations
    // Implementation
    return 0;
}

void j_MultiboardSetColumnCount (int lp_lb, int lp_count) {
    // Automatic Variable Declarations
}

void j_MultiboardSetRowCount (int lp_lb, int lp_count) {
    // Automatic Variable Declarations
}

void j_MultiboardSetItemsStyle (int lp_lb, bool lp_showValues, bool lp_showIcons) {
    // Automatic Variable Declarations
}

void j_MultiboardSetItemsValue (int lp_lb, string lp_value) {
    // Automatic Variable Declarations
}

void j_MultiboardSetItemsValueColor (int lp_lb, int lp_red, int lp_green, int lp_blue, int lp_alpha) {
    // Automatic Variable Declarations
}

void j_MultiboardSetItemsWidth (int lp_lb, fixed lp_width) {
    // Automatic Variable Declarations
}

void j_MultiboardSetItemsIcon (int lp_lb, string lp_iconPath) {
    // Automatic Variable Declarations
}

int j_MultiboardGetItem (int lp_lb, int lp_row, int lp_column) {
    // Automatic Variable Declarations
    // Implementation
    return 0;
}

void j_MultiboardReleaseItem (int lp_mbi) {
    // Automatic Variable Declarations
}

void j_MultiboardSetItemStyle (int lp_mbi, bool lp_showValue, bool lp_showIcon) {
    // Automatic Variable Declarations
}

void j_MultiboardSetItemValue (int lp_mbi, string lp_val) {
    // Automatic Variable Declarations
}

void j_MultiboardSetItemValueColor (int lp_mbi, int lp_red, int lp_green, int lp_blue, int lp_alpha) {
    // Automatic Variable Declarations
}

void j_MultiboardSetItemWidth (int lp_mbi, fixed lp_width) {
    // Automatic Variable Declarations
}

void j_MultiboardSetItemIcon (int lp_mbi, string lp_iconFileName) {
    // Automatic Variable Declarations
}

void j_MultiboardSuppressDisplay (bool lp_flag) {
    // Automatic Variable Declarations
}

void j_SetCameraPosition (fixed lp_x, fixed lp_y) {
    // Automatic Variable Declarations
}

void j_SetCameraQuickPosition (fixed lp_x, fixed lp_y) {
    // Automatic Variable Declarations
}

void j_SetCameraBounds (fixed lp_x1, fixed lp_y1, fixed lp_x2, fixed lp_y2, fixed lp_x3, fixed lp_y3, fixed lp_x4, fixed lp_y4) {
    // Automatic Variable Declarations
}

void j_StopCamera () {
    // Automatic Variable Declarations
}

void j_ResetToGameCamera (fixed lp_duration) {
    // Automatic Variable Declarations
}

void j_PanCameraTo (fixed lp_x, fixed lp_y) {
    // Automatic Variable Declarations
}

void j_PanCameraToTimed (fixed lp_x, fixed lp_y, fixed lp_duration) {
    // Automatic Variable Declarations
}

void j_PanCameraToWithZ (fixed lp_x, fixed lp_y, fixed lp_zOffsetDest) {
    // Automatic Variable Declarations
}

void j_PanCameraToTimedWithZ (fixed lp_x, fixed lp_y, fixed lp_zOffsetDest, fixed lp_duration) {
    // Automatic Variable Declarations
}

void j_SetCinematicCamera (string lp_cameraModelFile) {
    // Automatic Variable Declarations
}

void j_SetCameraRotateMode (fixed lp_x, fixed lp_y, fixed lp_radiansToSweep, fixed lp_duration) {
    // Automatic Variable Declarations
}

void j_SetCameraField (int lp_whichField, fixed lp_value, fixed lp_duration) {
    // Automatic Variable Declarations
}

void j_AdjustCameraField (int lp_whichField, fixed lp_offset, fixed lp_duration) {
    // Automatic Variable Declarations
}

void j_SetCameraTargetController (unit lp_whichUnit, fixed lp_xoffset, fixed lp_yoffset, bool lp_inheritOrientation) {
    // Automatic Variable Declarations
}

void j_SetCameraOrientController (unit lp_whichUnit, fixed lp_xoffset, fixed lp_yoffset) {
    // Automatic Variable Declarations
}

camerainfo j_CreateCameraSetup () {
    // Automatic Variable Declarations
    // Implementation
    return null;
}

void j_CameraSetupSetField (camerainfo lp_whichSetup, int lp_whichField, fixed lp_value, fixed lp_duration) {
    // Automatic Variable Declarations
}

fixed j_CameraSetupGetField (camerainfo lp_whichSetup, int lp_whichField) {
    // Automatic Variable Declarations
    // Implementation
    return 0;
}

void j_CameraSetupSetDestPosition (camerainfo lp_whichSetup, fixed lp_x, fixed lp_y, fixed lp_duration) {
    // Automatic Variable Declarations
}

point j_CameraSetupGetDestPositionLoc (camerainfo lp_whichSetup) {
    // Automatic Variable Declarations
    // Implementation
    return null;
}

fixed j_CameraSetupGetDestPositionX (camerainfo lp_whichSetup) {
    // Automatic Variable Declarations
    // Implementation
    return 0;
}

fixed j_CameraSetupGetDestPositionY (camerainfo lp_whichSetup) {
    // Automatic Variable Declarations
    // Implementation
    return 0;
}

void j_CameraSetupApply (camerainfo lp_whichSetup, bool lp_doPan, bool lp_panTimed) {
    // Automatic Variable Declarations
}

void j_CameraSetupApplyWithZ (camerainfo lp_whichSetup, fixed lp_zDestOffset) {
    // Automatic Variable Declarations
}

void j_CameraSetupApplyForceDuration (camerainfo lp_whichSetup, bool lp_doPan, fixed lp_forceDuration) {
    // Automatic Variable Declarations
}

void j_CameraSetupApplyForceDurationWithZ (camerainfo lp_whichSetup, fixed lp_zDestOffset, fixed lp_forceDuration) {
    // Automatic Variable Declarations
}

void j_CameraSetTargetNoise (fixed lp_mag, fixed lp_velocity) {
    // Automatic Variable Declarations
}

void j_CameraSetSourceNoise (fixed lp_mag, fixed lp_velocity) {
    // Automatic Variable Declarations
}

void j_CameraSetTargetNoiseEx (fixed lp_mag, fixed lp_velocity, bool lp_vertOnly) {
    // Automatic Variable Declarations
}

void j_CameraSetSourceNoiseEx (fixed lp_mag, fixed lp_velocity, bool lp_vertOnly) {
    // Automatic Variable Declarations
}

void j_CameraSetSmoothingFactor (fixed lp_factor) {
    // Automatic Variable Declarations
}

void j_SetCineFilterTexture (string lp_filename) {
    // Automatic Variable Declarations
}

void j_SetCineFilterBlendMode (int lp_whichMode) {
    // Automatic Variable Declarations
}

void j_SetCineFilterTexMapFlags (int lp_whichFlags) {
    // Automatic Variable Declarations
}

void j_SetCineFilterStartUV (fixed lp_minu, fixed lp_minv, fixed lp_maxu, fixed lp_maxv) {
    // Automatic Variable Declarations
}

void j_SetCineFilterEndUV (fixed lp_minu, fixed lp_minv, fixed lp_maxu, fixed lp_maxv) {
    // Automatic Variable Declarations
}

void j_SetCineFilterStartColor (int lp_red, int lp_green, int lp_blue, int lp_alpha) {
    // Automatic Variable Declarations
}

void j_SetCineFilterEndColor (int lp_red, int lp_green, int lp_blue, int lp_alpha) {
    // Automatic Variable Declarations
}

void j_SetCineFilterDuration (fixed lp_duration) {
    // Automatic Variable Declarations
}

void j_DisplayCineFilter (bool lp_flag) {
    // Automatic Variable Declarations
}

bool j_IsCineFilterDisplayed () {
    // Automatic Variable Declarations
    // Implementation
    return false;
}

void j_SetCinematicScene (int lp_portraitUnitId, int lp_color, string lp_speakerTitle, string lp_text, fixed lp_sceneDuration, fixed lp_voiceoverDuration) {
    // Automatic Variable Declarations
}

void j_EndCinematicScene () {
    // Automatic Variable Declarations
}

void j_ForceCinematicSubtitles (bool lp_flag) {
    // Automatic Variable Declarations
}

fixed j_GetCameraMargin (int lp_whichMargin) {
    // Automatic Variable Declarations
    // Implementation
    return 0;
}

fixed j_GetCameraBoundMinX () {
    // Automatic Variable Declarations
    // Implementation
    return 0;
}

fixed j_GetCameraBoundMinY () {
    // Automatic Variable Declarations
    // Implementation
    return 0;
}

fixed j_GetCameraBoundMaxX () {
    // Automatic Variable Declarations
    // Implementation
    return 0;
}

fixed j_GetCameraBoundMaxY () {
    // Automatic Variable Declarations
    // Implementation
    return 0;
}

fixed j_GetCameraField (int lp_whichField) {
    // Automatic Variable Declarations
    // Implementation
    return 0;
}

fixed j_GetCameraTargetPositionX () {
    // Automatic Variable Declarations
    // Implementation
    return 0;
}

fixed j_GetCameraTargetPositionY () {
    // Automatic Variable Declarations
    // Implementation
    return 0;
}

fixed j_GetCameraTargetPositionZ () {
    // Automatic Variable Declarations
    // Implementation
    return 0;
}

point j_GetCameraTargetPositionLoc () {
    // Automatic Variable Declarations
    // Implementation
    return null;
}

fixed j_GetCameraEyePositionX () {
    // Automatic Variable Declarations
    // Implementation
    return 0;
}

fixed j_GetCameraEyePositionY () {
    // Automatic Variable Declarations
    // Implementation
    return 0;
}

fixed j_GetCameraEyePositionZ () {
    // Automatic Variable Declarations
    // Implementation
    return 0;
}

point j_GetCameraEyePositionLoc () {
    // Automatic Variable Declarations
    // Implementation
    return null;
}

void j_NewSoundEnvironment (string lp_environmentName) {
    // Automatic Variable Declarations
}

sound j_CreateSound (string lp_fileName, bool lp_looping, bool lp_is3D, bool lp_stopwhenoutofrange, int lp_fadeInRate, int lp_fadeOutRate, string lp_eaxSetting) {
    // Automatic Variable Declarations
    // Implementation
    return null;
}

sound j_CreateSoundFilenameWithLabel (string lp_fileName, bool lp_looping, bool lp_is3D, bool lp_stopwhenoutofrange, int lp_fadeInRate, int lp_fadeOutRate, string lp_SLKEntryName) {
    // Automatic Variable Declarations
    // Implementation
    return null;
}

sound j_CreateSoundFromLabel (string lp_soundLabel, bool lp_looping, bool lp_is3D, bool lp_stopwhenoutofrange, int lp_fadeInRate, int lp_fadeOutRate) {
    // Automatic Variable Declarations
    // Implementation
    return null;
}

sound j_CreateMIDISound (string lp_soundLabel, int lp_fadeInRate, int lp_fadeOutRate) {
    // Automatic Variable Declarations
    // Implementation
    return null;
}

void j_SetSoundParamsFromLabel (sound lp_soundHandle, string lp_soundLabel) {
    // Automatic Variable Declarations
}

void j_SetSoundDistanceCutoff (sound lp_soundHandle, fixed lp_cutoff) {
    // Automatic Variable Declarations
}

void j_SetSoundChannel (sound lp_soundHandle, int lp_channel) {
    // Automatic Variable Declarations
}

void j_SetSoundVolume (sound lp_soundHandle, int lp_volume) {
    // Automatic Variable Declarations
}

void j_SetSoundPitch (sound lp_soundHandle, fixed lp_pitch) {
    // Automatic Variable Declarations
}

void j_SetSoundPlayPosition (sound lp_soundHandle, int lp_millisecs) {
    // Automatic Variable Declarations
}

void j_SetSoundDistances (sound lp_soundHandle, fixed lp_minDist, fixed lp_maxDist) {
    // Automatic Variable Declarations
}

void j_SetSoundConeAngles (sound lp_soundHandle, fixed lp_inside, fixed lp_outside, int lp_outsideVolume) {
    // Automatic Variable Declarations
}

void j_SetSoundConeOrientation (sound lp_soundHandle, fixed lp_x, fixed lp_y, fixed lp_z) {
    // Automatic Variable Declarations
}

void j_SetSoundPosition (sound lp_soundHandle, fixed lp_x, fixed lp_y, fixed lp_z) {
    // Automatic Variable Declarations
}

void j_SetSoundVelocity (sound lp_soundHandle, fixed lp_x, fixed lp_y, fixed lp_z) {
    // Automatic Variable Declarations
}

void j_AttachSoundToUnit (sound lp_soundHandle, unit lp_whichUnit) {
    // Automatic Variable Declarations
}

void j_StartSound (sound lp_soundHandle) {
    // Automatic Variable Declarations
}

void j_StopSound (sound lp_soundHandle, bool lp_killWhenDone, bool lp_fadeOut) {
    // Automatic Variable Declarations
}

void j_KillSoundWhenDone (sound lp_soundHandle) {
    // Automatic Variable Declarations
}

void j_SetMapMusic (string lp_musicName, bool lp_random, int lp_index) {
    // Automatic Variable Declarations
}

void j_ClearMapMusic () {
    // Automatic Variable Declarations
}

void j_PlayMusic (string lp_musicName) {
    // Automatic Variable Declarations
}

void j_PlayMusicEx (string lp_musicName, int lp_frommsecs, int lp_fadeinmsecs) {
    // Automatic Variable Declarations
}

void j_StopMusic (bool lp_fadeOut) {
    // Automatic Variable Declarations
}

void j_ResumeMusic () {
    // Automatic Variable Declarations
}

void j_PlayThematicMusic (string lp_musicFileName) {
    // Automatic Variable Declarations
}

void j_PlayThematicMusicEx (string lp_musicFileName, int lp_frommsecs) {
    // Automatic Variable Declarations
}

void j_EndThematicMusic () {
    // Automatic Variable Declarations
}

void j_SetMusicVolume (int lp_volume) {
    // Automatic Variable Declarations
}

void j_SetMusicPlayPosition (int lp_millisecs) {
    // Automatic Variable Declarations
}

void j_SetThematicMusicPlayPosition (int lp_millisecs) {
    // Automatic Variable Declarations
}

void j_SetSoundDuration (sound lp_soundHandle, int lp_duration) {
    // Automatic Variable Declarations
}

int j_GetSoundDuration (sound lp_soundHandle) {
    // Automatic Variable Declarations
    // Implementation
    return 0;
}

int j_GetSoundFileDuration (string lp_musicFileName) {
    // Automatic Variable Declarations
    // Implementation
    return 0;
}

void j_VolumeGroupSetVolume (int lp_vgroup, fixed lp_scale) {
    // Automatic Variable Declarations
}

void j_VolumeGroupReset () {
    // Automatic Variable Declarations
}

bool j_GetSoundIsPlaying (sound lp_soundHandle) {
    // Automatic Variable Declarations
    // Implementation
    return false;
}

bool j_GetSoundIsLoading (sound lp_soundHandle) {
    // Automatic Variable Declarations
    // Implementation
    return false;
}

void j_RegisterStackedSound (sound lp_soundHandle, bool lp_byPosition, fixed lp_rectwidth, fixed lp_rectheight) {
    // Automatic Variable Declarations
}

void j_UnregisterStackedSound (sound lp_soundHandle, bool lp_byPosition, fixed lp_rectwidth, fixed lp_rectheight) {
    // Automatic Variable Declarations
}

actor j_AddWeatherEffect (region lp_where, int lp_effectID) {
    // Automatic Variable Declarations
    // Implementation
    return null;
}

void j_RemoveWeatherEffect (actor lp_whichEffect) {
    // Automatic Variable Declarations
}

void j_EnableWeatherEffect (actor lp_whichEffect, bool lp_enable) {
    // Automatic Variable Declarations
}

actor j_TerrainDeformCrater (fixed lp_x, fixed lp_y, fixed lp_radius, fixed lp_depth, int lp_duration, bool lp_permanent) {
    // Automatic Variable Declarations
    // Implementation
    return null;
}

actor j_TerrainDeformRipple (fixed lp_x, fixed lp_y, fixed lp_radius, fixed lp_depth, int lp_duration, int lp_count, fixed lp_spaceWaves, fixed lp_timeWaves, fixed lp_radiusStartPct, bool lp_limitNeg) {
    // Automatic Variable Declarations
    // Implementation
    return null;
}

actor j_TerrainDeformWave (fixed lp_x, fixed lp_y, fixed lp_dirX, fixed lp_dirY, fixed lp_distance, fixed lp_speed, fixed lp_radius, fixed lp_depth, int lp_trailTime, int lp_count) {
    // Automatic Variable Declarations
    // Implementation
    return null;
}

actor j_TerrainDeformRandom (fixed lp_x, fixed lp_y, fixed lp_radius, fixed lp_minDelta, fixed lp_maxDelta, int lp_duration, int lp_updateInterval) {
    // Automatic Variable Declarations
    // Implementation
    return null;
}

void j_TerrainDeformStop (actor lp_deformation, int lp_duration) {
    // Automatic Variable Declarations
}

void j_TerrainDeformStopAll () {
    // Automatic Variable Declarations
}

actor j_AddSpecialEffect (string lp_modelName, fixed lp_x, fixed lp_y) {
    // Automatic Variable Declarations
    // Implementation
    return null;
}

actor j_AddSpecialEffectLoc (string lp_modelName, point lp_where) {
    // Automatic Variable Declarations
    // Implementation
    return null;
}

actor j_AddSpecialEffectTarget (string lp_modelName, unit lp_targetWidget, string lp_attachPointName) {
    // Automatic Variable Declarations
    // Implementation
    return null;
}

void j_DestroyEffect (actor lp_whichEffect) {
    // Automatic Variable Declarations
}

actor j_AddSpellEffect (string lp_abilityString, int lp_t, fixed lp_x, fixed lp_y) {
    // Automatic Variable Declarations
    // Implementation
    return null;
}

actor j_AddSpellEffectLoc (string lp_abilityString, int lp_t, point lp_where) {
    // Automatic Variable Declarations
    // Implementation
    return null;
}

actor j_AddSpellEffectById (int lp_abilityId, int lp_t, fixed lp_x, fixed lp_y) {
    // Automatic Variable Declarations
    // Implementation
    return null;
}

actor j_AddSpellEffectByIdLoc (int lp_abilityId, int lp_t, point lp_where) {
    // Automatic Variable Declarations
    // Implementation
    return null;
}

actor j_AddSpellEffectTarget (string lp_modelName, int lp_t, unit lp_targetWidget, string lp_attachPoint) {
    // Automatic Variable Declarations
    // Implementation
    return null;
}

actor j_AddSpellEffectTargetById (int lp_abilityId, int lp_t, unit lp_targetWidget, string lp_attachPoint) {
    // Automatic Variable Declarations
    // Implementation
    return null;
}

actor j_AddLightning (string lp_codeName, bool lp_checkVisibility, fixed lp_x1, fixed lp_y1, fixed lp_x2, fixed lp_y2) {
    // Automatic Variable Declarations
    // Implementation
    return null;
}

actor j_AddLightningEx (string lp_codeName, bool lp_checkVisibility, fixed lp_x1, fixed lp_y1, fixed lp_z1, fixed lp_x2, fixed lp_y2, fixed lp_z2) {
    // Automatic Variable Declarations
    // Implementation
    return null;
}

bool j_DestroyLightning (actor lp_whichBolt) {
    // Automatic Variable Declarations
    // Implementation
    return false;
}

bool j_MoveLightning (actor lp_whichBolt, bool lp_checkVisibility, fixed lp_x1, fixed lp_y1, fixed lp_x2, fixed lp_y2) {
    // Automatic Variable Declarations
    // Implementation
    return false;
}

bool j_MoveLightningEx (actor lp_whichBolt, bool lp_checkVisibility, fixed lp_x1, fixed lp_y1, fixed lp_z1, fixed lp_x2, fixed lp_y2, fixed lp_z2) {
    // Automatic Variable Declarations
    // Implementation
    return false;
}

fixed j_GetLightningColorA (actor lp_whichBolt) {
    // Automatic Variable Declarations
    // Implementation
    return 0;
}

fixed j_GetLightningColorR (actor lp_whichBolt) {
    // Automatic Variable Declarations
    // Implementation
    return 0;
}

fixed j_GetLightningColorG (actor lp_whichBolt) {
    // Automatic Variable Declarations
    // Implementation
    return 0;
}

fixed j_GetLightningColorB (actor lp_whichBolt) {
    // Automatic Variable Declarations
    // Implementation
    return 0;
}

bool j_SetLightningColor (actor lp_whichBolt, fixed lp_r, fixed lp_g, fixed lp_b, fixed lp_a) {
    // Automatic Variable Declarations
    // Implementation
    return false;
}

string j_GetAbilityEffect (string lp_abilityString, int lp_t, int lp_index) {
    // Automatic Variable Declarations
    // Implementation
    return null;
}

string j_GetAbilityEffectById (int lp_abilityId, int lp_t, int lp_index) {
    // Automatic Variable Declarations
    // Implementation
    return null;
}

string j_GetAbilitySound (string lp_abilityString, int lp_t) {
    // Automatic Variable Declarations
    // Implementation
    return null;
}

string j_GetAbilitySoundById (int lp_abilityId, int lp_t) {
    // Automatic Variable Declarations
    // Implementation
    return null;
}

int j_GetTerrainCliffLevel (fixed lp_x, fixed lp_y) {
    // Automatic Variable Declarations
    // Implementation
    return 0;
}

void j_SetWaterBaseColor (int lp_red, int lp_green, int lp_blue, int lp_alpha) {
    // Automatic Variable Declarations
}

void j_SetWaterDeforms (bool lp_val) {
    // Automatic Variable Declarations
}

int j_GetTerrainType (fixed lp_x, fixed lp_y) {
    // Automatic Variable Declarations
    // Implementation
    return 0;
}

int j_GetTerrainVariance (fixed lp_x, fixed lp_y) {
    // Automatic Variable Declarations
    // Implementation
    return 0;
}

void j_SetTerrainType (fixed lp_x, fixed lp_y, int lp_terrainType, int lp_variation, int lp_area, int lp_shape) {
    // Automatic Variable Declarations
}

bool j_IsTerrainPathable (fixed lp_x, fixed lp_y, int lp_t) {
    // Automatic Variable Declarations
    // Implementation
    return false;
}

void j_SetTerrainPathable (fixed lp_x, fixed lp_y, int lp_t, bool lp_flag) {
    // Automatic Variable Declarations
}

actor j_CreateImage (string lp_file, fixed lp_sizeX, fixed lp_sizeY, fixed lp_sizeZ, fixed lp_posX, fixed lp_posY, fixed lp_posZ, fixed lp_originX, fixed lp_originY, fixed lp_originZ, int lp_imageType) {
    // Automatic Variable Declarations
    // Implementation
    return null;
}

void j_DestroyImage (actor lp_whichImage) {
    // Automatic Variable Declarations
}

void j_ShowImage (actor lp_whichImage, bool lp_flag) {
    // Automatic Variable Declarations
}

void j_SetImageConstantHeight (actor lp_whichImage, bool lp_flag, fixed lp_height) {
    // Automatic Variable Declarations
}

void j_SetImagePosition (actor lp_whichImage, fixed lp_x, fixed lp_y, fixed lp_z) {
    // Automatic Variable Declarations
}

void j_SetImageColor (actor lp_whichImage, int lp_red, int lp_green, int lp_blue, int lp_alpha) {
    // Automatic Variable Declarations
}

void j_SetImageRender (actor lp_whichImage, bool lp_flag) {
    // Automatic Variable Declarations
}

void j_SetImageRenderAlways (actor lp_whichImage, bool lp_flag) {
    // Automatic Variable Declarations
}

void j_SetImageAboveWater (actor lp_whichImage, bool lp_flag, bool lp_useWaterAlpha) {
    // Automatic Variable Declarations
}

void j_SetImageType (actor lp_whichImage, int lp_imageType) {
    // Automatic Variable Declarations
}

actor j_CreateUbersplat (fixed lp_x, fixed lp_y, string lp_name, int lp_red, int lp_green, int lp_blue, int lp_alpha, bool lp_forcePaused, bool lp_noBirthTime) {
    // Automatic Variable Declarations
    // Implementation
    return null;
}

void j_DestroyUbersplat (actor lp_whichSplat) {
    // Automatic Variable Declarations
}

void j_ResetUbersplat (actor lp_whichSplat) {
    // Automatic Variable Declarations
}

void j_FinishUbersplat (actor lp_whichSplat) {
    // Automatic Variable Declarations
}

void j_ShowUbersplat (actor lp_whichSplat, bool lp_flag) {
    // Automatic Variable Declarations
}

void j_SetUbersplatRender (actor lp_whichSplat, bool lp_flag) {
    // Automatic Variable Declarations
}

void j_SetUbersplatRenderAlways (actor lp_whichSplat, bool lp_flag) {
    // Automatic Variable Declarations
}

void j_SetBlight (int lp_whichPlayer, fixed lp_x, fixed lp_y, fixed lp_radius, bool lp_addBlight) {
    // Automatic Variable Declarations
}

void j_SetBlightRect (int lp_whichPlayer, region lp_r, bool lp_addBlight) {
    // Automatic Variable Declarations
}

void j_SetBlightPoint (int lp_whichPlayer, fixed lp_x, fixed lp_y, bool lp_addBlight) {
    // Automatic Variable Declarations
}

void j_SetBlightLoc (int lp_whichPlayer, point lp_whichLocation, fixed lp_radius, bool lp_addBlight) {
    // Automatic Variable Declarations
}

unit j_CreateBlightedGoldmine (int lp_id, fixed lp_x, fixed lp_y, fixed lp_face) {
    // Automatic Variable Declarations
    // Implementation
    return null;
}

bool j_IsPointBlighted (fixed lp_x, fixed lp_y) {
    // Automatic Variable Declarations
    // Implementation
    return false;
}

void j_SetDoodadAnimation (fixed lp_x, fixed lp_y, fixed lp_radius, int lp_doodadID, bool lp_nearestOnly, string lp_animName, bool lp_animRandom) {
    // Automatic Variable Declarations
}

void j_SetDoodadAnimationRect (region lp_r, int lp_doodadID, string lp_animName, bool lp_animRandom) {
    // Automatic Variable Declarations
}

void j_StartMeleeAI (int lp_num, string lp_script) {
    // Automatic Variable Declarations
}

void j_StartCampaignAI (int lp_num, string lp_script) {
    // Automatic Variable Declarations
}

void j_CommandAI (int lp_num, int lp_command, int lp_data) {
    // Automatic Variable Declarations
}

void j_PauseCompAI (int lp_p, bool lp_pause) {
    // Automatic Variable Declarations
}

int j_GetAIDifficulty (int lp_num) {
    // Automatic Variable Declarations
    // Implementation
    return 0;
}

void j_RemoveGuardPosition (unit lp_hUnit) {
    // Automatic Variable Declarations
}

void j_RecycleGuardPosition (unit lp_hUnit) {
    // Automatic Variable Declarations
}

void j_RemoveAllGuardPositions (int lp_num) {
    // Automatic Variable Declarations
}

void j_Cheat (string lp_cheatStr) {
    // Automatic Variable Declarations
}

bool j_IsNoVictoryCheat () {
    // Automatic Variable Declarations
    // Implementation
    return false;
}

bool j_IsNoDefeatCheat () {
    // Automatic Variable Declarations
    // Implementation
    return false;
}

void j_Preload (string lp_filename) {
    // Automatic Variable Declarations
}

void j_PreloadEnd (fixed lp_timeout) {
    // Automatic Variable Declarations
}

void j_PreloadStart () {
    // Automatic Variable Declarations
}

void j_PreloadRefresh () {
    // Automatic Variable Declarations
}

void j_PreloadEndEx () {
    // Automatic Variable Declarations
}

void j_PreloadGenClear () {
    // Automatic Variable Declarations
}

void j_PreloadGenStart () {
    // Automatic Variable Declarations
}

void j_PreloadGenEnd (string lp_filename) {
    // Automatic Variable Declarations
}

void j_Preloader (string lp_filename) {
    // Automatic Variable Declarations
}

// Triggers
//--------------------------------------------------------------------------------------------------
// Trigger: Custom Init
//--------------------------------------------------------------------------------------------------
bool libGAWT_gt_CustomInit_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv_u;

    // Automatic Variable Declarations
    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    PortraitSetSize(libNtve_gf_CinematicPortrait(libNtve_ge_CinematicPortraitPosition_CenterLeft), 220, 325);
    ActorSend(ActorFromPortrait(libNtve_gf_CinematicPortrait(libNtve_ge_CinematicPortraitPosition_CenterLeft)), "AnimGroupApply Portrait,Stand");
    PortraitUseTransition(libNtve_gf_CinematicPortrait(libNtve_ge_CinematicPortraitPosition_CenterLeft), false);
    UISetMinimumLetterboxHeight(220);
    TechTreeAbilityAllow(1, AbilityCommand("AOeq", 0), false);
    TechTreeAbilityAllow(1, AbilityCommand("AOsf", 0), false);
    TechTreeAbilityAllow(1, AbilityCommand("OthrLearn", 1), false);
    TechTreeAbilityAllow(1, AbilityCommand("OthrLearn", 3), false);
    libNtve_gf_SetAllSoundChannelVolumes(libNtve_ge_VolumeChannelMode_Speech, PlayerGroupAll(), 0.0);
    InitBlizzardGlobals();
    InitQueuedTriggers();
    TriggerExecute(gg_trg_Initialization_Phase, true, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libGAWT_gt_CustomInit_Init () {
    libGAWT_gt_CustomInit = TriggerCreate("libGAWT_gt_CustomInit_Func");
    TriggerAddEventMapInit(libGAWT_gt_CustomInit);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Untitled Trigger 003
//--------------------------------------------------------------------------------------------------
bool libGAWT_gt_UntitledTrigger003_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    ActorSend(ActorFromPortrait(libNtve_gf_CinematicPortrait(libNtve_ge_CinematicPortraitPosition_CenterLeft)), "AnimPlay Attack Talk");
    return true;
}

//--------------------------------------------------------------------------------------------------
void libGAWT_gt_UntitledTrigger003_Init () {
    libGAWT_gt_UntitledTrigger003 = TriggerCreate("libGAWT_gt_UntitledTrigger003_Func");
    TriggerAddEventTimePeriodic(libGAWT_gt_UntitledTrigger003, 2.0, c_timeGame);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Untitled Trigger 001
//--------------------------------------------------------------------------------------------------
bool libGAWT_gt_UntitledTrigger001_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    GameOver(1, c_gameOverVictory, false, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libGAWT_gt_UntitledTrigger001_Init () {
    libGAWT_gt_UntitledTrigger001 = TriggerCreate("libGAWT_gt_UntitledTrigger001_Func");
}

void libGAWT_InitTriggers () {
    libGAWT_gt_CustomInit_Init();
    libGAWT_gt_UntitledTrigger003_Init();
    libGAWT_gt_UntitledTrigger001_Init();
}

//--------------------------------------------------------------------------------------------------
// Library Initialization
//--------------------------------------------------------------------------------------------------
bool libGAWT_InitLib_completed = false;

void libGAWT_InitLib () {
    if (libGAWT_InitLib_completed) {
        return;
    }

    libGAWT_InitLib_completed = true;

    libGAWT_InitLibraries();
    libGAWT_InitVariables();
    libGAWT_InitCustomScript();
    libGAWT_InitTriggers();
}

